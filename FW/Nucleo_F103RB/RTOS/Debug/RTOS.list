
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  20000074  0800652c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  0800652c  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fb8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003835  00000000  00000000  0003a055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003d890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad7d  00000000  00000000  0003ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b14  00000000  00000000  0005acc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958ed  00000000  00000000  000707d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001060c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  0010611c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080062d0 	.word	0x080062d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080062d0 	.word	0x080062d0

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Mutex1 */
  Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8000154:	481c      	ldr	r0, [pc, #112]	; (80001c8 <MX_FREERTOS_Init+0x78>)
 8000156:	f002 f8c1 	bl	80022dc <osMutexNew>
 800015a:	4603      	mov	r3, r0
 800015c:	4a1b      	ldr	r2, [pc, #108]	; (80001cc <MX_FREERTOS_Init+0x7c>)
 800015e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000160:	4a1b      	ldr	r2, [pc, #108]	; (80001d0 <MX_FREERTOS_Init+0x80>)
 8000162:	2101      	movs	r1, #1
 8000164:	2001      	movs	r0, #1
 8000166:	f002 fa01 	bl	800256c <osSemaphoreNew>
 800016a:	4603      	mov	r3, r0
 800016c:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <MX_FREERTOS_Init+0x84>)
 800016e:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore_Cnt */
  Semaphore_CntHandle = osSemaphoreNew(5, 5, &Semaphore_Cnt_attributes);
 8000170:	4a19      	ldr	r2, [pc, #100]	; (80001d8 <MX_FREERTOS_Init+0x88>)
 8000172:	2105      	movs	r1, #5
 8000174:	2005      	movs	r0, #5
 8000176:	f002 f9f9 	bl	800256c <osSemaphoreNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a17      	ldr	r2, [pc, #92]	; (80001dc <MX_FREERTOS_Init+0x8c>)
 800017e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <MX_FREERTOS_Init+0x90>)
 8000182:	2200      	movs	r2, #0
 8000184:	2101      	movs	r1, #1
 8000186:	4817      	ldr	r0, [pc, #92]	; (80001e4 <MX_FREERTOS_Init+0x94>)
 8000188:	f002 f824 	bl	80021d4 <osTimerNew>
 800018c:	4603      	mov	r3, r0
 800018e:	4a16      	ldr	r2, [pc, #88]	; (80001e8 <MX_FREERTOS_Init+0x98>)
 8000190:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000192:	4a16      	ldr	r2, [pc, #88]	; (80001ec <MX_FREERTOS_Init+0x9c>)
 8000194:	2100      	movs	r1, #0
 8000196:	4816      	ldr	r0, [pc, #88]	; (80001f0 <MX_FREERTOS_Init+0xa0>)
 8000198:	f001 ff2e 	bl	8001ff8 <osThreadNew>
 800019c:	4603      	mov	r3, r0
 800019e:	4a15      	ldr	r2, [pc, #84]	; (80001f4 <MX_FREERTOS_Init+0xa4>)
 80001a0:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001a2:	4a15      	ldr	r2, [pc, #84]	; (80001f8 <MX_FREERTOS_Init+0xa8>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <MX_FREERTOS_Init+0xac>)
 80001a8:	f001 ff26 	bl	8001ff8 <osThreadNew>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a14      	ldr	r2, [pc, #80]	; (8000200 <MX_FREERTOS_Init+0xb0>)
 80001b0:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80001b2:	4a14      	ldr	r2, [pc, #80]	; (8000204 <MX_FREERTOS_Init+0xb4>)
 80001b4:	2100      	movs	r1, #0
 80001b6:	4814      	ldr	r0, [pc, #80]	; (8000208 <MX_FREERTOS_Init+0xb8>)
 80001b8:	f001 ff1e 	bl	8001ff8 <osThreadNew>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <MX_FREERTOS_Init+0xbc>)
 80001c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001c2:	bf00      	nop
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	08006404 	.word	0x08006404
 80001cc:	200019bc 	.word	0x200019bc
 80001d0:	08006414 	.word	0x08006414
 80001d4:	200019b4 	.word	0x200019b4
 80001d8:	08006424 	.word	0x08006424
 80001dc:	200019a8 	.word	0x200019a8
 80001e0:	080063f4 	.word	0x080063f4
 80001e4:	08000265 	.word	0x08000265
 80001e8:	200019b0 	.word	0x200019b0
 80001ec:	08006388 	.word	0x08006388
 80001f0:	08000211 	.word	0x08000211
 80001f4:	200019a4 	.word	0x200019a4
 80001f8:	080063ac 	.word	0x080063ac
 80001fc:	0800022d 	.word	0x0800022d
 8000200:	200019ac 	.word	0x200019ac
 8000204:	080063d0 	.word	0x080063d0
 8000208:	08000249 	.word	0x08000249
 800020c:	200019b8 	.word	0x200019b8

08000210 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
//	osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	printf("Task 1\r\n");
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <StartDefaultTask+0x18>)
 800021a:	f005 fc05 	bl	8005a28 <puts>
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

//	Task_Action('1');

//	osThreadFlagsSet(myTask02Handle, 0x02);
    osDelay(100);
 800021e:	2064      	movs	r0, #100	; 0x64
 8000220:	f001 ff94 	bl	800214c <osDelay>
	printf("Task 1\r\n");
 8000224:	e7f8      	b.n	8000218 <StartDefaultTask+0x8>
 8000226:	bf00      	nop
 8000228:	08006340 	.word	0x08006340

0800022c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	osThreadFlagsWait(0x02, osFlagsWaitAny, osWaitForever);
	printf("Task 22\r\n");
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <StartTask02+0x18>)
 8000236:	f005 fbf7 	bl	8005a28 <puts>
    osDelay(100);
 800023a:	2064      	movs	r0, #100	; 0x64
 800023c:	f001 ff86 	bl	800214c <osDelay>
	printf("Task 22\r\n");
 8000240:	e7f8      	b.n	8000234 <StartTask02+0x8>
 8000242:	bf00      	nop
 8000244:	08006348 	.word	0x08006348

08000248 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
//	if(osSemaphoreAcquire(myBinarySem01Handle, 0) == osOK)
//	{
//		printf("Task 333\r\n");
//	}
//	osThreadFlagsWait(0x03, osFlagsWaitAny, osWaitForever);
	printf("Task 333\r\n");
 8000250:	4803      	ldr	r0, [pc, #12]	; (8000260 <StartTask03+0x18>)
 8000252:	f005 fbe9 	bl	8005a28 <puts>
	osDelay(100);
 8000256:	2064      	movs	r0, #100	; 0x64
 8000258:	f001 ff78 	bl	800214c <osDelay>
	printf("Task 333\r\n");
 800025c:	e7f8      	b.n	8000250 <StartTask03+0x8>
 800025e:	bf00      	nop
 8000260:	08006354 	.word	0x08006354

08000264 <Callback01>:
  /* USER CODE END StartTask03 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
	...

08000278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <MX_GPIO_Init+0xcc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a2c      	ldr	r2, [pc, #176]	; (8000344 <MX_GPIO_Init+0xcc>)
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0310 	and.w	r3, r3, #16
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a26      	ldr	r2, [pc, #152]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0320 	and.w	r3, r3, #32
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b21      	ldr	r3, [pc, #132]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a20      	ldr	r2, [pc, #128]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_GPIO_Init+0xcc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	603b      	str	r3, [r7, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2120      	movs	r1, #32
 80002f0:	4815      	ldr	r0, [pc, #84]	; (8000348 <MX_GPIO_Init+0xd0>)
 80002f2:	f000 fd95 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_GPIO_Init+0xd4>)
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4811      	ldr	r0, [pc, #68]	; (8000350 <MX_GPIO_Init+0xd8>)
 800030c:	f000 fc04 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000310:	2320      	movs	r3, #32
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <MX_GPIO_Init+0xd0>)
 8000328:	f000 fbf6 	bl	8000b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800032c:	2200      	movs	r2, #0
 800032e:	2105      	movs	r1, #5
 8000330:	2028      	movs	r0, #40	; 0x28
 8000332:	f000 fbc6 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000336:	2028      	movs	r0, #40	; 0x28
 8000338:	f000 fbdf 	bl	8000afa <HAL_NVIC_EnableIRQ>

}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	40010800 	.word	0x40010800
 800034c:	10110000 	.word	0x10110000
 8000350:	40011000 	.word	0x40011000

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 facc 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f80d 	bl	800037a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ff8a 	bl	8000278 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000364:	f000 f9ac 	bl	80006c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000368:	f000 f9d4 	bl	8000714 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //printf("RTOS CMSIS V2 Test\r\n");
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800036c:	f001 fdde 	bl	8001f2c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000370:	f7ff feee 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000374:	f001 fe0c 	bl	8001f90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000378:	e7fe      	b.n	8000378 <main+0x24>

0800037a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b090      	sub	sp, #64	; 0x40
 800037e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	2228      	movs	r2, #40	; 0x28
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f005 fad7 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039c:	2302      	movs	r3, #2
 800039e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	2301      	movs	r3, #1
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	2310      	movs	r3, #16
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	2302      	movs	r3, #2
 80003aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003ac:	2300      	movs	r3, #0
 80003ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fd6a 	bl	8000e94 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003c6:	f000 f82b 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2102      	movs	r1, #2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 ffd5 	bl	8001394 <HAL_RCC_ClockConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003f0:	f000 f816 	bl	8000420 <Error_Handler>
  }
}
 80003f4:	bf00      	nop
 80003f6:	3740      	adds	r7, #64	; 0x40
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d101      	bne.n	8000412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800040e:	f000 fa87 	bl	8000920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40000400 	.word	0x40000400

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <HAL_MspInit+0x68>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a17      	ldr	r2, [pc, #92]	; (8000494 <HAL_MspInit+0x68>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_MspInit+0x68>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_MspInit+0x68>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a11      	ldr	r2, [pc, #68]	; (8000494 <HAL_MspInit+0x68>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x68>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	210f      	movs	r1, #15
 8000466:	f06f 0001 	mvn.w	r0, #1
 800046a:	f000 fb2a 	bl	8000ac2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x6c>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x6c>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	201d      	movs	r0, #29
 80004b2:	f000 fb06 	bl	8000ac2 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004b6:	201d      	movs	r0, #29
 80004b8:	f000 fb1f 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <HAL_InitTick+0xa0>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a1e      	ldr	r2, [pc, #120]	; (800053c <HAL_InitTick+0xa0>)
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <HAL_InitTick+0xa0>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f003 0302 	and.w	r3, r3, #2
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d4:	f107 0210 	add.w	r2, r7, #16
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f8d4 	bl	800168c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004e4:	f001 f8aa 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 80004e8:	4603      	mov	r3, r0
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <HAL_InitTick+0xa4>)
 80004f2:	fba2 2303 	umull	r2, r3, r2, r3
 80004f6:	0c9b      	lsrs	r3, r3, #18
 80004f8:	3b01      	subs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_InitTick+0xa8>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	; (8000548 <HAL_InitTick+0xac>)
 8000500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_InitTick+0xa8>)
 8000504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000508:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_InitTick+0xa8>)
 800050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_InitTick+0xa8>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_InitTick+0xa8>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <HAL_InitTick+0xa8>)
 800051e:	f001 f903 	bl	8001728 <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <HAL_InitTick+0xa8>)
 800052a:	f001 f955 	bl	80017d8 <HAL_TIM_Base_Start_IT>
 800052e:	4603      	mov	r3, r0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	3730      	adds	r7, #48	; 0x30
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	431bde83 	.word	0x431bde83
 8000544:	200019c0 	.word	0x200019c0
 8000548:	40000400 	.word	0x40000400

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <TIM3_IRQHandler+0x10>)
 800057e:	f001 f97d 	bl	800187c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200019c0 	.word	0x200019c0

0800058c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000594:	f000 fc5c 	bl	8000e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  osSemaphoreRelease(myBinarySem01Handle);
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI15_10_IRQHandler+0x1c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f881 	bl	80026a4 <osSemaphoreRelease>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200019b4 	.word	0x200019b4

080005ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00a      	b.n	80005d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005be:	f3af 8000 	nop.w
 80005c2:	4601      	mov	r1, r0
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf0      	blt.n	80005be <_read+0x12>
	}

return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	return -1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800060c:	605a      	str	r2, [r3, #4]
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <_isatty>:

int _isatty(int file)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	return 1;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800062e:	b480      	push	{r7}
 8000630:	b085      	sub	sp, #20
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
	...

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f005 f928 	bl	80058cc <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20005000 	.word	0x20005000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	20000090 	.word	0x20000090
 80006b0:	20001ae8 	.word	0x20001ae8

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f001 fa60 	bl	8001bbc <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f7ff fe8d 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20001a4c 	.word	0x20001a4c
 8000710:	40004400 	.word	0x40004400

08000714 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f001 fa36 	bl	8001bbc <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f7ff fe63 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20001a08 	.word	0x20001a08
 8000764:	40004800 	.word	0x40004800

08000768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <HAL_UART_MspInit+0xe0>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d124      	bne.n	80007d2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <HAL_UART_MspInit+0xe4>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <HAL_UART_MspInit+0xe4>)
 800078e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000792:	61d3      	str	r3, [r2, #28]
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_UART_MspInit+0xe4>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b8:	230c      	movs	r3, #12
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4821      	ldr	r0, [pc, #132]	; (8000850 <HAL_UART_MspInit+0xe8>)
 80007cc:	f000 f9a4 	bl	8000b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80007d0:	e036      	b.n	8000840 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART3)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <HAL_UART_MspInit+0xec>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d131      	bne.n	8000840 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e6:	61d3      	str	r3, [r2, #28]
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_UART_MspInit+0xe4>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800080c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4619      	mov	r1, r3
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <HAL_UART_MspInit+0xf0>)
 8000822:	f000 f979 	bl	8000b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <HAL_UART_MspInit+0xf0>)
 800083c:	f000 f96c 	bl	8000b18 <HAL_GPIO_Init>
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800
 8000854:	40004800 	.word	0x40004800
 8000858:	40010c00 	.word	0x40010c00

0800085c <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		__io_putchar(*ptr++);
	}
#else
	if(osMutexAcquire(Mutex1Handle, osWaitForever) == osOK)
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <_write+0x44>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fdcd 	bl	8002410 <osMutexAcquire>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10c      	bne.n	8000896 <_write+0x3a>
	{
		HAL_UART_Transmit(&huart3, ptr, len, 500);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	b29a      	uxth	r2, r3
 8000880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <_write+0x48>)
 8000888:	f001 f9e5 	bl	8001c56 <HAL_UART_Transmit>
		osMutexRelease(Mutex1Handle);
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <_write+0x44>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fe1b 	bl	80024cc <osMutexRelease>
	}

//	HAL_UART_Transmit(&huart3, ptr, len, 500);

#endif
	return len;
 8000896:	687b      	ldr	r3, [r7, #4]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200019bc 	.word	0x200019bc
 80008a4:	20001a08 	.word	0x20001a08

080008a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ce:	f7ff fef1 	bl	80006b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f005 f801 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fd3d 	bl	8000354 <main>
  bx lr
 80008da:	4770      	bx	lr
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008e4:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 80008e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008ec:	20001ae4 	.word	0x20001ae4

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f8d1 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fdc6 	bl	800049c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fd8c 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	; (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000008 	.word	0x20000008
 8000940:	20001a90 	.word	0x20001a90

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20001a90 	.word	0x20001a90

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <__NVIC_EnableIRQ+0x34>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff4f 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff64 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ffb2 	bl	8000a48 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff81 	bl	80009f4 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff57 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e169      	b.n	8000e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8158 	bne.w	8000dfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	4a9a      	ldr	r2, [pc, #616]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d05e      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b54:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d875      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b5a:	4a98      	ldr	r2, [pc, #608]	; (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d058      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b60:	4a96      	ldr	r2, [pc, #600]	; (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d86f      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b66:	4a96      	ldr	r2, [pc, #600]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d052      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a94      	ldr	r2, [pc, #592]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d869      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b72:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d04c      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b78:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d863      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a92      	ldr	r2, [pc, #584]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d046      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b84:	4a90      	ldr	r2, [pc, #576]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d85d      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d82a      	bhi.n	8000be4 <HAL_GPIO_Init+0xcc>
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d859      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <HAL_GPIO_Init+0x80>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000bed 	.word	0x08000bed
 8000ba0:	08000bff 	.word	0x08000bff
 8000ba4:	08000c41 	.word	0x08000c41
 8000ba8:	08000c47 	.word	0x08000c47
 8000bac:	08000c47 	.word	0x08000c47
 8000bb0:	08000c47 	.word	0x08000c47
 8000bb4:	08000c47 	.word	0x08000c47
 8000bb8:	08000c47 	.word	0x08000c47
 8000bbc:	08000c47 	.word	0x08000c47
 8000bc0:	08000c47 	.word	0x08000c47
 8000bc4:	08000c47 	.word	0x08000c47
 8000bc8:	08000c47 	.word	0x08000c47
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c47 	.word	0x08000c47
 8000bd4:	08000c47 	.word	0x08000c47
 8000bd8:	08000c47 	.word	0x08000c47
 8000bdc:	08000bf5 	.word	0x08000bf5
 8000be0:	08000c09 	.word	0x08000c09
 8000be4:	4a79      	ldr	r2, [pc, #484]	; (8000dcc <HAL_GPIO_Init+0x2b4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bea:	e02c      	b.n	8000c46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e029      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e024      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3308      	adds	r3, #8
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e01f      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	330c      	adds	r3, #12
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e01a      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e013      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	611a      	str	r2, [r3, #16]
          break;
 8000c32:	e009      	b.n	8000c48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	615a      	str	r2, [r3, #20]
          break;
 8000c3e:	e003      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          break;
 8000c46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d801      	bhi.n	8000c52 <HAL_GPIO_Init+0x13a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	e001      	b.n	8000c56 <HAL_GPIO_Init+0x13e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3304      	adds	r3, #4
 8000c56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d802      	bhi.n	8000c64 <HAL_GPIO_Init+0x14c>
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x152>
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	3b08      	subs	r3, #8
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	210f      	movs	r1, #15
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	6a39      	ldr	r1, [r7, #32]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80b1 	beq.w	8000dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c98:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb0:	4a48      	ldr	r2, [pc, #288]	; (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <HAL_GPIO_Init+0x2c0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d013      	beq.n	8000d04 <HAL_GPIO_Init+0x1ec>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3f      	ldr	r2, [pc, #252]	; (8000ddc <HAL_GPIO_Init+0x2c4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d00d      	beq.n	8000d00 <HAL_GPIO_Init+0x1e8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3e      	ldr	r2, [pc, #248]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d007      	beq.n	8000cfc <HAL_GPIO_Init+0x1e4>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3d      	ldr	r2, [pc, #244]	; (8000de4 <HAL_GPIO_Init+0x2cc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d101      	bne.n	8000cf8 <HAL_GPIO_Init+0x1e0>
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	e004      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000d04:	2300      	movs	r3, #0
 8000d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d16:	492f      	ldr	r1, [pc, #188]	; (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	492c      	ldr	r1, [pc, #176]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4928      	ldr	r1, [pc, #160]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4922      	ldr	r1, [pc, #136]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	491e      	ldr	r1, [pc, #120]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4918      	ldr	r1, [pc, #96]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4914      	ldr	r1, [pc, #80]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d021      	beq.n	8000dec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	490e      	ldr	r1, [pc, #56]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
 8000db4:	e021      	b.n	8000dfa <HAL_GPIO_Init+0x2e2>
 8000db6:	bf00      	nop
 8000db8:	10320000 	.word	0x10320000
 8000dbc:	10310000 	.word	0x10310000
 8000dc0:	10220000 	.word	0x10220000
 8000dc4:	10210000 	.word	0x10210000
 8000dc8:	10120000 	.word	0x10120000
 8000dcc:	10110000 	.word	0x10110000
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40011400 	.word	0x40011400
 8000de8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4909      	ldr	r1, [pc, #36]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f47f ae8e 	bne.w	8000b2c <HAL_GPIO_Init+0x14>
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	372c      	adds	r7, #44	; 0x2c
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40010400 	.word	0x40010400

08000e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e30:	787b      	ldrb	r3, [r7, #1]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e3c:	e003      	b.n	8000e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	041a      	lsls	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f806 	bl	8000e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40010400 	.word	0x40010400

08000e80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e26c      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8087 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb4:	4b92      	ldr	r3, [pc, #584]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d00c      	beq.n	8000eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec0:	4b8f      	ldr	r3, [pc, #572]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d112      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x5e>
 8000ecc:	4b8c      	ldr	r3, [pc, #560]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eda:	4b89      	ldr	r3, [pc, #548]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d06c      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x12c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d168      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e246      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x76>
 8000efc:	4b80      	ldr	r3, [pc, #512]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a7f      	ldr	r2, [pc, #508]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e02e      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x98>
 8000f12:	4b7b      	ldr	r3, [pc, #492]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a7a      	ldr	r2, [pc, #488]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b78      	ldr	r3, [pc, #480]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a77      	ldr	r2, [pc, #476]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e01d      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0xbc>
 8000f36:	4b72      	ldr	r3, [pc, #456]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a71      	ldr	r2, [pc, #452]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6e      	ldr	r2, [pc, #440]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f50:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a6a      	ldr	r2, [pc, #424]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b68      	ldr	r3, [pc, #416]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a67      	ldr	r2, [pc, #412]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fce8 	bl	8000944 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fce4 	bl	8000944 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e1fa      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	4b5d      	ldr	r3, [pc, #372]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0xe4>
 8000f96:	e014      	b.n	8000fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fcd4 	bl	8000944 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fcd0 	bl	8000944 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e1e6      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	4b53      	ldr	r3, [pc, #332]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x10c>
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d063      	beq.n	8001096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fda:	4b49      	ldr	r3, [pc, #292]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d11c      	bne.n	8001020 <HAL_RCC_OscConfig+0x18c>
 8000fe6:	4b46      	ldr	r3, [pc, #280]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d116      	bne.n	8001020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff2:	4b43      	ldr	r3, [pc, #268]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <HAL_RCC_OscConfig+0x176>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d001      	beq.n	800100a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e1ba      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4939      	ldr	r1, [pc, #228]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	e03a      	b.n	8001096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d020      	beq.n	800106a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_RCC_OscConfig+0x270>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fc89 	bl	8000944 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff fc85 	bl	8000944 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e19b      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4927      	ldr	r1, [pc, #156]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
 8001068:	e015      	b.n	8001096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_RCC_OscConfig+0x270>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc68 	bl	8000944 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001078:	f7ff fc64 	bl	8000944 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e17a      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d03a      	beq.n	8001118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d019      	beq.n	80010de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_RCC_OscConfig+0x274>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b0:	f7ff fc48 	bl	8000944 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc44 	bl	8000944 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e15a      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 fb08 	bl	80016ec <RCC_Delay>
 80010dc:	e01c      	b.n	8001118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_RCC_OscConfig+0x274>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fc2e 	bl	8000944 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ea:	e00f      	b.n	800110c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc2a 	bl	8000944 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d908      	bls.n	800110c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e140      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	42420000 	.word	0x42420000
 8001108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	4b9e      	ldr	r3, [pc, #632]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e9      	bne.n	80010ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80a6 	beq.w	8001272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112a:	4b97      	ldr	r3, [pc, #604]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10d      	bne.n	8001152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b94      	ldr	r3, [pc, #592]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a93      	ldr	r2, [pc, #588]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b91      	ldr	r3, [pc, #580]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114e:	2301      	movs	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4b8e      	ldr	r3, [pc, #568]	; (800138c <HAL_RCC_OscConfig+0x4f8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x4f8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a8a      	ldr	r2, [pc, #552]	; (800138c <HAL_RCC_OscConfig+0x4f8>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116a:	f7ff fbeb 	bl	8000944 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001172:	f7ff fbe7 	bl	8000944 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0fd      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	4b81      	ldr	r3, [pc, #516]	; (800138c <HAL_RCC_OscConfig+0x4f8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x312>
 8001198:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a7a      	ldr	r2, [pc, #488]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6213      	str	r3, [r2, #32]
 80011a4:	e02d      	b.n	8001202 <HAL_RCC_OscConfig+0x36e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x334>
 80011ae:	4b76      	ldr	r3, [pc, #472]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a75      	ldr	r2, [pc, #468]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	4b73      	ldr	r3, [pc, #460]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a72      	ldr	r2, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	e01c      	b.n	8001202 <HAL_RCC_OscConfig+0x36e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d10c      	bne.n	80011ea <HAL_RCC_OscConfig+0x356>
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a6c      	ldr	r2, [pc, #432]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a69      	ldr	r2, [pc, #420]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0x36e>
 80011ea:	4b67      	ldr	r3, [pc, #412]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6213      	str	r3, [r2, #32]
 80011f6:	4b64      	ldr	r3, [pc, #400]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a63      	ldr	r2, [pc, #396]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	f023 0304 	bic.w	r3, r3, #4
 8001200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d015      	beq.n	8001236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff fb9b 	bl	8000944 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff fb97 	bl	8000944 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001220:	4293      	cmp	r3, r2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e0ab      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	4b57      	ldr	r3, [pc, #348]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ee      	beq.n	8001212 <HAL_RCC_OscConfig+0x37e>
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fb85 	bl	8000944 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff fb81 	bl	8000944 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e095      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ee      	bne.n	800123e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d105      	bne.n	8001272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	4b48      	ldr	r3, [pc, #288]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8081 	beq.w	800137e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127c:	4b42      	ldr	r3, [pc, #264]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d061      	beq.n	800134c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d146      	bne.n	800131e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001290:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_OscConfig+0x4fc>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fb55 	bl	8000944 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fb51 	bl	8000944 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e067      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d108      	bne.n	80012d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	492d      	ldr	r1, [pc, #180]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a19      	ldr	r1, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	430b      	orrs	r3, r1
 80012ea:	4927      	ldr	r1, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x4fc>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fb25 	bl	8000944 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fb21 	bl	8000944 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e037      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x46a>
 800131c:	e02f      	b.n	800137e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_RCC_OscConfig+0x4fc>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fb0e 	bl	8000944 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fb0a 	bl	8000944 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e020      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x498>
 800134a:	e018      	b.n	800137e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e013      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
 8001390:	42420060 	.word	0x42420060

08001394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0d0      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b6a      	ldr	r3, [pc, #424]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d910      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b67      	ldr	r3, [pc, #412]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 0207 	bic.w	r2, r3, #7
 80013be:	4965      	ldr	r1, [pc, #404]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0b8      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f0:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001412:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	494d      	ldr	r1, [pc, #308]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d040      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d115      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07f      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d109      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e073      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e06b      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f023 0203 	bic.w	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4936      	ldr	r1, [pc, #216]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff fa5e 	bl	8000944 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	f7ff fa5a 	bl	8000944 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e053      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 020c 	and.w	r2, r3, #12
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d1eb      	bne.n	800148c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d210      	bcs.n	80014e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 0207 	bic.w	r2, r3, #7
 80014ca:	4922      	ldr	r1, [pc, #136]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e032      	b.n	800154a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4916      	ldr	r1, [pc, #88]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001522:	f000 f821 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001526:	4602      	mov	r2, r0
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	490a      	ldr	r1, [pc, #40]	; (800155c <HAL_RCC_ClockConfig+0x1c8>)
 8001534:	5ccb      	ldrb	r3, [r1, r3]
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1cc>)
 800153c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_ClockConfig+0x1d0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffaa 	bl	800049c <HAL_InitTick>

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000
 8001558:	40021000 	.word	0x40021000
 800155c:	08006434 	.word	0x08006434
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	b490      	push	{r4, r7}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001570:	1d3c      	adds	r4, r7, #4
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001578:	f240 2301 	movw	r3, #513	; 0x201
 800157c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d002      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x40>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d003      	beq.n	80015ae <HAL_RCC_GetSysClockFreq+0x46>
 80015a6:	e02d      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015aa:	623b      	str	r3, [r7, #32]
      break;
 80015ac:	e02d      	b.n	800160a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ba:	4413      	add	r3, r2
 80015bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	0c5b      	lsrs	r3, r3, #17
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015da:	4413      	add	r3, r2
 80015dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e6:	fb02 f203 	mul.w	r2, r2, r3
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	e004      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	623b      	str	r3, [r7, #32]
      break;
 8001602:	e002      	b.n	800160a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001606:	623b      	str	r3, [r7, #32]
      break;
 8001608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800160a:	6a3b      	ldr	r3, [r7, #32]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bc90      	pop	{r4, r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	08006360 	.word	0x08006360
 800161c:	40021000 	.word	0x40021000
 8001620:	007a1200 	.word	0x007a1200
 8001624:	003d0900 	.word	0x003d0900

08001628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_RCC_GetHCLKFreq+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000000 	.word	0x20000000

0800163c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001640:	f7ff fff2 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	4903      	ldr	r1, [pc, #12]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001658:	4618      	mov	r0, r3
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	08006444 	.word	0x08006444

08001664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001668:	f7ff ffde 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 800166c:	4602      	mov	r2, r0
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0adb      	lsrs	r3, r3, #11
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	08006444 	.word	0x08006444

0800168c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	220f      	movs	r2, #15
 800169a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_RCC_GetClockConfig+0x58>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0203 	and.w	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_RCC_GetClockConfig+0x58>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_GetClockConfig+0x58>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_RCC_GetClockConfig+0x58>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_GetClockConfig+0x5c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0207 	and.w	r2, r3, #7
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40022000 	.word	0x40022000

080016ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <RCC_Delay+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <RCC_Delay+0x38>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001708:	bf00      	nop
  }
  while (Delay --);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <RCC_Delay+0x1c>
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e041      	b.n	80017be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f839 	bl	80017c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f000 f9b4 	bl	8001ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d001      	beq.n	80017f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e03a      	b.n	8001866 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_TIM_Base_Start_IT+0x98>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00e      	beq.n	8001830 <HAL_TIM_Base_Start_IT+0x58>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181a:	d009      	beq.n	8001830 <HAL_TIM_Base_Start_IT+0x58>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <HAL_TIM_Base_Start_IT+0x9c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d004      	beq.n	8001830 <HAL_TIM_Base_Start_IT+0x58>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_TIM_Base_Start_IT+0xa0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d111      	bne.n	8001854 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b06      	cmp	r3, #6
 8001840:	d010      	beq.n	8001864 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001852:	e007      	b.n	8001864 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40012c00 	.word	0x40012c00
 8001874:	40000400 	.word	0x40000400
 8001878:	40000800 	.word	0x40000800

0800187c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d122      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b02      	cmp	r3, #2
 800189e:	d11b      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0202 	mvn.w	r2, #2
 80018a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f8ed 	bl	8001a9e <HAL_TIM_IC_CaptureCallback>
 80018c4:	e005      	b.n	80018d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f8e0 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f8ef 	bl	8001ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d122      	bne.n	800192c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11b      	bne.n	800192c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0204 	mvn.w	r2, #4
 80018fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2202      	movs	r2, #2
 8001902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8c3 	bl	8001a9e <HAL_TIM_IC_CaptureCallback>
 8001918:	e005      	b.n	8001926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f8b6 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f8c5 	bl	8001ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b08      	cmp	r3, #8
 8001938:	d122      	bne.n	8001980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b08      	cmp	r3, #8
 8001946:	d11b      	bne.n	8001980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0208 	mvn.w	r2, #8
 8001950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f899 	bl	8001a9e <HAL_TIM_IC_CaptureCallback>
 800196c:	e005      	b.n	800197a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f88c 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f89b 	bl	8001ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b10      	cmp	r3, #16
 800198c:	d122      	bne.n	80019d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b10      	cmp	r3, #16
 800199a:	d11b      	bne.n	80019d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0210 	mvn.w	r2, #16
 80019a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2208      	movs	r2, #8
 80019aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f86f 	bl	8001a9e <HAL_TIM_IC_CaptureCallback>
 80019c0:	e005      	b.n	80019ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f862 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f871 	bl	8001ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10e      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0201 	mvn.w	r2, #1
 80019f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fcfe 	bl	80003fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	2b80      	cmp	r3, #128	; 0x80
 8001a0c:	d10e      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d107      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f8bf 	bl	8001baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b40      	cmp	r3, #64	; 0x40
 8001a38:	d10e      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	2b40      	cmp	r3, #64	; 0x40
 8001a46:	d107      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f835 	bl	8001ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d10e      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d107      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0220 	mvn.w	r2, #32
 8001a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f88a 	bl	8001b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <TIM_Base_SetConfig+0xb8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00b      	beq.n	8001b04 <TIM_Base_SetConfig+0x30>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d007      	beq.n	8001b04 <TIM_Base_SetConfig+0x30>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <TIM_Base_SetConfig+0xbc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d003      	beq.n	8001b04 <TIM_Base_SetConfig+0x30>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <TIM_Base_SetConfig+0xc0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d108      	bne.n	8001b16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <TIM_Base_SetConfig+0xb8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00b      	beq.n	8001b36 <TIM_Base_SetConfig+0x62>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b24:	d007      	beq.n	8001b36 <TIM_Base_SetConfig+0x62>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <TIM_Base_SetConfig+0xbc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d003      	beq.n	8001b36 <TIM_Base_SetConfig+0x62>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <TIM_Base_SetConfig+0xc0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d108      	bne.n	8001b48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <TIM_Base_SetConfig+0xb8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d103      	bne.n	8001b7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	615a      	str	r2, [r3, #20]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40000800 	.word	0x40000800

08001b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e03f      	b.n	8001c4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fdc0 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f905 	bl	8001e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b08a      	sub	sp, #40	; 0x28
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d17c      	bne.n	8001d70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_UART_Transmit+0x2c>
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e075      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_UART_Transmit+0x3e>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e06e      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2221      	movs	r2, #33	; 0x21
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001caa:	f7fe fe4b 	bl	8000944 <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_UART_Transmit+0x82>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	e003      	b.n	8001ce0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ce8:	e02a      	b.n	8001d40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f840 	bl	8001d7a <UART_WaitOnFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e036      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e007      	b.n	8001d32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1cf      	bne.n	8001cea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2200      	movs	r2, #0
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 f810 	bl	8001d7a <UART_WaitOnFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e006      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d8a:	e02c      	b.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d92:	d028      	beq.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <UART_WaitOnFlagUntilTimeout+0x30>
 8001d9a:	f7fe fdd3 	bl	8000944 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d21d      	bcs.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001db8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e00f      	b.n	8001e06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4013      	ands	r3, r2
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d0c3      	beq.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e4a:	f023 030c 	bic.w	r3, r3, #12
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <UART_SetConfig+0x114>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e78:	f7ff fbf4 	bl	8001664 <HAL_RCC_GetPCLK2Freq>
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	e002      	b.n	8001e86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e80:	f7ff fbdc 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 8001e84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <UART_SetConfig+0x118>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	0119      	lsls	r1, r3, #4
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <UART_SetConfig+0x118>)
 8001ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	fb00 f303 	mul.w	r3, r0, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	; 0x32
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <UART_SetConfig+0x118>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001edc:	4419      	add	r1, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009a      	lsls	r2, r3, #2
 8001ee8:	441a      	add	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <UART_SetConfig+0x118>)
 8001ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2064      	movs	r0, #100	; 0x64
 8001efe:	fb00 f303 	mul.w	r3, r0, r3
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	3332      	adds	r3, #50	; 0x32
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <UART_SetConfig+0x118>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	440a      	add	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40013800 	.word	0x40013800
 8001f28:	51eb851f 	.word	0x51eb851f

08001f2c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f32:	f3ef 8305 	mrs	r3, IPSR
 8001f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f42:	607b      	str	r3, [r7, #4]
  return(result);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <osKernelInitialize+0x32>
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <osKernelInitialize+0x60>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d109      	bne.n	8001f66 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f52:	f3ef 8311 	mrs	r3, BASEPRI
 8001f56:	603b      	str	r3, [r7, #0]
  return(result);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001f5e:	f06f 0305 	mvn.w	r3, #5
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e00c      	b.n	8001f80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <osKernelInitialize+0x60>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <osKernelInitialize+0x60>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e002      	b.n	8001f80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f80:	68fb      	ldr	r3, [r7, #12]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000094 	.word	0x20000094

08001f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f96:	f3ef 8305 	mrs	r3, IPSR
 8001f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <osKernelStart+0x32>
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <osKernelStart+0x64>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d109      	bne.n	8001fca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8001fba:	603b      	str	r3, [r7, #0]
  return(result);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <osKernelStart+0x3a>
    stat = osErrorISR;
 8001fc2:	f06f 0305 	mvn.w	r3, #5
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e00e      	b.n	8001fe8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <osKernelStart+0x64>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <osKernelStart+0x64>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001fd8:	f001 feac 	bl	8003d34 <vTaskStartScheduler>
      stat = osOK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e002      	b.n	8001fe8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000094 	.word	0x20000094

08001ff8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b092      	sub	sp, #72	; 0x48
 8001ffc:	af04      	add	r7, sp, #16
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002008:	f3ef 8305 	mrs	r3, IPSR
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8094 	bne.w	800213e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002016:	f3ef 8310 	mrs	r3, PRIMASK
 800201a:	623b      	str	r3, [r7, #32]
  return(result);
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 808d 	bne.w	800213e <osThreadNew+0x146>
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <osThreadNew+0x150>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d106      	bne.n	800203a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800202c:	f3ef 8311 	mrs	r3, BASEPRI
 8002030:	61fb      	str	r3, [r7, #28]
  return(result);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 8082 	bne.w	800213e <osThreadNew+0x146>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d07e      	beq.n	800213e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002044:	2318      	movs	r3, #24
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002048:	2300      	movs	r3, #0
 800204a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800204c:	f107 031b 	add.w	r3, r7, #27
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d045      	beq.n	80020ea <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <osThreadNew+0x74>
        name = attr->name;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <osThreadNew+0x9a>
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	2b38      	cmp	r3, #56	; 0x38
 8002084:	d805      	bhi.n	8002092 <osThreadNew+0x9a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <osThreadNew+0x9e>
        return (NULL);
 8002092:	2300      	movs	r3, #0
 8002094:	e054      	b.n	8002140 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <osThreadNew+0xd4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b5b      	cmp	r3, #91	; 0x5b
 80020b4:	d90a      	bls.n	80020cc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <osThreadNew+0xd4>
        mem = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ca:	e010      	b.n	80020ee <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10c      	bne.n	80020ee <osThreadNew+0xf6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d108      	bne.n	80020ee <osThreadNew+0xf6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d104      	bne.n	80020ee <osThreadNew+0xf6>
          mem = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e8:	e001      	b.n	80020ee <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d110      	bne.n	8002116 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020fc:	9202      	str	r2, [sp, #8]
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002108:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f001 fc46 	bl	800399c <xTaskCreateStatic>
 8002110:	4603      	mov	r3, r0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e013      	b.n	800213e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d110      	bne.n	800213e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	b29a      	uxth	r2, r3
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f001 fc90 	bl	8003a54 <xTaskCreate>
 8002134:	4603      	mov	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <osThreadNew+0x146>
          hTask = NULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800213e:	697b      	ldr	r3, [r7, #20]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000094 	.word	0x20000094

0800214c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002154:	f3ef 8305 	mrs	r3, IPSR
 8002158:	613b      	str	r3, [r7, #16]
  return(result);
 800215a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10f      	bne.n	8002180 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002160:	f3ef 8310 	mrs	r3, PRIMASK
 8002164:	60fb      	str	r3, [r7, #12]
  return(result);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <osDelay+0x34>
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <osDelay+0x58>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d109      	bne.n	8002188 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002174:	f3ef 8311 	mrs	r3, BASEPRI
 8002178:	60bb      	str	r3, [r7, #8]
  return(result);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <osDelay+0x3c>
    stat = osErrorISR;
 8002180:	f06f 0305 	mvn.w	r3, #5
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e007      	b.n	8002198 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f001 fd9a 	bl	8003ccc <vTaskDelay>
    }
  }

  return (stat);
 8002198:	697b      	ldr	r3, [r7, #20]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000094 	.word	0x20000094

080021a8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f002 ffa3 	bl	80050fc <pvTimerGetTimerID>
 80021b6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <TimerCallback+0x22>
    callb->func (callb->arg);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	6852      	ldr	r2, [r2, #4]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4798      	blx	r3
  }
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	; 0x38
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	460b      	mov	r3, r1
 80021e2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e8:	f3ef 8305 	mrs	r3, IPSR
 80021ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80021ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d16a      	bne.n	80022ca <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f4:	f3ef 8310 	mrs	r3, PRIMASK
 80021f8:	617b      	str	r3, [r7, #20]
  return(result);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d164      	bne.n	80022ca <osTimerNew+0xf6>
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <osTimerNew+0x100>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d105      	bne.n	8002214 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002208:	f3ef 8311 	mrs	r3, BASEPRI
 800220c:	613b      	str	r3, [r7, #16]
  return(result);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d15a      	bne.n	80022ca <osTimerNew+0xf6>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d057      	beq.n	80022ca <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800221a:	2008      	movs	r0, #8
 800221c:	f003 f97e 	bl	800551c <pvPortMalloc>
 8002220:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d050      	beq.n	80022ca <osTimerNew+0xf6>
      callb->func = func;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <osTimerNew+0x6c>
        reload = pdFALSE;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e001      	b.n	8002244 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8002240:	2301      	movs	r3, #1
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	623b      	str	r3, [r7, #32]
      name = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01c      	beq.n	800228e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <osTimerNew+0x8e>
          name = attr->name;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <osTimerNew+0xa4>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b2f      	cmp	r3, #47	; 0x2f
 8002270:	d902      	bls.n	8002278 <osTimerNew+0xa4>
          mem = 1;
 8002272:	2301      	movs	r3, #1
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	e00c      	b.n	8002292 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d108      	bne.n	8002292 <osTimerNew+0xbe>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <osTimerNew+0xbe>
            mem = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	e001      	b.n	8002292 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10c      	bne.n	80022b2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <osTimerNew+0x104>)
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	2101      	movs	r1, #1
 80022a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022aa:	f002 fbee 	bl	8004a8a <xTimerCreateStatic>
 80022ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80022b0:	e00b      	b.n	80022ca <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d108      	bne.n	80022ca <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <osTimerNew+0x104>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	2101      	movs	r1, #1
 80022c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022c4:	f002 fbc0 	bl	8004a48 <xTimerCreate>
 80022c8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3730      	adds	r7, #48	; 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000094 	.word	0x20000094
 80022d8:	080021a9 	.word	0x080021a9

080022dc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022e8:	f3ef 8305 	mrs	r3, IPSR
 80022ec:	613b      	str	r3, [r7, #16]
  return(result);
 80022ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 8085 	bne.w	8002400 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f6:	f3ef 8310 	mrs	r3, PRIMASK
 80022fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d17e      	bne.n	8002400 <osMutexNew+0x124>
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <osMutexNew+0x130>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d105      	bne.n	8002316 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800230a:	f3ef 8311 	mrs	r3, BASEPRI
 800230e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d174      	bne.n	8002400 <osMutexNew+0x124>
    if (attr != NULL) {
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <osMutexNew+0x48>
      type = attr->attr_bits;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	e001      	b.n	8002328 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <osMutexNew+0x5c>
      rmtx = 1U;
 8002332:	2301      	movs	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e001      	b.n	800233c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d15c      	bne.n	8002400 <osMutexNew+0x124>
      mem = -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <osMutexNew+0x8c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b4f      	cmp	r3, #79	; 0x4f
 8002360:	d902      	bls.n	8002368 <osMutexNew+0x8c>
          mem = 1;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	e00c      	b.n	8002382 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d108      	bne.n	8002382 <osMutexNew+0xa6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <osMutexNew+0xa6>
            mem = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	e001      	b.n	8002382 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d112      	bne.n	80023ae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4619      	mov	r1, r3
 8002394:	2004      	movs	r0, #4
 8002396:	f000 fc31 	bl	8002bfc <xQueueCreateMutexStatic>
 800239a:	6278      	str	r0, [r7, #36]	; 0x24
 800239c:	e016      	b.n	80023cc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4619      	mov	r1, r3
 80023a4:	2001      	movs	r0, #1
 80023a6:	f000 fc29 	bl	8002bfc <xQueueCreateMutexStatic>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24
 80023ac:	e00e      	b.n	80023cc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80023ba:	2004      	movs	r0, #4
 80023bc:	f000 fc06 	bl	8002bcc <xQueueCreateMutex>
 80023c0:	6278      	str	r0, [r7, #36]	; 0x24
 80023c2:	e003      	b.n	80023cc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80023c4:	2001      	movs	r0, #1
 80023c6:	f000 fc01 	bl	8002bcc <xQueueCreateMutex>
 80023ca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <osMutexNew+0x110>
        if (attr != NULL) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <osMutexNew+0x104>
          name = attr->name;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e001      	b.n	80023e4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80023e4:	6979      	ldr	r1, [r7, #20]
 80023e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023e8:	f001 fa52 	bl	8003890 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <osMutexNew+0x124>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002402:	4618      	mov	r0, r3
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000094 	.word	0x20000094

08002410 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800242e:	f3ef 8305 	mrs	r3, IPSR
 8002432:	613b      	str	r3, [r7, #16]
  return(result);
 8002434:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243a:	f3ef 8310 	mrs	r3, PRIMASK
 800243e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <osMutexAcquire+0x4a>
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <osMutexAcquire+0xb8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d109      	bne.n	8002462 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800244e:	f3ef 8311 	mrs	r3, BASEPRI
 8002452:	60bb      	str	r3, [r7, #8]
  return(result);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800245a:	f06f 0305 	mvn.w	r3, #5
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	e02c      	b.n	80024bc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d103      	bne.n	8002470 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8002468:	f06f 0303 	mvn.w	r3, #3
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e025      	b.n	80024bc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d011      	beq.n	800249a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	69b8      	ldr	r0, [r7, #24]
 800247a:	f000 fc0e 	bl	8002c9a <xQueueTakeMutexRecursive>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d01b      	beq.n	80024bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800248a:	f06f 0301 	mvn.w	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	e014      	b.n	80024bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002492:	f06f 0302 	mvn.w	r3, #2
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	e010      	b.n	80024bc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	69b8      	ldr	r0, [r7, #24]
 800249e:	f000 ffa1 	bl	80033e4 <xQueueSemaphoreTake>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d009      	beq.n	80024bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80024ae:	f06f 0301 	mvn.w	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	e002      	b.n	80024bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80024b6:	f06f 0302 	mvn.w	r3, #2
 80024ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80024bc:	69fb      	ldr	r3, [r7, #28]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000094 	.word	0x20000094

080024cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e8:	f3ef 8305 	mrs	r3, IPSR
 80024ec:	613b      	str	r3, [r7, #16]
  return(result);
 80024ee:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f4:	f3ef 8310 	mrs	r3, PRIMASK
 80024f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <osMutexRelease+0x48>
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <osMutexRelease+0x9c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d109      	bne.n	800251c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002508:	f3ef 8311 	mrs	r3, BASEPRI
 800250c:	60bb      	str	r3, [r7, #8]
  return(result);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <osMutexRelease+0x50>
    stat = osErrorISR;
 8002514:	f06f 0305 	mvn.w	r3, #5
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e01f      	b.n	800255c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8002522:	f06f 0303 	mvn.w	r3, #3
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	e018      	b.n	800255c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002530:	69b8      	ldr	r0, [r7, #24]
 8002532:	f000 fb7e 	bl	8002c32 <xQueueGiveMutexRecursive>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d00f      	beq.n	800255c <osMutexRelease+0x90>
        stat = osErrorResource;
 800253c:	f06f 0302 	mvn.w	r3, #2
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e00b      	b.n	800255c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002544:	2300      	movs	r3, #0
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	69b8      	ldr	r0, [r7, #24]
 800254c:	f000 fc46 	bl	8002ddc <xQueueGenericSend>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d002      	beq.n	800255c <osMutexRelease+0x90>
        stat = osErrorResource;
 8002556:	f06f 0302 	mvn.w	r3, #2
 800255a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800255c:	69fb      	ldr	r3, [r7, #28]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000094 	.word	0x20000094

0800256c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800257c:	f3ef 8305 	mrs	r3, IPSR
 8002580:	61bb      	str	r3, [r7, #24]
  return(result);
 8002582:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 8086 	bne.w	8002696 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800258a:	f3ef 8310 	mrs	r3, PRIMASK
 800258e:	617b      	str	r3, [r7, #20]
  return(result);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d17f      	bne.n	8002696 <osSemaphoreNew+0x12a>
 8002596:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <osSemaphoreNew+0x134>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d105      	bne.n	80025aa <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800259e:	f3ef 8311 	mrs	r3, BASEPRI
 80025a2:	613b      	str	r3, [r7, #16]
  return(result);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d175      	bne.n	8002696 <osSemaphoreNew+0x12a>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d072      	beq.n	8002696 <osSemaphoreNew+0x12a>
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d86e      	bhi.n	8002696 <osSemaphoreNew+0x12a>
    mem = -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <osSemaphoreNew+0x6e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b4f      	cmp	r3, #79	; 0x4f
 80025d2:	d902      	bls.n	80025da <osSemaphoreNew+0x6e>
        mem = 1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	e00c      	b.n	80025f4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <osSemaphoreNew+0x88>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <osSemaphoreNew+0x88>
          mem = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	e001      	b.n	80025f4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d04c      	beq.n	8002696 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d128      	bne.n	8002654 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10a      	bne.n	800261e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2203      	movs	r2, #3
 800260e:	9200      	str	r2, [sp, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2001      	movs	r0, #1
 8002616:	f000 f9e7 	bl	80029e8 <xQueueGenericCreateStatic>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24
 800261c:	e005      	b.n	800262a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800261e:	2203      	movs	r2, #3
 8002620:	2100      	movs	r1, #0
 8002622:	2001      	movs	r0, #1
 8002624:	f000 fa57 	bl	8002ad6 <xQueueGenericCreate>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	2b00      	cmp	r3, #0
 800262e:	d022      	beq.n	8002676 <osSemaphoreNew+0x10a>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01f      	beq.n	8002676 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002636:	2300      	movs	r3, #0
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800263e:	f000 fbcd 	bl	8002ddc <xQueueGenericSend>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d016      	beq.n	8002676 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800264a:	f000 ffd7 	bl	80035fc <vQueueDelete>
            hSemaphore = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e010      	b.n	8002676 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	461a      	mov	r2, r3
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fb4f 	bl	8002d06 <xQueueCreateCountingSemaphoreStatic>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24
 800266a:	e004      	b.n	8002676 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fb80 	bl	8002d74 <xQueueCreateCountingSemaphore>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00c      	beq.n	8002696 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <osSemaphoreNew+0x11e>
          name = attr->name;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	e001      	b.n	800268e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800268e:	69f9      	ldr	r1, [r7, #28]
 8002690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002692:	f001 f8fd 	bl	8003890 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000094 	.word	0x20000094

080026a4 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80026ba:	f06f 0303 	mvn.w	r3, #3
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	e03e      	b.n	8002740 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026c2:	f3ef 8305 	mrs	r3, IPSR
 80026c6:	617b      	str	r3, [r7, #20]
  return(result);
 80026c8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ce:	f3ef 8310 	mrs	r3, PRIMASK
 80026d2:	613b      	str	r3, [r7, #16]
  return(result);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <osSemaphoreRelease+0x4a>
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <osSemaphoreRelease+0xa8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d120      	bne.n	8002724 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026e2:	f3ef 8311 	mrs	r3, BASEPRI
 80026e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	69b8      	ldr	r0, [r7, #24]
 80026fa:	f000 fd05 	bl	8003108 <xQueueGiveFromISR>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d003      	beq.n	800270c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8002704:	f06f 0302 	mvn.w	r3, #2
 8002708:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800270a:	e018      	b.n	800273e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <osSemaphoreRelease+0x9a>
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <osSemaphoreRelease+0xac>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002722:	e00c      	b.n	800273e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002724:	2300      	movs	r3, #0
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	69b8      	ldr	r0, [r7, #24]
 800272c:	f000 fb56 	bl	8002ddc <xQueueGenericSend>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d004      	beq.n	8002740 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002736:	f06f 0302 	mvn.w	r3, #2
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e000      	b.n	8002740 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800273e:	bf00      	nop
    }
  }

  return (stat);
 8002740:	69fb      	ldr	r3, [r7, #28]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000094 	.word	0x20000094
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a06      	ldr	r2, [pc, #24]	; (800277c <vApplicationGetIdleTaskMemory+0x28>)
 8002764:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <vApplicationGetIdleTaskMemory+0x2c>)
 800276a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	601a      	str	r2, [r3, #0]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	20000098 	.word	0x20000098
 8002780:	200000f4 	.word	0x200000f4

08002784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <vApplicationGetTimerTaskMemory+0x30>)
 800279a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a2:	601a      	str	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	200002f4 	.word	0x200002f4
 80027b4:	20000350 	.word	0x20000350

080027b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0208 	add.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0208 	add.w	r2, r3, #8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0208 	add.w	r2, r3, #8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d103      	bne.n	8002874 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e00c      	b.n	800288e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3308      	adds	r3, #8
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	e002      	b.n	8002882 <vListInsert+0x2e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	429a      	cmp	r2, r3
 800288c:	d2f6      	bcs.n	800287c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6892      	ldr	r2, [r2, #8]
 80028da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6852      	ldr	r2, [r2, #4]
 80028e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d103      	bne.n	80028f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
	...

08002918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002942:	f002 fceb 	bl	800531c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	441a      	add	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	3b01      	subs	r3, #1
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	441a      	add	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	22ff      	movs	r2, #255	; 0xff
 8002986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d114      	bne.n	80029c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01a      	beq.n	80029d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3310      	adds	r3, #16
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fc4f 	bl	8004248 <xTaskRemoveFromEventList>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <xQueueGenericReset+0xcc>)
 80029b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	e009      	b.n	80029d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3310      	adds	r3, #16
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fef6 	bl	80027b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3324      	adds	r3, #36	; 0x24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fef1 	bl	80027b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029d6:	f002 fcd1 	bl	800537c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <xQueueGenericCreateStatic+0x52>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <xQueueGenericCreateStatic+0x56>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <xQueueGenericCreateStatic+0x58>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	623b      	str	r3, [r7, #32]
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xQueueGenericCreateStatic+0x7e>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueGenericCreateStatic+0x82>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueGenericCreateStatic+0x84>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61fb      	str	r3, [r7, #28]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a86:	2350      	movs	r3, #80	; 0x50
 8002a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b50      	cmp	r3, #80	; 0x50
 8002a8e:	d00a      	beq.n	8002aa6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	61bb      	str	r3, [r7, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f843 	bl	8002b52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3730      	adds	r7, #48	; 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b08a      	sub	sp, #40	; 0x28
 8002ada:	af02      	add	r7, sp, #8
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	613b      	str	r3, [r7, #16]
}
 8002afc:	bf00      	nop
 8002afe:	e7fe      	b.n	8002afe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e004      	b.n	8002b16 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3350      	adds	r3, #80	; 0x50
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fcfe 	bl	800551c <pvPortMalloc>
 8002b20:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00f      	beq.n	8002b48 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	3350      	adds	r3, #80	; 0x50
 8002b2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b36:	79fa      	ldrb	r2, [r7, #7]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f805 	bl	8002b52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b48:	69bb      	ldr	r3, [r7, #24]
	}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e002      	b.n	8002b74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b80:	2101      	movs	r1, #1
 8002b82:	69b8      	ldr	r0, [r7, #24]
 8002b84:	f7ff fec8 	bl	8002918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f90c 	bl	8002ddc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	461a      	mov	r2, r3
 8002be2:	6939      	ldr	r1, [r7, #16]
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7ff ff76 	bl	8002ad6 <xQueueGenericCreate>
 8002bea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ffd3 	bl	8002b98 <prvInitialiseMutex>

		return pxNewQueue;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
	}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	6939      	ldr	r1, [r7, #16]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff fee4 	bl	80029e8 <xQueueGenericCreateStatic>
 8002c20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ffb8 	bl	8002b98 <prvInitialiseMutex>

		return pxNewQueue;
 8002c28:	68fb      	ldr	r3, [r7, #12]
	}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	60fb      	str	r3, [r7, #12]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	685c      	ldr	r4, [r3, #4]
 8002c5e:	f001 fcb5 	bl	80045cc <xTaskGetCurrentTaskHandle>
 8002c62:	4603      	mov	r3, r0
 8002c64:	429c      	cmp	r4, r3
 8002c66:	d111      	bne.n	8002c8c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	1e5a      	subs	r2, r3, #1
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	6938      	ldr	r0, [r7, #16]
 8002c82:	f000 f8ab 	bl	8002ddc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e001      	b.n	8002c90 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002c90:	697b      	ldr	r3, [r7, #20]
	}
 8002c92:	4618      	mov	r0, r3
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}

08002c9a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002c9a:	b590      	push	{r4, r7, lr}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	60fb      	str	r3, [r7, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	e7fe      	b.n	8002cc2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	685c      	ldr	r4, [r3, #4]
 8002cc8:	f001 fc80 	bl	80045cc <xTaskGetCurrentTaskHandle>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	429c      	cmp	r4, r3
 8002cd0:	d107      	bne.n	8002ce2 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e00c      	b.n	8002cfc <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	6938      	ldr	r0, [r7, #16]
 8002ce6:	f000 fb7d 	bl	80033e4 <xQueueSemaphoreTake>
 8002cea:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002cfc:	697b      	ldr	r3, [r7, #20]
	}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}

08002d06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b08a      	sub	sp, #40	; 0x28
 8002d0a:	af02      	add	r7, sp, #8
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61bb      	str	r3, [r7, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d90a      	bls.n	8002d4c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	617b      	str	r3, [r7, #20]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff fe46 	bl	80029e8 <xQueueGenericCreateStatic>
 8002d5c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
	}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	613b      	str	r3, [r7, #16]
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90a      	bls.n	8002db8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	60fb      	str	r3, [r7, #12]
}
 8002db4:	bf00      	nop
 8002db6:	e7fe      	b.n	8002db6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002db8:	2202      	movs	r2, #2
 8002dba:	2100      	movs	r1, #0
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fe8a 	bl	8002ad6 <xQueueGenericCreate>
 8002dc2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002dd0:	697b      	ldr	r3, [r7, #20]
	}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	; 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGenericSend+0x32>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <xQueueGenericSend+0x40>
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xQueueGenericSend+0x44>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <xQueueGenericSend+0x46>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <xQueueGenericSend+0x60>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d103      	bne.n	8002e4a <xQueueGenericSend+0x6e>
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <xQueueGenericSend+0x72>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xQueueGenericSend+0x74>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	623b      	str	r3, [r7, #32]
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e6a:	f001 fbbd 	bl	80045e8 <xTaskGetSchedulerState>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <xQueueGenericSend+0x9e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueGenericSend+0xa2>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueGenericSend+0xa4>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueGenericSend+0xbe>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	61fb      	str	r3, [r7, #28]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e9a:	f002 fa3f 	bl	800531c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <xQueueGenericSend+0xd4>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d129      	bne.n	8002f04 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb6:	f000 fbdb 	bl	8003670 <prvCopyDataToQueue>
 8002eba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	3324      	adds	r3, #36	; 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f9bd 	bl	8004248 <xTaskRemoveFromEventList>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <xQueueGenericSend+0x1f8>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	e00a      	b.n	8002efc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <xQueueGenericSend+0x1f8>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002efc:	f002 fa3e 	bl	800537c <vPortExitCritical>
				return pdPASS;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e063      	b.n	8002fcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f0a:	f002 fa37 	bl	800537c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e05c      	b.n	8002fcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 f9f7 	bl	8004310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f26:	f002 fa29 	bl	800537c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f2a:	f000 ff69 	bl	8003e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f2e:	f002 f9f5 	bl	800531c <vPortEnterCritical>
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d103      	bne.n	8002f48 <xQueueGenericSend+0x16c>
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSend+0x182>
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f5e:	f002 fa0d 	bl	800537c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f62:	1d3a      	adds	r2, r7, #4
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 f9e6 	bl	800433c <xTaskCheckForTimeOut>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d124      	bne.n	8002fc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f78:	f000 fc72 	bl	8003860 <prvIsQueueFull>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	3310      	adds	r3, #16
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f90c 	bl	80041a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f92:	f000 fbfd 	bl	8003790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f96:	f000 ff41 	bl	8003e1c <xTaskResumeAll>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af7c 	bne.w	8002e9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <xQueueGenericSend+0x1f8>)
 8002fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	e772      	b.n	8002e9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb6:	f000 fbeb 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fba:	f000 ff2f 	bl	8003e1c <xTaskResumeAll>
 8002fbe:	e76c      	b.n	8002e9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc2:	f000 fbe5 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fc6:	f000 ff29 	bl	8003e1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fca:	2300      	movs	r3, #0
		}
	}
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3738      	adds	r7, #56	; 0x38
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	; 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <xQueueGenericSendFromISR+0x3c>
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <xQueueGenericSendFromISR+0x40>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <xQueueGenericSendFromISR+0x42>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	623b      	str	r3, [r7, #32]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d103      	bne.n	8003042 <xQueueGenericSendFromISR+0x6a>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <xQueueGenericSendFromISR+0x6e>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueGenericSendFromISR+0x70>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61fb      	str	r3, [r7, #28]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003062:	f002 fa1d 	bl	80054a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003066:	f3ef 8211 	mrs	r2, BASEPRI
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	61ba      	str	r2, [r7, #24]
 800307c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800307e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <xQueueGenericSendFromISR+0xbc>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d12c      	bne.n	80030ee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800309a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a4:	f000 fae4 	bl	8003670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d112      	bne.n	80030d8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	3324      	adds	r3, #36	; 0x24
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 f8c2 	bl	8004248 <xTaskRemoveFromEventList>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e007      	b.n	80030e8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030dc:	3301      	adds	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	b25a      	sxtb	r2, r3
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030e8:	2301      	movs	r3, #1
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80030ec:	e001      	b.n	80030f2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003100:	4618      	mov	r0, r3
 8003102:	3738      	adds	r7, #56	; 0x38
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08e      	sub	sp, #56	; 0x38
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	623b      	str	r3, [r7, #32]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <xQueueGiveFromISR+0x48>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	61fb      	str	r3, [r7, #28]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <xQueueGiveFromISR+0x58>
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <xQueueGiveFromISR+0x5c>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <xQueueGiveFromISR+0x5e>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <xQueueGiveFromISR+0x78>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61bb      	str	r3, [r7, #24]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003180:	f002 f98e 	bl	80054a0 <vPortValidateInterruptPriority>
	__asm volatile
 8003184:	f3ef 8211 	mrs	r2, BASEPRI
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	617a      	str	r2, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800319c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d22b      	bcs.n	8003208 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d112      	bne.n	80031f2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d016      	beq.n	8003202 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	3324      	adds	r3, #36	; 0x24
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f835 	bl	8004248 <xTaskRemoveFromEventList>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e007      	b.n	8003202 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031f6:	3301      	adds	r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	b25a      	sxtb	r2, r3
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003202:	2301      	movs	r3, #1
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	e001      	b.n	800320c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003208:	2300      	movs	r3, #0
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f383 8811 	msr	BASEPRI, r3
}
 8003216:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800321a:	4618      	mov	r0, r3
 800321c:	3738      	adds	r7, #56	; 0x38
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <xQueueReceive+0x30>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	623b      	str	r3, [r7, #32]
}
 8003250:	bf00      	nop
 8003252:	e7fe      	b.n	8003252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <xQueueReceive+0x3e>
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueReceive+0x42>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueReceive+0x44>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueReceive+0x5e>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003282:	f001 f9b1 	bl	80045e8 <xTaskGetSchedulerState>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <xQueueReceive+0x6e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <xQueueReceive+0x72>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <xQueueReceive+0x74>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xQueueReceive+0x8e>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	61bb      	str	r3, [r7, #24]
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032b2:	f002 f833 	bl	800531c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01f      	beq.n	8003302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c6:	f000 fa3d 	bl	8003744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00f      	beq.n	80032fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	3310      	adds	r3, #16
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffb2 	bl	8004248 <xTaskRemoveFromEventList>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <xQueueReceive+0x1bc>)
 80032ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032fa:	f002 f83f 	bl	800537c <vPortExitCritical>
				return pdPASS;
 80032fe:	2301      	movs	r3, #1
 8003300:	e069      	b.n	80033d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003308:	f002 f838 	bl	800537c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800330c:	2300      	movs	r3, #0
 800330e:	e062      	b.n	80033d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fff8 	bl	8004310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003320:	2301      	movs	r3, #1
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003324:	f002 f82a 	bl	800537c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003328:	f000 fd6a 	bl	8003e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800332c:	f001 fff6 	bl	800531c <vPortEnterCritical>
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d103      	bne.n	8003346 <xQueueReceive+0x122>
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800334c:	b25b      	sxtb	r3, r3
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d103      	bne.n	800335c <xQueueReceive+0x138>
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335c:	f002 f80e 	bl	800537c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003360:	1d3a      	adds	r2, r7, #4
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ffe7 	bl	800433c <xTaskCheckForTimeOut>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d123      	bne.n	80033bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003376:	f000 fa5d 	bl	8003834 <prvIsQueueEmpty>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d017      	beq.n	80033b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	3324      	adds	r3, #36	; 0x24
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f000 ff0d 	bl	80041a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800338e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003390:	f000 f9fe 	bl	8003790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003394:	f000 fd42 	bl	8003e1c <xTaskResumeAll>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d189      	bne.n	80032b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <xQueueReceive+0x1bc>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	e780      	b.n	80032b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b2:	f000 f9ed 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033b6:	f000 fd31 	bl	8003e1c <xTaskResumeAll>
 80033ba:	e77a      	b.n	80032b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033be:	f000 f9e7 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033c2:	f000 fd2b 	bl	8003e1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c8:	f000 fa34 	bl	8003834 <prvIsQueueEmpty>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f43f af6f 	beq.w	80032b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3730      	adds	r7, #48	; 0x30
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	e000ed04 	.word	0xe000ed04

080033e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08e      	sub	sp, #56	; 0x38
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	623b      	str	r3, [r7, #32]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	61fb      	str	r3, [r7, #28]
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003434:	f001 f8d8 	bl	80045e8 <xTaskGetSchedulerState>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <xQueueSemaphoreTake+0x60>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueSemaphoreTake+0x64>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <xQueueSemaphoreTake+0x66>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	61bb      	str	r3, [r7, #24]
}
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003464:	f001 ff5a 	bl	800531c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d024      	beq.n	80034be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003484:	f001 fa30 	bl	80048e8 <pvTaskIncrementMutexHeldCount>
 8003488:	4602      	mov	r2, r0
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00f      	beq.n	80034b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	3310      	adds	r3, #16
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fed4 	bl	8004248 <xTaskRemoveFromEventList>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <xQueueSemaphoreTake+0x214>)
 80034a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034b6:	f001 ff61 	bl	800537c <vPortExitCritical>
				return pdPASS;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e097      	b.n	80035ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	617b      	str	r3, [r7, #20]
}
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80034e0:	f001 ff4c 	bl	800537c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e082      	b.n	80035ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 ff0c 	bl	8004310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034fc:	f001 ff3e 	bl	800537c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003500:	f000 fc7e 	bl	8003e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003504:	f001 ff0a 	bl	800531c <vPortEnterCritical>
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350e:	b25b      	sxtb	r3, r3
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d103      	bne.n	800351e <xQueueSemaphoreTake+0x13a>
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003524:	b25b      	sxtb	r3, r3
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d103      	bne.n	8003534 <xQueueSemaphoreTake+0x150>
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003534:	f001 ff22 	bl	800537c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003538:	463a      	mov	r2, r7
 800353a:	f107 030c 	add.w	r3, r7, #12
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fefb 	bl	800433c <xTaskCheckForTimeOut>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d132      	bne.n	80035b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800354c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800354e:	f000 f971 	bl	8003834 <prvIsQueueEmpty>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d026      	beq.n	80035a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003560:	f001 fedc 	bl	800531c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f85b 	bl	8004624 <xTaskPriorityInherit>
 800356e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003570:	f001 ff04 	bl	800537c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	3324      	adds	r3, #36	; 0x24
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fe13 	bl	80041a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003584:	f000 f904 	bl	8003790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003588:	f000 fc48 	bl	8003e1c <xTaskResumeAll>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f47f af68 	bne.w	8003464 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <xQueueSemaphoreTake+0x214>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	e75e      	b.n	8003464 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80035a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035a8:	f000 f8f2 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ac:	f000 fc36 	bl	8003e1c <xTaskResumeAll>
 80035b0:	e758      	b.n	8003464 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80035b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035b4:	f000 f8ec 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035b8:	f000 fc30 	bl	8003e1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035be:	f000 f939 	bl	8003834 <prvIsQueueEmpty>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f43f af4d 	beq.w	8003464 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80035d0:	f001 fea4 	bl	800531c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035d6:	f000 f834 	bl	8003642 <prvGetDisinheritPriorityAfterTimeout>
 80035da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 f8fa 	bl	80047dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80035e8:	f001 fec8 	bl	800537c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3738      	adds	r7, #56	; 0x38
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <vQueueDelete+0x28>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
}
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f95b 	bl	80038e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f002 f835 	bl	80056a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e001      	b.n	8003664 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003664:	68fb      	ldr	r3, [r7, #12]
	}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d14d      	bne.n	8003732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f830 	bl	8004700 <xTaskPriorityDisinherit>
 80036a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	e043      	b.n	8003732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d119      	bne.n	80036e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6898      	ldr	r0, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	461a      	mov	r2, r3
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	f002 f930 	bl	8005920 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d32b      	bcc.n	8003732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	e026      	b.n	8003732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68d8      	ldr	r0, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	461a      	mov	r2, r3
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	f002 f916 	bl	8005920 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	425b      	negs	r3, r3
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	425b      	negs	r3, r3
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d105      	bne.n	8003732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	3b01      	subs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800373a:	697b      	ldr	r3, [r7, #20]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	d303      	bcc.n	8003778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68d9      	ldr	r1, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	461a      	mov	r2, r3
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f002 f8cc 	bl	8005920 <memcpy>
	}
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003798:	f001 fdc0 	bl	800531c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a4:	e011      	b.n	80037ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d012      	beq.n	80037d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3324      	adds	r3, #36	; 0x24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fd48 	bl	8004248 <xTaskRemoveFromEventList>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037be:	f000 fe1f 	bl	8004400 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dce9      	bgt.n	80037a6 <prvUnlockQueue+0x16>
 80037d2:	e000      	b.n	80037d6 <prvUnlockQueue+0x46>
					break;
 80037d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037de:	f001 fdcd 	bl	800537c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037e2:	f001 fd9b 	bl	800531c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ee:	e011      	b.n	8003814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3310      	adds	r3, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd23 	bl	8004248 <xTaskRemoveFromEventList>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003808:	f000 fdfa 	bl	8004400 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	3b01      	subs	r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003818:	2b00      	cmp	r3, #0
 800381a:	dce9      	bgt.n	80037f0 <prvUnlockQueue+0x60>
 800381c:	e000      	b.n	8003820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800381e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	22ff      	movs	r2, #255	; 0xff
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003828:	f001 fda8 	bl	800537c <vPortExitCritical>
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800383c:	f001 fd6e 	bl	800531c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e001      	b.n	8003852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f001 fd93 	bl	800537c <vPortExitCritical>

	return xReturn;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003868:	f001 fd58 	bl	800531c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	429a      	cmp	r2, r3
 8003876:	d102      	bne.n	800387e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e001      	b.n	8003882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003882:	f001 fd7b 	bl	800537c <vPortExitCritical>

	return xReturn;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e014      	b.n	80038ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038a0:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <vQueueAddToRegistry+0x4c>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038ac:	490b      	ldr	r1, [pc, #44]	; (80038dc <vQueueAddToRegistry+0x4c>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <vQueueAddToRegistry+0x4c>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038c2:	e006      	b.n	80038d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3301      	adds	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b07      	cmp	r3, #7
 80038ce:	d9e7      	bls.n	80038a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20001a94 	.word	0x20001a94

080038e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e016      	b.n	800391c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <vQueueUnregisterQueue+0x50>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d10b      	bne.n	8003916 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <vQueueUnregisterQueue+0x50>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2100      	movs	r1, #0
 8003904:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <vQueueUnregisterQueue+0x50>)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
				break;
 8003914:	e006      	b.n	8003924 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3301      	adds	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b07      	cmp	r3, #7
 8003920:	d9e5      	bls.n	80038ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20001a94 	.word	0x20001a94

08003934 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003944:	f001 fcea 	bl	800531c <vPortEnterCritical>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394e:	b25b      	sxtb	r3, r3
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d103      	bne.n	800395e <vQueueWaitForMessageRestricted+0x2a>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003964:	b25b      	sxtb	r3, r3
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d103      	bne.n	8003974 <vQueueWaitForMessageRestricted+0x40>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003974:	f001 fd02 	bl	800537c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3324      	adds	r3, #36	; 0x24
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fc31 	bl	80041f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800398e:	6978      	ldr	r0, [r7, #20]
 8003990:	f7ff fefe 	bl	8003790 <prvUnlockQueue>
	}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af04      	add	r7, sp, #16
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	623b      	str	r3, [r7, #32]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61fb      	str	r3, [r7, #28]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039e2:	235c      	movs	r3, #92	; 0x5c
 80039e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b5c      	cmp	r3, #92	; 0x5c
 80039ea:	d00a      	beq.n	8003a02 <xTaskCreateStatic+0x66>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61bb      	str	r3, [r7, #24]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01e      	beq.n	8003a46 <xTaskCreateStatic+0xaa>
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01b      	beq.n	8003a46 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a20:	2300      	movs	r3, #0
 8003a22:	9303      	str	r3, [sp, #12]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f850 	bl	8003ade <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a40:	f000 f8d4 	bl	8003bec <prvAddNewTaskToReadyList>
 8003a44:	e001      	b.n	8003a4a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a4a:	697b      	ldr	r3, [r7, #20]
	}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fd57 	bl	800551c <pvPortMalloc>
 8003a6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a76:	205c      	movs	r0, #92	; 0x5c
 8003a78:	f001 fd50 	bl	800551c <pvPortMalloc>
 8003a7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
 8003a8a:	e005      	b.n	8003a98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a8c:	6978      	ldr	r0, [r7, #20]
 8003a8e:	f001 fe09 	bl	80056a4 <vPortFree>
 8003a92:	e001      	b.n	8003a98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9303      	str	r3, [sp, #12]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	9302      	str	r3, [sp, #8]
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f80e 	bl	8003ade <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac2:	69f8      	ldr	r0, [r7, #28]
 8003ac4:	f000 f892 	bl	8003bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e002      	b.n	8003ad4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
	}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	461a      	mov	r2, r3
 8003af6:	21a5      	movs	r1, #165	; 0xa5
 8003af8:	f001 ff20 	bl	800593c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b06:	3b01      	subs	r3, #1
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f023 0307 	bic.w	r3, r3, #7
 8003b14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	617b      	str	r3, [r7, #20]
}
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	e012      	b.n	8003b62 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	7819      	ldrb	r1, [r3, #0]
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	3334      	adds	r3, #52	; 0x34
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d9e9      	bls.n	8003b3c <prvInitialiseNewTask+0x5e>
 8003b68:	e000      	b.n	8003b6c <prvInitialiseNewTask+0x8e>
		{
			break;
 8003b6a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	2b37      	cmp	r3, #55	; 0x37
 8003b78:	d901      	bls.n	8003b7e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b7a:	2337      	movs	r3, #55	; 0x37
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	3304      	adds	r3, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fe2e 	bl	80027f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fe29 	bl	80027f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	69b8      	ldr	r0, [r7, #24]
 8003bce:	f001 fab5 	bl	800513c <pxPortInitialiseStack>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003be4:	bf00      	nop
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bf4:	f001 fb92 	bl	800531c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <prvAddNewTaskToReadyList+0xc4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <prvAddNewTaskToReadyList+0xc4>)
 8003c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <prvAddNewTaskToReadyList+0xc4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d110      	bne.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c18:	f000 fc16 	bl	8004448 <prvInitialiseTaskLists>
 8003c1c:	e00d      	b.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c1e:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <prvAddNewTaskToReadyList+0xcc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d802      	bhi.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c34:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <prvAddNewTaskToReadyList+0xd0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <prvAddNewTaskToReadyList+0xd0>)
 8003c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <prvAddNewTaskToReadyList+0xd0>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <prvAddNewTaskToReadyList+0xd4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d903      	bls.n	8003c60 <prvAddNewTaskToReadyList+0x74>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <prvAddNewTaskToReadyList+0xd4>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <prvAddNewTaskToReadyList+0xd8>)
 8003c6e:	441a      	add	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe fdc9 	bl	800280e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c7c:	f001 fb7e 	bl	800537c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <prvAddNewTaskToReadyList+0xcc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d207      	bcs.n	8003ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <prvAddNewTaskToReadyList+0xdc>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000c24 	.word	0x20000c24
 8003cb4:	20000750 	.word	0x20000750
 8003cb8:	20000c30 	.word	0x20000c30
 8003cbc:	20000c40 	.word	0x20000c40
 8003cc0:	20000c2c 	.word	0x20000c2c
 8003cc4:	20000754 	.word	0x20000754
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <vTaskDelay+0x60>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <vTaskDelay+0x30>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60bb      	str	r3, [r7, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cfc:	f000 f880 	bl	8003e00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d00:	2100      	movs	r1, #0
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fe04 	bl	8004910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d08:	f000 f888 	bl	8003e1c <xTaskResumeAll>
 8003d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <vTaskDelay+0x64>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000c4c 	.word	0x20000c4c
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d42:	463a      	mov	r2, r7
 8003d44:	1d39      	adds	r1, r7, #4
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fd02 	bl	8002754 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	9202      	str	r2, [sp, #8]
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	460a      	mov	r2, r1
 8003d62:	4921      	ldr	r1, [pc, #132]	; (8003de8 <vTaskStartScheduler+0xb4>)
 8003d64:	4821      	ldr	r0, [pc, #132]	; (8003dec <vTaskStartScheduler+0xb8>)
 8003d66:	f7ff fe19 	bl	800399c <xTaskCreateStatic>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4a20      	ldr	r2, [pc, #128]	; (8003df0 <vTaskStartScheduler+0xbc>)
 8003d6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <vTaskStartScheduler+0xbc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e001      	b.n	8003d82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d88:	f000 fe16 	bl	80049b8 <xTimerCreateTimerTask>
 8003d8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d116      	bne.n	8003dc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	613b      	str	r3, [r7, #16]
}
 8003da6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <vTaskStartScheduler+0xc0>)
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <vTaskStartScheduler+0xc4>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <vTaskStartScheduler+0xc8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dbc:	f001 fa3c 	bl	8005238 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dc0:	e00e      	b.n	8003de0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d10a      	bne.n	8003de0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60fb      	str	r3, [r7, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <vTaskStartScheduler+0xaa>
}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	08006370 	.word	0x08006370
 8003dec:	08004419 	.word	0x08004419
 8003df0:	20000c48 	.word	0x20000c48
 8003df4:	20000c44 	.word	0x20000c44
 8003df8:	20000c30 	.word	0x20000c30
 8003dfc:	20000c28 	.word	0x20000c28

08003e00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <vTaskSuspendAll+0x18>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <vTaskSuspendAll+0x18>)
 8003e0c:	6013      	str	r3, [r2, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000c4c 	.word	0x20000c4c

08003e1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e2a:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <xTaskResumeAll+0x118>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	603b      	str	r3, [r7, #0]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e48:	f001 fa68 	bl	800531c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <xTaskResumeAll+0x118>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <xTaskResumeAll+0x118>)
 8003e54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <xTaskResumeAll+0x118>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d162      	bne.n	8003f24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <xTaskResumeAll+0x11c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d05e      	beq.n	8003f24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e66:	e02f      	b.n	8003ec8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <xTaskResumeAll+0x120>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe fd25 	bl	80028c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fd20 	bl	80028c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <xTaskResumeAll+0x124>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d903      	bls.n	8003e98 <xTaskResumeAll+0x7c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <xTaskResumeAll+0x124>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <xTaskResumeAll+0x128>)
 8003ea6:	441a      	add	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f7fe fcad 	bl	800280e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <xTaskResumeAll+0x12c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <xTaskResumeAll+0x130>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <xTaskResumeAll+0x120>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1cb      	bne.n	8003e68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ed6:	f000 fb55 	bl	8004584 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <xTaskResumeAll+0x134>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ee6:	f000 f845 	bl	8003f74 <xTaskIncrementTick>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <xTaskResumeAll+0x130>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f1      	bne.n	8003ee6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <xTaskResumeAll+0x134>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <xTaskResumeAll+0x130>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <xTaskResumeAll+0x138>)
 8003f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f24:	f001 fa2a 	bl	800537c <vPortExitCritical>

	return xAlreadyYielded;
 8003f28:	68bb      	ldr	r3, [r7, #8]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000c4c 	.word	0x20000c4c
 8003f38:	20000c24 	.word	0x20000c24
 8003f3c:	20000be4 	.word	0x20000be4
 8003f40:	20000c2c 	.word	0x20000c2c
 8003f44:	20000754 	.word	0x20000754
 8003f48:	20000750 	.word	0x20000750
 8003f4c:	20000c38 	.word	0x20000c38
 8003f50:	20000c34 	.word	0x20000c34
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f5e:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <xTaskGetTickCount+0x18>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f64:	687b      	ldr	r3, [r7, #4]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	20000c28 	.word	0x20000c28

08003f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7e:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <xTaskIncrementTick+0x150>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 808e 	bne.w	80040a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f88:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <xTaskIncrementTick+0x154>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f90:	4a4d      	ldr	r2, [pc, #308]	; (80040c8 <xTaskIncrementTick+0x154>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d120      	bne.n	8003fde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f9c:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <xTaskIncrementTick+0x158>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <xTaskIncrementTick+0x48>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	603b      	str	r3, [r7, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xTaskIncrementTick+0x46>
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <xTaskIncrementTick+0x158>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <xTaskIncrementTick+0x15c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <xTaskIncrementTick+0x158>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <xTaskIncrementTick+0x15c>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <xTaskIncrementTick+0x160>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	4a3f      	ldr	r2, [pc, #252]	; (80040d4 <xTaskIncrementTick+0x160>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	f000 fad3 	bl	8004584 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fde:	4b3e      	ldr	r3, [pc, #248]	; (80040d8 <xTaskIncrementTick+0x164>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d34e      	bcc.n	8004086 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <xTaskIncrementTick+0x158>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <xTaskIncrementTick+0x82>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <xTaskIncrementTick+0x84>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffc:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <xTaskIncrementTick+0x164>)
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	601a      	str	r2, [r3, #0]
					break;
 8004004:	e03f      	b.n	8004086 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <xTaskIncrementTick+0x158>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d203      	bcs.n	8004026 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800401e:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <xTaskIncrementTick+0x164>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6013      	str	r3, [r2, #0]
						break;
 8004024:	e02f      	b.n	8004086 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3304      	adds	r3, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fc4a 	bl	80028c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fc41 	bl	80028c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4b25      	ldr	r3, [pc, #148]	; (80040dc <xTaskIncrementTick+0x168>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d903      	bls.n	8004056 <xTaskIncrementTick+0xe2>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	4a22      	ldr	r2, [pc, #136]	; (80040dc <xTaskIncrementTick+0x168>)
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <xTaskIncrementTick+0x16c>)
 8004064:	441a      	add	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe fbce 	bl	800280e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <xTaskIncrementTick+0x170>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	429a      	cmp	r2, r3
 800407e:	d3b3      	bcc.n	8003fe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004084:	e7b0      	b.n	8003fe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004086:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <xTaskIncrementTick+0x170>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	4914      	ldr	r1, [pc, #80]	; (80040e0 <xTaskIncrementTick+0x16c>)
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d907      	bls.n	80040ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e004      	b.n	80040ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <xTaskIncrementTick+0x174>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <xTaskIncrementTick+0x174>)
 80040ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <xTaskIncrementTick+0x178>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040ba:	697b      	ldr	r3, [r7, #20]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000c4c 	.word	0x20000c4c
 80040c8:	20000c28 	.word	0x20000c28
 80040cc:	20000bdc 	.word	0x20000bdc
 80040d0:	20000be0 	.word	0x20000be0
 80040d4:	20000c3c 	.word	0x20000c3c
 80040d8:	20000c44 	.word	0x20000c44
 80040dc:	20000c2c 	.word	0x20000c2c
 80040e0:	20000754 	.word	0x20000754
 80040e4:	20000750 	.word	0x20000750
 80040e8:	20000c34 	.word	0x20000c34
 80040ec:	20000c38 	.word	0x20000c38

080040f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <vTaskSwitchContext+0xa4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <vTaskSwitchContext+0xa8>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004104:	e041      	b.n	800418a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <vTaskSwitchContext+0xa8>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <vTaskSwitchContext+0xac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e010      	b.n	8004136 <vTaskSwitchContext+0x46>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <vTaskSwitchContext+0x40>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	607b      	str	r3, [r7, #4]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <vTaskSwitchContext+0x3e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3b01      	subs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	491a      	ldr	r1, [pc, #104]	; (80041a0 <vTaskSwitchContext+0xb0>)
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0e4      	beq.n	8004114 <vTaskSwitchContext+0x24>
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <vTaskSwitchContext+0xb0>)
 8004156:	4413      	add	r3, r2
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3308      	adds	r3, #8
 800416c:	429a      	cmp	r2, r3
 800416e:	d104      	bne.n	800417a <vTaskSwitchContext+0x8a>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <vTaskSwitchContext+0xb4>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4a05      	ldr	r2, [pc, #20]	; (800419c <vTaskSwitchContext+0xac>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6013      	str	r3, [r2, #0]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	20000c4c 	.word	0x20000c4c
 8004198:	20000c38 	.word	0x20000c38
 800419c:	20000c2c 	.word	0x20000c2c
 80041a0:	20000754 	.word	0x20000754
 80041a4:	20000750 	.word	0x20000750

080041a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60fb      	str	r3, [r7, #12]
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <vTaskPlaceOnEventList+0x44>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3318      	adds	r3, #24
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fe fb3c 	bl	8002854 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041dc:	2101      	movs	r1, #1
 80041de:	6838      	ldr	r0, [r7, #0]
 80041e0:	f000 fb96 	bl	8004910 <prvAddCurrentTaskToDelayedList>
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000750 	.word	0x20000750

080041f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	617b      	str	r3, [r7, #20]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <vTaskPlaceOnEventListRestricted+0x54>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3318      	adds	r3, #24
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7fe faf4 	bl	800280e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
 8004230:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	68b8      	ldr	r0, [r7, #8]
 8004236:	f000 fb6b 	bl	8004910 <prvAddCurrentTaskToDelayedList>
	}
 800423a:	bf00      	nop
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000750 	.word	0x20000750

08004248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	60fb      	str	r3, [r7, #12]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3318      	adds	r3, #24
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fb23 	bl	80028c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427e:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <xTaskRemoveFromEventList+0xb0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11d      	bne.n	80042c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3304      	adds	r3, #4
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fb1a 	bl	80028c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <xTaskRemoveFromEventList+0xb4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d903      	bls.n	80042a4 <xTaskRemoveFromEventList+0x5c>
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a16      	ldr	r2, [pc, #88]	; (80042fc <xTaskRemoveFromEventList+0xb4>)
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <xTaskRemoveFromEventList+0xb8>)
 80042b2:	441a      	add	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7fe faa7 	bl	800280e <vListInsertEnd>
 80042c0:	e005      	b.n	80042ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3318      	adds	r3, #24
 80042c6:	4619      	mov	r1, r3
 80042c8:	480e      	ldr	r0, [pc, #56]	; (8004304 <xTaskRemoveFromEventList+0xbc>)
 80042ca:	f7fe faa0 	bl	800280e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <xTaskRemoveFromEventList+0xc0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d905      	bls.n	80042e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <xTaskRemoveFromEventList+0xc4>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e001      	b.n	80042ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042ec:	697b      	ldr	r3, [r7, #20]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000c4c 	.word	0x20000c4c
 80042fc:	20000c2c 	.word	0x20000c2c
 8004300:	20000754 	.word	0x20000754
 8004304:	20000be4 	.word	0x20000be4
 8004308:	20000750 	.word	0x20000750
 800430c:	20000c38 	.word	0x20000c38

08004310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <vTaskInternalSetTimeOutState+0x24>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <vTaskInternalSetTimeOutState+0x28>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	605a      	str	r2, [r3, #4]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000c3c 	.word	0x20000c3c
 8004338:	20000c28 	.word	0x20000c28

0800433c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	613b      	str	r3, [r7, #16]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60fb      	str	r3, [r7, #12]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800437e:	f000 ffcd 	bl	800531c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <xTaskCheckForTimeOut+0xbc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d102      	bne.n	80043a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e023      	b.n	80043ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <xTaskCheckForTimeOut+0xc0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d007      	beq.n	80043be <xTaskCheckForTimeOut+0x82>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e015      	b.n	80043ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d20b      	bcs.n	80043e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ff9b 	bl	8004310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e004      	b.n	80043ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ea:	f000 ffc7 	bl	800537c <vPortExitCritical>

	return xReturn;
 80043ee:	69fb      	ldr	r3, [r7, #28]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000c28 	.word	0x20000c28
 80043fc:	20000c3c 	.word	0x20000c3c

08004400 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <vTaskMissedYield+0x14>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000c38 	.word	0x20000c38

08004418 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004420:	f000 f852 	bl	80044c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <prvIdleTask+0x28>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d9f9      	bls.n	8004420 <prvIdleTask+0x8>
			{
				taskYIELD();
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <prvIdleTask+0x2c>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800443c:	e7f0      	b.n	8004420 <prvIdleTask+0x8>
 800443e:	bf00      	nop
 8004440:	20000754 	.word	0x20000754
 8004444:	e000ed04 	.word	0xe000ed04

08004448 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	e00c      	b.n	800446e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <prvInitialiseTaskLists+0x60>)
 8004460:	4413      	add	r3, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f9a8 	bl	80027b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3301      	adds	r3, #1
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b37      	cmp	r3, #55	; 0x37
 8004472:	d9ef      	bls.n	8004454 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004474:	480d      	ldr	r0, [pc, #52]	; (80044ac <prvInitialiseTaskLists+0x64>)
 8004476:	f7fe f99f 	bl	80027b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800447a:	480d      	ldr	r0, [pc, #52]	; (80044b0 <prvInitialiseTaskLists+0x68>)
 800447c:	f7fe f99c 	bl	80027b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004480:	480c      	ldr	r0, [pc, #48]	; (80044b4 <prvInitialiseTaskLists+0x6c>)
 8004482:	f7fe f999 	bl	80027b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004486:	480c      	ldr	r0, [pc, #48]	; (80044b8 <prvInitialiseTaskLists+0x70>)
 8004488:	f7fe f996 	bl	80027b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800448c:	480b      	ldr	r0, [pc, #44]	; (80044bc <prvInitialiseTaskLists+0x74>)
 800448e:	f7fe f993 	bl	80027b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <prvInitialiseTaskLists+0x78>)
 8004494:	4a05      	ldr	r2, [pc, #20]	; (80044ac <prvInitialiseTaskLists+0x64>)
 8004496:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <prvInitialiseTaskLists+0x7c>)
 800449a:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <prvInitialiseTaskLists+0x68>)
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000754 	.word	0x20000754
 80044ac:	20000bb4 	.word	0x20000bb4
 80044b0:	20000bc8 	.word	0x20000bc8
 80044b4:	20000be4 	.word	0x20000be4
 80044b8:	20000bf8 	.word	0x20000bf8
 80044bc:	20000c10 	.word	0x20000c10
 80044c0:	20000bdc 	.word	0x20000bdc
 80044c4:	20000be0 	.word	0x20000be0

080044c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ce:	e019      	b.n	8004504 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044d0:	f000 ff24 	bl	800531c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <prvCheckTasksWaitingTermination+0x50>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe f9ef 	bl	80028c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <prvCheckTasksWaitingTermination+0x54>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	4a0b      	ldr	r2, [pc, #44]	; (800451c <prvCheckTasksWaitingTermination+0x54>)
 80044ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <prvCheckTasksWaitingTermination+0x58>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <prvCheckTasksWaitingTermination+0x58>)
 80044f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044fa:	f000 ff3f 	bl	800537c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f810 	bl	8004524 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <prvCheckTasksWaitingTermination+0x58>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e1      	bne.n	80044d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000bf8 	.word	0x20000bf8
 800451c:	20000c24 	.word	0x20000c24
 8004520:	20000c0c 	.word	0x20000c0c

08004524 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004532:	2b00      	cmp	r3, #0
 8004534:	d108      	bne.n	8004548 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f8b2 	bl	80056a4 <vPortFree>
				vPortFree( pxTCB );
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f001 f8af 	bl	80056a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004546:	e018      	b.n	800457a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800454e:	2b01      	cmp	r3, #1
 8004550:	d103      	bne.n	800455a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 f8a6 	bl	80056a4 <vPortFree>
	}
 8004558:	e00f      	b.n	800457a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004560:	2b02      	cmp	r3, #2
 8004562:	d00a      	beq.n	800457a <prvDeleteTCB+0x56>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <prvDeleteTCB+0x54>
	}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <prvResetNextTaskUnblockTime+0x40>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <prvResetNextTaskUnblockTime+0x14>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <prvResetNextTaskUnblockTime+0x16>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <prvResetNextTaskUnblockTime+0x44>)
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045a6:	e008      	b.n	80045ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <prvResetNextTaskUnblockTime+0x40>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <prvResetNextTaskUnblockTime+0x44>)
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	20000bdc 	.word	0x20000bdc
 80045c8:	20000c44 	.word	0x20000c44

080045cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <xTaskGetCurrentTaskHandle+0x18>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80045d8:	687b      	ldr	r3, [r7, #4]
	}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	20000750 	.word	0x20000750

080045e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <xTaskGetSchedulerState+0x34>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045f6:	2301      	movs	r3, #1
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	e008      	b.n	800460e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <xTaskGetSchedulerState+0x38>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004604:	2302      	movs	r3, #2
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e001      	b.n	800460e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800460e:	687b      	ldr	r3, [r7, #4]
	}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000c30 	.word	0x20000c30
 8004620:	20000c4c 	.word	0x20000c4c

08004624 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d056      	beq.n	80046e8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <xTaskPriorityInherit+0xd0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d246      	bcs.n	80046d6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db06      	blt.n	800465e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <xTaskPriorityInherit+0xd0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6959      	ldr	r1, [r3, #20]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a22      	ldr	r2, [pc, #136]	; (80046f8 <xTaskPriorityInherit+0xd4>)
 8004670:	4413      	add	r3, r2
 8004672:	4299      	cmp	r1, r3
 8004674:	d101      	bne.n	800467a <xTaskPriorityInherit+0x56>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <xTaskPriorityInherit+0x58>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d022      	beq.n	80046c6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3304      	adds	r3, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe f91d 	bl	80028c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <xTaskPriorityInherit+0xd0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <xTaskPriorityInherit+0xd8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d903      	bls.n	80046a8 <xTaskPriorityInherit+0x84>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a15      	ldr	r2, [pc, #84]	; (80046fc <xTaskPriorityInherit+0xd8>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <xTaskPriorityInherit+0xd4>)
 80046b6:	441a      	add	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe f8a5 	bl	800280e <vListInsertEnd>
 80046c4:	e004      	b.n	80046d0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <xTaskPriorityInherit+0xd0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e008      	b.n	80046e8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <xTaskPriorityInherit+0xd0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d201      	bcs.n	80046e8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046e8:	68fb      	ldr	r3, [r7, #12]
	}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000750 	.word	0x20000750
 80046f8:	20000754 	.word	0x20000754
 80046fc:	20000c2c 	.word	0x20000c2c

08004700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d056      	beq.n	80047c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004716:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <xTaskPriorityDisinherit+0xd0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d00a      	beq.n	8004736 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	60fb      	str	r3, [r7, #12]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	60bb      	str	r3, [r7, #8]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	429a      	cmp	r2, r3
 8004768:	d02c      	beq.n	80047c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	2b00      	cmp	r3, #0
 8004770:	d128      	bne.n	80047c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3304      	adds	r3, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe f8a4 	bl	80028c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <xTaskPriorityDisinherit+0xd4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d903      	bls.n	80047a4 <xTaskPriorityDisinherit+0xa4>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <xTaskPriorityDisinherit+0xd4>)
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <xTaskPriorityDisinherit+0xd8>)
 80047b2:	441a      	add	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f7fe f827 	bl	800280e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047c4:	697b      	ldr	r3, [r7, #20]
	}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000750 	.word	0x20000750
 80047d4:	20000c2c 	.word	0x20000c2c
 80047d8:	20000754 	.word	0x20000754

080047dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d06f      	beq.n	80048d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60fb      	str	r3, [r7, #12]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e002      	b.n	8004828 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	429a      	cmp	r2, r3
 8004830:	d050      	beq.n	80048d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d14b      	bne.n	80048d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	429a      	cmp	r2, r3
 8004844:	d10a      	bne.n	800485c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	60bb      	str	r3, [r7, #8]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db04      	blt.n	800487a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	6959      	ldr	r1, [r3, #20]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800488a:	4413      	add	r3, r2
 800488c:	4299      	cmp	r1, r3
 800488e:	d101      	bne.n	8004894 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01c      	beq.n	80048d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3304      	adds	r3, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe f810 	bl	80028c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d903      	bls.n	80048b8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048c6:	441a      	add	r2, r3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f7fd ff9d 	bl	800280e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048d4:	bf00      	nop
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000750 	.word	0x20000750
 80048e0:	20000754 	.word	0x20000754
 80048e4:	20000c2c 	.word	0x20000c2c

080048e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <pvTaskIncrementMutexHeldCount+0x24>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <pvTaskIncrementMutexHeldCount+0x24>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048fa:	3201      	adds	r2, #1
 80048fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80048fe:	4b03      	ldr	r3, [pc, #12]	; (800490c <pvTaskIncrementMutexHeldCount+0x24>)
 8004900:	681b      	ldr	r3, [r3, #0]
	}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000750 	.word	0x20000750

08004910 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800491a:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004920:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3304      	adds	r3, #4
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd ffcc 	bl	80028c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d10a      	bne.n	800494a <prvAddCurrentTaskToDelayedList+0x3a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4819      	ldr	r0, [pc, #100]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004944:	f7fd ff63 	bl	800280e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004948:	e026      	b.n	8004998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	429a      	cmp	r2, r3
 8004960:	d209      	bcs.n	8004976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f7fd ff70 	bl	8002854 <vListInsert>
}
 8004974:	e010      	b.n	8004998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7fd ff66 	bl	8002854 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d202      	bcs.n	8004998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000c28 	.word	0x20000c28
 80049a4:	20000750 	.word	0x20000750
 80049a8:	20000c10 	.word	0x20000c10
 80049ac:	20000be0 	.word	0x20000be0
 80049b0:	20000bdc 	.word	0x20000bdc
 80049b4:	20000c44 	.word	0x20000c44

080049b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049c2:	f000 fb5b 	bl	800507c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <xTimerCreateTimerTask+0x80>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d021      	beq.n	8004a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049d6:	1d3a      	adds	r2, r7, #4
 80049d8:	f107 0108 	add.w	r1, r7, #8
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fd fecf 	bl	8002784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	9202      	str	r2, [sp, #8]
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	2302      	movs	r3, #2
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	460a      	mov	r2, r1
 80049f8:	4910      	ldr	r1, [pc, #64]	; (8004a3c <xTimerCreateTimerTask+0x84>)
 80049fa:	4811      	ldr	r0, [pc, #68]	; (8004a40 <xTimerCreateTimerTask+0x88>)
 80049fc:	f7fe ffce 	bl	800399c <xTaskCreateStatic>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <xTimerCreateTimerTask+0x8c>)
 8004a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a06:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <xTimerCreateTimerTask+0x8c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	613b      	str	r3, [r7, #16]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a2e:	697b      	ldr	r3, [r7, #20]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000c80 	.word	0x20000c80
 8004a3c:	08006378 	.word	0x08006378
 8004a40:	08004c85 	.word	0x08004c85
 8004a44:	20000c84 	.word	0x20000c84

08004a48 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004a56:	2030      	movs	r0, #48	; 0x30
 8004a58:	f000 fd60 	bl	800551c <pvPortMalloc>
 8004a5c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f846 	bl	8004b04 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004a80:	697b      	ldr	r3, [r7, #20]
	}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004a98:	2330      	movs	r3, #48	; 0x30
 8004a9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b30      	cmp	r3, #48	; 0x30
 8004aa0:	d00a      	beq.n	8004ab8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61bb      	str	r3, [r7, #24]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <xTimerCreateStatic+0x4a>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	617b      	str	r3, [r7, #20]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f809 	bl	8004b04 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8004afa:	69fb      	ldr	r3, [r7, #28]
	}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	617b      	str	r3, [r7, #20]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004b34:	f000 faa2 	bl	800507c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd fe4b 	bl	80027f6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	623b      	str	r3, [r7, #32]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02a      	beq.n	8004bf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b05      	cmp	r3, #5
 8004bae:	dc18      	bgt.n	8004be2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bb0:	f7ff fd1a 	bl	80045e8 <xTaskGetSchedulerState>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d109      	bne.n	8004bce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	f107 0110 	add.w	r1, r7, #16
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc6:	f7fe f909 	bl	8002ddc <xQueueGenericSend>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24
 8004bcc:	e012      	b.n	8004bf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f107 0110 	add.w	r1, r7, #16
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f7fe f8ff 	bl	8002ddc <xQueueGenericSend>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24
 8004be0:	e008      	b.n	8004bf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	f107 0110 	add.w	r1, r7, #16
 8004bea:	2300      	movs	r3, #0
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	f7fe f9f3 	bl	8002fd8 <xQueueGenericSendFromISR>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3728      	adds	r7, #40	; 0x28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000c80 	.word	0x20000c80

08004c04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c0e:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <prvProcessExpiredTimer+0x7c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fd fe51 	bl	80028c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d122      	bne.n	8004c70 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	18d1      	adds	r1, r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f000 f8c8 	bl	8004dcc <prvInsertTimerInActiveList>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f7ff ff8b 	bl	8004b68 <xTimerGenericCommand>
 8004c52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	60fb      	str	r3, [r7, #12]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	4798      	blx	r3
}
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000c78 	.word	0x20000c78

08004c84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c8c:	f107 0308 	add.w	r3, r7, #8
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f857 	bl	8004d44 <prvGetNextExpireTime>
 8004c96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f803 	bl	8004ca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ca2:	f000 f8d5 	bl	8004e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ca6:	e7f1      	b.n	8004c8c <prvTimerTask+0x8>

08004ca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cb2:	f7ff f8a5 	bl	8003e00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cb6:	f107 0308 	add.w	r3, r7, #8
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f866 	bl	8004d8c <prvSampleTimeNow>
 8004cc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d130      	bne.n	8004d2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <prvProcessTimerOrBlockTask+0x3c>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d806      	bhi.n	8004ce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cd6:	f7ff f8a1 	bl	8003e1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff91 	bl	8004c04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ce2:	e024      	b.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <prvProcessTimerOrBlockTask+0x90>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <prvProcessTimerOrBlockTask+0x94>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f7fe fe13 	bl	8003934 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d0e:	f7ff f885 	bl	8003e1c <xTaskResumeAll>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <prvProcessTimerOrBlockTask+0x98>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
}
 8004d28:	e001      	b.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d2a:	f7ff f877 	bl	8003e1c <xTaskResumeAll>
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000c7c 	.word	0x20000c7c
 8004d3c:	20000c80 	.word	0x20000c80
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <prvGetNextExpireTime+0x44>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <prvGetNextExpireTime+0x44>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e001      	b.n	8004d7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000c78 	.word	0x20000c78

08004d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d94:	f7ff f8e0 	bl	8003f58 <xTaskGetTickCount>
 8004d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <prvSampleTimeNow+0x3c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d205      	bcs.n	8004db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004da4:	f000 f908 	bl	8004fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004db6:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <prvSampleTimeNow+0x3c>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000c88 	.word	0x20000c88

08004dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d812      	bhi.n	8004e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d302      	bcc.n	8004e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e01b      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <prvInsertTimerInActiveList+0x7c>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fd fd1f 	bl	8002854 <vListInsert>
 8004e16:	e012      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d206      	bcs.n	8004e2e <prvInsertTimerInActiveList+0x62>
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e007      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <prvInsertTimerInActiveList+0x80>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fd fd0b 	bl	8002854 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000c7c 	.word	0x20000c7c
 8004e4c:	20000c78 	.word	0x20000c78

08004e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08e      	sub	sp, #56	; 0x38
 8004e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e56:	e09d      	b.n	8004f94 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da18      	bge.n	8004e90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e5e:	1d3b      	adds	r3, r7, #4
 8004e60:	3304      	adds	r3, #4
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	61fb      	str	r3, [r7, #28]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e86:	6850      	ldr	r0, [r2, #4]
 8004e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	db7d      	blt.n	8004f92 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fd fd0c 	bl	80028c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eac:	463b      	mov	r3, r7
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff6c 	bl	8004d8c <prvSampleTimeNow>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b09      	cmp	r3, #9
 8004eba:	d86b      	bhi.n	8004f94 <prvProcessReceivedCommands+0x144>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <prvProcessReceivedCommands+0x74>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004eed 	.word	0x08004eed
 8004ed0:	08004f95 	.word	0x08004f95
 8004ed4:	08004f49 	.word	0x08004f49
 8004ed8:	08004f81 	.word	0x08004f81
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eed 	.word	0x08004eed
 8004ee4:	08004f95 	.word	0x08004f95
 8004ee8:	08004f49 	.word	0x08004f49
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	18d1      	adds	r1, r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efa:	f7ff ff67 	bl	8004dcc <prvInsertTimerInActiveList>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d047      	beq.n	8004f94 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d13f      	bne.n	8004f94 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f26:	f7ff fe1f 	bl	8004b68 <xTimerGenericCommand>
 8004f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d130      	bne.n	8004f94 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61bb      	str	r3, [r7, #24]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	617b      	str	r3, [r7, #20]
}
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	18d1      	adds	r1, r2, r3
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7a:	f7ff ff27 	bl	8004dcc <prvInsertTimerInActiveList>
					break;
 8004f7e:	e009      	b.n	8004f94 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	f000 fb8a 	bl	80056a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f90:	e000      	b.n	8004f94 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <prvProcessReceivedCommands+0x164>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	1d39      	adds	r1, r7, #4
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe f941 	bl	8003224 <xQueueReceive>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f af57 	bne.w	8004e58 <prvProcessReceivedCommands+0x8>
	}
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	3730      	adds	r7, #48	; 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000c80 	.word	0x20000c80

08004fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fbe:	e045      	b.n	800504c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc0:	4b2c      	ldr	r3, [pc, #176]	; (8005074 <prvSwitchTimerLists+0xbc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <prvSwitchTimerLists+0xbc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fd fc73 	bl	80028c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d12e      	bne.n	800504c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d90e      	bls.n	800501e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <prvSwitchTimerLists+0xbc>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fd fc1c 	bl	8002854 <vListInsert>
 800501c:	e016      	b.n	800504c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800501e:	2300      	movs	r3, #0
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	2100      	movs	r1, #0
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fd9d 	bl	8004b68 <xTimerGenericCommand>
 800502e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	603b      	str	r3, [r7, #0]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <prvSwitchTimerLists+0xbc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1b4      	bne.n	8004fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <prvSwitchTimerLists+0xbc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <prvSwitchTimerLists+0xc0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <prvSwitchTimerLists+0xbc>)
 8005062:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <prvSwitchTimerLists+0xc0>)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6013      	str	r3, [r2, #0]
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000c78 	.word	0x20000c78
 8005078:	20000c7c 	.word	0x20000c7c

0800507c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005082:	f000 f94b 	bl	800531c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <prvCheckForValidListAndQueue+0x60>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d120      	bne.n	80050d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800508e:	4814      	ldr	r0, [pc, #80]	; (80050e0 <prvCheckForValidListAndQueue+0x64>)
 8005090:	f7fd fb92 	bl	80027b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005094:	4813      	ldr	r0, [pc, #76]	; (80050e4 <prvCheckForValidListAndQueue+0x68>)
 8005096:	f7fd fb8f 	bl	80027b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <prvCheckForValidListAndQueue+0x6c>)
 800509c:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <prvCheckForValidListAndQueue+0x64>)
 800509e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050a0:	4b12      	ldr	r3, [pc, #72]	; (80050ec <prvCheckForValidListAndQueue+0x70>)
 80050a2:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <prvCheckForValidListAndQueue+0x68>)
 80050a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050a6:	2300      	movs	r3, #0
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <prvCheckForValidListAndQueue+0x74>)
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <prvCheckForValidListAndQueue+0x78>)
 80050ae:	2110      	movs	r1, #16
 80050b0:	200a      	movs	r0, #10
 80050b2:	f7fd fc99 	bl	80029e8 <xQueueGenericCreateStatic>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <prvCheckForValidListAndQueue+0x60>)
 80050ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050bc:	4b07      	ldr	r3, [pc, #28]	; (80050dc <prvCheckForValidListAndQueue+0x60>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <prvCheckForValidListAndQueue+0x60>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	490b      	ldr	r1, [pc, #44]	; (80050f8 <prvCheckForValidListAndQueue+0x7c>)
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fbe0 	bl	8003890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d0:	f000 f954 	bl	800537c <vPortExitCritical>
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000c80 	.word	0x20000c80
 80050e0:	20000c50 	.word	0x20000c50
 80050e4:	20000c64 	.word	0x20000c64
 80050e8:	20000c78 	.word	0x20000c78
 80050ec:	20000c7c 	.word	0x20000c7c
 80050f0:	20000d2c 	.word	0x20000d2c
 80050f4:	20000c8c 	.word	0x20000c8c
 80050f8:	08006380 	.word	0x08006380

080050fc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <pvTimerGetTimerID+0x28>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60fb      	str	r3, [r7, #12]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005124:	f000 f8fa 	bl	800531c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800512e:	f000 f925 	bl	800537c <vPortExitCritical>

	return pvReturn;
 8005132:	693b      	ldr	r3, [r7, #16]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3b04      	subs	r3, #4
 800514c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b04      	subs	r3, #4
 800515a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b04      	subs	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <pxPortInitialiseStack+0x54>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3b14      	subs	r3, #20
 8005176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3b20      	subs	r3, #32
 8005182:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	08005195 	.word	0x08005195

08005194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <prvTaskExitError+0x54>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d00a      	beq.n	80051be <prvTaskExitError+0x2a>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60fb      	str	r3, [r7, #12]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <prvTaskExitError+0x28>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60bb      	str	r3, [r7, #8]
}
 80051d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051d2:	bf00      	nop
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0fc      	beq.n	80051d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	2000000c 	.word	0x2000000c
 80051ec:	00000000 	.word	0x00000000

080051f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <pxCurrentTCBConst2>)
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	6808      	ldr	r0, [r1, #0]
 80051f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051fa:	f380 8809 	msr	PSP, r0
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	f04e 0e0d 	orr.w	lr, lr, #13
 800520e:	4770      	bx	lr

08005210 <pxCurrentTCBConst2>:
 8005210:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005218:	4806      	ldr	r0, [pc, #24]	; (8005234 <prvPortStartFirstTask+0x1c>)
 800521a:	6800      	ldr	r0, [r0, #0]
 800521c:	6800      	ldr	r0, [r0, #0]
 800521e:	f380 8808 	msr	MSP, r0
 8005222:	b662      	cpsie	i
 8005224:	b661      	cpsie	f
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	df00      	svc	0
 8005230:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005232:	bf00      	nop
 8005234:	e000ed08 	.word	0xe000ed08

08005238 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800523e:	4b32      	ldr	r3, [pc, #200]	; (8005308 <xPortStartScheduler+0xd0>)
 8005240:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	22ff      	movs	r2, #255	; 0xff
 800524e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b2a      	ldr	r3, [pc, #168]	; (800530c <xPortStartScheduler+0xd4>)
 8005264:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <xPortStartScheduler+0xd8>)
 8005268:	2207      	movs	r2, #7
 800526a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800526c:	e009      	b.n	8005282 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800526e:	4b28      	ldr	r3, [pc, #160]	; (8005310 <xPortStartScheduler+0xd8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3b01      	subs	r3, #1
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <xPortStartScheduler+0xd8>)
 8005276:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d0ef      	beq.n	800526e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <xPortStartScheduler+0xd8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1c3 0307 	rsb	r3, r3, #7
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00a      	beq.n	80052b0 <xPortStartScheduler+0x78>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	60bb      	str	r3, [r7, #8]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052b0:	4b17      	ldr	r3, [pc, #92]	; (8005310 <xPortStartScheduler+0xd8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <xPortStartScheduler+0xd8>)
 80052b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <xPortStartScheduler+0xd8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <xPortStartScheduler+0xd8>)
 80052c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <xPortStartScheduler+0xdc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <xPortStartScheduler+0xdc>)
 80052d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <xPortStartScheduler+0xdc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <xPortStartScheduler+0xdc>)
 80052e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80052e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052e6:	f000 f8b9 	bl	800545c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <xPortStartScheduler+0xe0>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052f0:	f7ff ff92 	bl	8005218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052f4:	f7fe fefc 	bl	80040f0 <vTaskSwitchContext>
	prvTaskExitError();
 80052f8:	f7ff ff4c 	bl	8005194 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	e000e400 	.word	0xe000e400
 800530c:	20000d7c 	.word	0x20000d7c
 8005310:	20000d80 	.word	0x20000d80
 8005314:	e000ed20 	.word	0xe000ed20
 8005318:	2000000c 	.word	0x2000000c

0800531c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	607b      	str	r3, [r7, #4]
}
 8005334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <vPortEnterCritical+0x58>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	4a0d      	ldr	r2, [pc, #52]	; (8005374 <vPortEnterCritical+0x58>)
 800533e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <vPortEnterCritical+0x58>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10f      	bne.n	8005368 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <vPortEnterCritical+0x5c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <vPortEnterCritical+0x4c>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	603b      	str	r3, [r7, #0]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <vPortEnterCritical+0x4a>
	}
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <vPortExitCritical+0x4c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <vPortExitCritical+0x24>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	607b      	str	r3, [r7, #4]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <vPortExitCritical+0x4c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <vPortExitCritical+0x4c>)
 80053a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053aa:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <vPortExitCritical+0x4c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <vPortExitCritical+0x42>
 80053b2:	2300      	movs	r3, #0
 80053b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f383 8811 	msr	BASEPRI, r3
}
 80053bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	00000000 	.word	0x00000000

080053d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053d0:	f3ef 8009 	mrs	r0, PSP
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <pxCurrentTCBConst>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053e0:	6010      	str	r0, [r2, #0]
 80053e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80053e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053ea:	f380 8811 	msr	BASEPRI, r0
 80053ee:	f7fe fe7f 	bl	80040f0 <vTaskSwitchContext>
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	6808      	ldr	r0, [r1, #0]
 8005402:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005406:	f380 8809 	msr	PSP, r0
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	4770      	bx	lr

08005410 <pxCurrentTCBConst>:
 8005410:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
}
 8005430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005432:	f7fe fd9f 	bl	8003f74 <xTaskIncrementTick>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <SysTick_Handler+0x40>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <vPortSetupTimerInterrupt+0x30>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <vPortSetupTimerInterrupt+0x38>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a09      	ldr	r2, [pc, #36]	; (8005498 <vPortSetupTimerInterrupt+0x3c>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	4a08      	ldr	r2, [pc, #32]	; (800549c <vPortSetupTimerInterrupt+0x40>)
 800547a:	3b01      	subs	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800547e:	4b03      	ldr	r3, [pc, #12]	; (800548c <vPortSetupTimerInterrupt+0x30>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	e000e010 	.word	0xe000e010
 8005490:	e000e018 	.word	0xe000e018
 8005494:	20000000 	.word	0x20000000
 8005498:	10624dd3 	.word	0x10624dd3
 800549c:	e000e014 	.word	0xe000e014

080054a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054a6:	f3ef 8305 	mrs	r3, IPSR
 80054aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b0f      	cmp	r3, #15
 80054b0:	d914      	bls.n	80054dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054b2:	4a16      	ldr	r2, [pc, #88]	; (800550c <vPortValidateInterruptPriority+0x6c>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054bc:	4b14      	ldr	r3, [pc, #80]	; (8005510 <vPortValidateInterruptPriority+0x70>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	7afa      	ldrb	r2, [r7, #11]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d20a      	bcs.n	80054dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	607b      	str	r3, [r7, #4]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <vPortValidateInterruptPriority+0x74>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <vPortValidateInterruptPriority+0x78>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d90a      	bls.n	8005502 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	603b      	str	r3, [r7, #0]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <vPortValidateInterruptPriority+0x60>
	}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	e000e3f0 	.word	0xe000e3f0
 8005510:	20000d7c 	.word	0x20000d7c
 8005514:	e000ed0c 	.word	0xe000ed0c
 8005518:	20000d80 	.word	0x20000d80

0800551c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005528:	f7fe fc6a 	bl	8003e00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800552c:	4b58      	ldr	r3, [pc, #352]	; (8005690 <pvPortMalloc+0x174>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005534:	f000 f910 	bl	8005758 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005538:	4b56      	ldr	r3, [pc, #344]	; (8005694 <pvPortMalloc+0x178>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	f040 808e 	bne.w	8005662 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01d      	beq.n	8005588 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800554c:	2208      	movs	r2, #8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d014      	beq.n	8005588 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f023 0307 	bic.w	r3, r3, #7
 8005564:	3308      	adds	r3, #8
 8005566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <pvPortMalloc+0x6c>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	617b      	str	r3, [r7, #20]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d069      	beq.n	8005662 <pvPortMalloc+0x146>
 800558e:	4b42      	ldr	r3, [pc, #264]	; (8005698 <pvPortMalloc+0x17c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d864      	bhi.n	8005662 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005598:	4b40      	ldr	r3, [pc, #256]	; (800569c <pvPortMalloc+0x180>)
 800559a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800559c:	4b3f      	ldr	r3, [pc, #252]	; (800569c <pvPortMalloc+0x180>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a2:	e004      	b.n	80055ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d903      	bls.n	80055c0 <pvPortMalloc+0xa4>
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f1      	bne.n	80055a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055c0:	4b33      	ldr	r3, [pc, #204]	; (8005690 <pvPortMalloc+0x174>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d04b      	beq.n	8005662 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2208      	movs	r2, #8
 80055d0:	4413      	add	r3, r2
 80055d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	1ad2      	subs	r2, r2, r3
 80055e4:	2308      	movs	r3, #8
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d91f      	bls.n	800562c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <pvPortMalloc+0xf8>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	613b      	str	r3, [r7, #16]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	1ad2      	subs	r2, r2, r3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005626:	69b8      	ldr	r0, [r7, #24]
 8005628:	f000 f8f8 	bl	800581c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <pvPortMalloc+0x17c>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <pvPortMalloc+0x17c>)
 8005638:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <pvPortMalloc+0x17c>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <pvPortMalloc+0x184>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d203      	bcs.n	800564e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <pvPortMalloc+0x17c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <pvPortMalloc+0x184>)
 800564c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4b10      	ldr	r3, [pc, #64]	; (8005694 <pvPortMalloc+0x178>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	431a      	orrs	r2, r3
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005662:	f7fe fbdb 	bl	8003e1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <pvPortMalloc+0x16a>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <pvPortMalloc+0x168>
	return pvReturn;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3728      	adds	r7, #40	; 0x28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	2000198c 	.word	0x2000198c
 8005694:	20001998 	.word	0x20001998
 8005698:	20001990 	.word	0x20001990
 800569c:	20001984 	.word	0x20001984
 80056a0:	20001994 	.word	0x20001994

080056a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d048      	beq.n	8005748 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056b6:	2308      	movs	r3, #8
 80056b8:	425b      	negs	r3, r3
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4413      	add	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <vPortFree+0xac>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <vPortFree+0x44>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60fb      	str	r3, [r7, #12]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <vPortFree+0x62>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <vPortFree+0xac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d115      	bne.n	8005748 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <vPortFree+0xac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800572c:	f7fe fb68 	bl	8003e00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <vPortFree+0xb0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	4a06      	ldr	r2, [pc, #24]	; (8005754 <vPortFree+0xb0>)
 800573c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f000 f86c 	bl	800581c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005744:	f7fe fb6a 	bl	8003e1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20001998 	.word	0x20001998
 8005754:	20001990 	.word	0x20001990

08005758 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005762:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <prvHeapInit+0xac>)
 8005766:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3307      	adds	r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <prvHeapInit+0xac>)
 8005788:	4413      	add	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <prvHeapInit+0xb0>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005796:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <prvHeapInit+0xb0>)
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a4:	2208      	movs	r2, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a15      	ldr	r2, [pc, #84]	; (800580c <prvHeapInit+0xb4>)
 80057b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ba:	4b14      	ldr	r3, [pc, #80]	; (800580c <prvHeapInit+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <prvHeapInit+0xb4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <prvHeapInit+0xb4>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <prvHeapInit+0xb8>)
 80057e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4a09      	ldr	r2, [pc, #36]	; (8005814 <prvHeapInit+0xbc>)
 80057ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <prvHeapInit+0xc0>)
 80057f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000d84 	.word	0x20000d84
 8005808:	20001984 	.word	0x20001984
 800580c:	2000198c 	.word	0x2000198c
 8005810:	20001994 	.word	0x20001994
 8005814:	20001990 	.word	0x20001990
 8005818:	20001998 	.word	0x20001998

0800581c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <prvInsertBlockIntoFreeList+0x14>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d8f7      	bhi.n	800582a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d108      	bne.n	800585e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d118      	bne.n	80058a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d00d      	beq.n	800589a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e008      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e003      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d002      	beq.n	80058ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	20001984 	.word	0x20001984
 80058c8:	2000198c 	.word	0x2000198c

080058cc <__errno>:
 80058cc:	4b01      	ldr	r3, [pc, #4]	; (80058d4 <__errno+0x8>)
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000010 	.word	0x20000010

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	2600      	movs	r6, #0
 80058dc:	4d0c      	ldr	r5, [pc, #48]	; (8005910 <__libc_init_array+0x38>)
 80058de:	4c0d      	ldr	r4, [pc, #52]	; (8005914 <__libc_init_array+0x3c>)
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	42a6      	cmp	r6, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	f000 fcf2 	bl	80062d0 <_init>
 80058ec:	2600      	movs	r6, #0
 80058ee:	4d0a      	ldr	r5, [pc, #40]	; (8005918 <__libc_init_array+0x40>)
 80058f0:	4c0a      	ldr	r4, [pc, #40]	; (800591c <__libc_init_array+0x44>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005900:	4798      	blx	r3
 8005902:	3601      	adds	r6, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	f855 3b04 	ldr.w	r3, [r5], #4
 800590a:	4798      	blx	r3
 800590c:	3601      	adds	r6, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	080064b0 	.word	0x080064b0
 8005914:	080064b0 	.word	0x080064b0
 8005918:	080064b0 	.word	0x080064b0
 800591c:	080064b4 	.word	0x080064b4

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	4291      	cmp	r1, r2
 8005934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <memset>:
 800593c:	4603      	mov	r3, r0
 800593e:	4402      	add	r2, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <_puts_r>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	460e      	mov	r6, r1
 8005950:	4605      	mov	r5, r0
 8005952:	b118      	cbz	r0, 800595c <_puts_r+0x10>
 8005954:	6983      	ldr	r3, [r0, #24]
 8005956:	b90b      	cbnz	r3, 800595c <_puts_r+0x10>
 8005958:	f000 fa48 	bl	8005dec <__sinit>
 800595c:	69ab      	ldr	r3, [r5, #24]
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	b913      	cbnz	r3, 8005968 <_puts_r+0x1c>
 8005962:	4628      	mov	r0, r5
 8005964:	f000 fa42 	bl	8005dec <__sinit>
 8005968:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <_puts_r+0xd0>)
 800596a:	429c      	cmp	r4, r3
 800596c:	d120      	bne.n	80059b0 <_puts_r+0x64>
 800596e:	686c      	ldr	r4, [r5, #4]
 8005970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005972:	07db      	lsls	r3, r3, #31
 8005974:	d405      	bmi.n	8005982 <_puts_r+0x36>
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	0598      	lsls	r0, r3, #22
 800597a:	d402      	bmi.n	8005982 <_puts_r+0x36>
 800597c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597e:	f000 fad3 	bl	8005f28 <__retarget_lock_acquire_recursive>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	0719      	lsls	r1, r3, #28
 8005986:	d51d      	bpl.n	80059c4 <_puts_r+0x78>
 8005988:	6923      	ldr	r3, [r4, #16]
 800598a:	b1db      	cbz	r3, 80059c4 <_puts_r+0x78>
 800598c:	3e01      	subs	r6, #1
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005994:	3b01      	subs	r3, #1
 8005996:	60a3      	str	r3, [r4, #8]
 8005998:	bb39      	cbnz	r1, 80059ea <_puts_r+0x9e>
 800599a:	2b00      	cmp	r3, #0
 800599c:	da38      	bge.n	8005a10 <_puts_r+0xc4>
 800599e:	4622      	mov	r2, r4
 80059a0:	210a      	movs	r1, #10
 80059a2:	4628      	mov	r0, r5
 80059a4:	f000 f848 	bl	8005a38 <__swbuf_r>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d011      	beq.n	80059d0 <_puts_r+0x84>
 80059ac:	250a      	movs	r5, #10
 80059ae:	e011      	b.n	80059d4 <_puts_r+0x88>
 80059b0:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <_puts_r+0xd4>)
 80059b2:	429c      	cmp	r4, r3
 80059b4:	d101      	bne.n	80059ba <_puts_r+0x6e>
 80059b6:	68ac      	ldr	r4, [r5, #8]
 80059b8:	e7da      	b.n	8005970 <_puts_r+0x24>
 80059ba:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <_puts_r+0xd8>)
 80059bc:	429c      	cmp	r4, r3
 80059be:	bf08      	it	eq
 80059c0:	68ec      	ldreq	r4, [r5, #12]
 80059c2:	e7d5      	b.n	8005970 <_puts_r+0x24>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f888 	bl	8005adc <__swsetup_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0dd      	beq.n	800598c <_puts_r+0x40>
 80059d0:	f04f 35ff 	mov.w	r5, #4294967295
 80059d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_puts_r+0x9a>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	059b      	lsls	r3, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_puts_r+0x9a>
 80059e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e2:	f000 faa2 	bl	8005f2a <__retarget_lock_release_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da04      	bge.n	80059f8 <_puts_r+0xac>
 80059ee:	69a2      	ldr	r2, [r4, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	dc06      	bgt.n	8005a02 <_puts_r+0xb6>
 80059f4:	290a      	cmp	r1, #10
 80059f6:	d004      	beq.n	8005a02 <_puts_r+0xb6>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	7019      	strb	r1, [r3, #0]
 8005a00:	e7c5      	b.n	800598e <_puts_r+0x42>
 8005a02:	4622      	mov	r2, r4
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f817 	bl	8005a38 <__swbuf_r>
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d1bf      	bne.n	800598e <_puts_r+0x42>
 8005a0e:	e7df      	b.n	80059d0 <_puts_r+0x84>
 8005a10:	250a      	movs	r5, #10
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	701d      	strb	r5, [r3, #0]
 8005a1a:	e7db      	b.n	80059d4 <_puts_r+0x88>
 8005a1c:	08006470 	.word	0x08006470
 8005a20:	08006490 	.word	0x08006490
 8005a24:	08006450 	.word	0x08006450

08005a28 <puts>:
 8005a28:	4b02      	ldr	r3, [pc, #8]	; (8005a34 <puts+0xc>)
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	f7ff bf8d 	b.w	800594c <_puts_r>
 8005a32:	bf00      	nop
 8005a34:	20000010 	.word	0x20000010

08005a38 <__swbuf_r>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b118      	cbz	r0, 8005a4a <__swbuf_r+0x12>
 8005a42:	6983      	ldr	r3, [r0, #24]
 8005a44:	b90b      	cbnz	r3, 8005a4a <__swbuf_r+0x12>
 8005a46:	f000 f9d1 	bl	8005dec <__sinit>
 8005a4a:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <__swbuf_r+0x98>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d12b      	bne.n	8005aa8 <__swbuf_r+0x70>
 8005a50:	686c      	ldr	r4, [r5, #4]
 8005a52:	69a3      	ldr	r3, [r4, #24]
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	071a      	lsls	r2, r3, #28
 8005a5a:	d52f      	bpl.n	8005abc <__swbuf_r+0x84>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	b36b      	cbz	r3, 8005abc <__swbuf_r+0x84>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	b2f6      	uxtb	r6, r6
 8005a66:	1ac0      	subs	r0, r0, r3
 8005a68:	6963      	ldr	r3, [r4, #20]
 8005a6a:	4637      	mov	r7, r6
 8005a6c:	4283      	cmp	r3, r0
 8005a6e:	dc04      	bgt.n	8005a7a <__swbuf_r+0x42>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f926 	bl	8005cc4 <_fflush_r>
 8005a78:	bb30      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	60a3      	str	r3, [r4, #8]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	701e      	strb	r6, [r3, #0]
 8005a8a:	6963      	ldr	r3, [r4, #20]
 8005a8c:	4283      	cmp	r3, r0
 8005a8e:	d004      	beq.n	8005a9a <__swbuf_r+0x62>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d506      	bpl.n	8005aa4 <__swbuf_r+0x6c>
 8005a96:	2e0a      	cmp	r6, #10
 8005a98:	d104      	bne.n	8005aa4 <__swbuf_r+0x6c>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f911 	bl	8005cc4 <_fflush_r>
 8005aa2:	b988      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <__swbuf_r+0x9c>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swbuf_r+0x7a>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7cf      	b.n	8005a52 <__swbuf_r+0x1a>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <__swbuf_r+0xa0>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7ca      	b.n	8005a52 <__swbuf_r+0x1a>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f80c 	bl	8005adc <__swsetup_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0cb      	beq.n	8005a60 <__swbuf_r+0x28>
 8005ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8005acc:	e7ea      	b.n	8005aa4 <__swbuf_r+0x6c>
 8005ace:	bf00      	nop
 8005ad0:	08006470 	.word	0x08006470
 8005ad4:	08006490 	.word	0x08006490
 8005ad8:	08006450 	.word	0x08006450

08005adc <__swsetup_r>:
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <__swsetup_r+0xcc>)
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	681d      	ldr	r5, [r3, #0]
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	b125      	cbz	r5, 8005af2 <__swsetup_r+0x16>
 8005ae8:	69ab      	ldr	r3, [r5, #24]
 8005aea:	b913      	cbnz	r3, 8005af2 <__swsetup_r+0x16>
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 f97d 	bl	8005dec <__sinit>
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <__swsetup_r+0xd0>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d10f      	bne.n	8005b18 <__swsetup_r+0x3c>
 8005af8:	686c      	ldr	r4, [r5, #4]
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b00:	0719      	lsls	r1, r3, #28
 8005b02:	d42c      	bmi.n	8005b5e <__swsetup_r+0x82>
 8005b04:	06dd      	lsls	r5, r3, #27
 8005b06:	d411      	bmi.n	8005b2c <__swsetup_r+0x50>
 8005b08:	2309      	movs	r3, #9
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	e03e      	b.n	8005b96 <__swsetup_r+0xba>
 8005b18:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <__swsetup_r+0xd4>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d101      	bne.n	8005b22 <__swsetup_r+0x46>
 8005b1e:	68ac      	ldr	r4, [r5, #8]
 8005b20:	e7eb      	b.n	8005afa <__swsetup_r+0x1e>
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <__swsetup_r+0xd8>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	bf08      	it	eq
 8005b28:	68ec      	ldreq	r4, [r5, #12]
 8005b2a:	e7e6      	b.n	8005afa <__swsetup_r+0x1e>
 8005b2c:	0758      	lsls	r0, r3, #29
 8005b2e:	d512      	bpl.n	8005b56 <__swsetup_r+0x7a>
 8005b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b32:	b141      	cbz	r1, 8005b46 <__swsetup_r+0x6a>
 8005b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	d002      	beq.n	8005b42 <__swsetup_r+0x66>
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f000 fa59 	bl	8005ff4 <_free_r>
 8005b42:	2300      	movs	r3, #0
 8005b44:	6363      	str	r3, [r4, #52]	; 0x34
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6063      	str	r3, [r4, #4]
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f043 0308 	orr.w	r3, r3, #8
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	b94b      	cbnz	r3, 8005b76 <__swsetup_r+0x9a>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6c:	d003      	beq.n	8005b76 <__swsetup_r+0x9a>
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f9ff 	bl	8005f74 <__smakebuf_r>
 8005b76:	89a0      	ldrh	r0, [r4, #12]
 8005b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b7c:	f010 0301 	ands.w	r3, r0, #1
 8005b80:	d00a      	beq.n	8005b98 <__swsetup_r+0xbc>
 8005b82:	2300      	movs	r3, #0
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	6963      	ldr	r3, [r4, #20]
 8005b88:	425b      	negs	r3, r3
 8005b8a:	61a3      	str	r3, [r4, #24]
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	b943      	cbnz	r3, 8005ba2 <__swsetup_r+0xc6>
 8005b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b94:	d1ba      	bne.n	8005b0c <__swsetup_r+0x30>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	0781      	lsls	r1, r0, #30
 8005b9a:	bf58      	it	pl
 8005b9c:	6963      	ldrpl	r3, [r4, #20]
 8005b9e:	60a3      	str	r3, [r4, #8]
 8005ba0:	e7f4      	b.n	8005b8c <__swsetup_r+0xb0>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e7f7      	b.n	8005b96 <__swsetup_r+0xba>
 8005ba6:	bf00      	nop
 8005ba8:	20000010 	.word	0x20000010
 8005bac:	08006470 	.word	0x08006470
 8005bb0:	08006490 	.word	0x08006490
 8005bb4:	08006450 	.word	0x08006450

08005bb8 <__sflush_r>:
 8005bb8:	898a      	ldrh	r2, [r1, #12]
 8005bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	0710      	lsls	r0, r2, #28
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	d458      	bmi.n	8005c78 <__sflush_r+0xc0>
 8005bc6:	684b      	ldr	r3, [r1, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dc05      	bgt.n	8005bd8 <__sflush_r+0x20>
 8005bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dc02      	bgt.n	8005bd8 <__sflush_r+0x20>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bda:	2e00      	cmp	r6, #0
 8005bdc:	d0f9      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be4:	682f      	ldr	r7, [r5, #0]
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	d032      	beq.n	8005c50 <__sflush_r+0x98>
 8005bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	075a      	lsls	r2, r3, #29
 8005bf0:	d505      	bpl.n	8005bfe <__sflush_r+0x46>
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	1ac0      	subs	r0, r0, r3
 8005bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf8:	b10b      	cbz	r3, 8005bfe <__sflush_r+0x46>
 8005bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfc:	1ac0      	subs	r0, r0, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4602      	mov	r2, r0
 8005c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c04:	4628      	mov	r0, r5
 8005c06:	6a21      	ldr	r1, [r4, #32]
 8005c08:	47b0      	blx	r6
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	d106      	bne.n	8005c1e <__sflush_r+0x66>
 8005c10:	6829      	ldr	r1, [r5, #0]
 8005c12:	291d      	cmp	r1, #29
 8005c14:	d82c      	bhi.n	8005c70 <__sflush_r+0xb8>
 8005c16:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <__sflush_r+0x108>)
 8005c18:	40ca      	lsrs	r2, r1
 8005c1a:	07d6      	lsls	r6, r2, #31
 8005c1c:	d528      	bpl.n	8005c70 <__sflush_r+0xb8>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6062      	str	r2, [r4, #4]
 8005c22:	6922      	ldr	r2, [r4, #16]
 8005c24:	04d9      	lsls	r1, r3, #19
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	d504      	bpl.n	8005c34 <__sflush_r+0x7c>
 8005c2a:	1c42      	adds	r2, r0, #1
 8005c2c:	d101      	bne.n	8005c32 <__sflush_r+0x7a>
 8005c2e:	682b      	ldr	r3, [r5, #0]
 8005c30:	b903      	cbnz	r3, 8005c34 <__sflush_r+0x7c>
 8005c32:	6560      	str	r0, [r4, #84]	; 0x54
 8005c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c36:	602f      	str	r7, [r5, #0]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d0ca      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__sflush_r+0x92>
 8005c44:	4628      	mov	r0, r5
 8005c46:	f000 f9d5 	bl	8005ff4 <_free_r>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4e:	e7c1      	b.n	8005bd4 <__sflush_r+0x1c>
 8005c50:	6a21      	ldr	r1, [r4, #32]
 8005c52:	2301      	movs	r3, #1
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b0      	blx	r6
 8005c58:	1c41      	adds	r1, r0, #1
 8005c5a:	d1c7      	bne.n	8005bec <__sflush_r+0x34>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0c4      	beq.n	8005bec <__sflush_r+0x34>
 8005c62:	2b1d      	cmp	r3, #29
 8005c64:	d001      	beq.n	8005c6a <__sflush_r+0xb2>
 8005c66:	2b16      	cmp	r3, #22
 8005c68:	d101      	bne.n	8005c6e <__sflush_r+0xb6>
 8005c6a:	602f      	str	r7, [r5, #0]
 8005c6c:	e7b1      	b.n	8005bd2 <__sflush_r+0x1a>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	e7ad      	b.n	8005bd4 <__sflush_r+0x1c>
 8005c78:	690f      	ldr	r7, [r1, #16]
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	d0a9      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005c7e:	0793      	lsls	r3, r2, #30
 8005c80:	bf18      	it	ne
 8005c82:	2300      	movne	r3, #0
 8005c84:	680e      	ldr	r6, [r1, #0]
 8005c86:	bf08      	it	eq
 8005c88:	694b      	ldreq	r3, [r1, #20]
 8005c8a:	eba6 0807 	sub.w	r8, r6, r7
 8005c8e:	600f      	str	r7, [r1, #0]
 8005c90:	608b      	str	r3, [r1, #8]
 8005c92:	f1b8 0f00 	cmp.w	r8, #0
 8005c96:	dd9c      	ble.n	8005bd2 <__sflush_r+0x1a>
 8005c98:	4643      	mov	r3, r8
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	6a21      	ldr	r1, [r4, #32]
 8005ca0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca2:	47b0      	blx	r6
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	dc06      	bgt.n	8005cb6 <__sflush_r+0xfe>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	e78e      	b.n	8005bd4 <__sflush_r+0x1c>
 8005cb6:	4407      	add	r7, r0
 8005cb8:	eba8 0800 	sub.w	r8, r8, r0
 8005cbc:	e7e9      	b.n	8005c92 <__sflush_r+0xda>
 8005cbe:	bf00      	nop
 8005cc0:	20400001 	.word	0x20400001

08005cc4 <_fflush_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b913      	cbnz	r3, 8005cd4 <_fflush_r+0x10>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	b118      	cbz	r0, 8005cde <_fflush_r+0x1a>
 8005cd6:	6983      	ldr	r3, [r0, #24]
 8005cd8:	b90b      	cbnz	r3, 8005cde <_fflush_r+0x1a>
 8005cda:	f000 f887 	bl	8005dec <__sinit>
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <_fflush_r+0x6c>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d11b      	bne.n	8005d1c <_fflush_r+0x58>
 8005ce4:	686c      	ldr	r4, [r5, #4]
 8005ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ef      	beq.n	8005cce <_fflush_r+0xa>
 8005cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf0:	07d0      	lsls	r0, r2, #31
 8005cf2:	d404      	bmi.n	8005cfe <_fflush_r+0x3a>
 8005cf4:	0599      	lsls	r1, r3, #22
 8005cf6:	d402      	bmi.n	8005cfe <_fflush_r+0x3a>
 8005cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfa:	f000 f915 	bl	8005f28 <__retarget_lock_acquire_recursive>
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4621      	mov	r1, r4
 8005d02:	f7ff ff59 	bl	8005bb8 <__sflush_r>
 8005d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d08:	4605      	mov	r5, r0
 8005d0a:	07da      	lsls	r2, r3, #31
 8005d0c:	d4e0      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	059b      	lsls	r3, r3, #22
 8005d12:	d4dd      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f000 f908 	bl	8005f2a <__retarget_lock_release_recursive>
 8005d1a:	e7d9      	b.n	8005cd0 <_fflush_r+0xc>
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <_fflush_r+0x70>)
 8005d1e:	429c      	cmp	r4, r3
 8005d20:	d101      	bne.n	8005d26 <_fflush_r+0x62>
 8005d22:	68ac      	ldr	r4, [r5, #8]
 8005d24:	e7df      	b.n	8005ce6 <_fflush_r+0x22>
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <_fflush_r+0x74>)
 8005d28:	429c      	cmp	r4, r3
 8005d2a:	bf08      	it	eq
 8005d2c:	68ec      	ldreq	r4, [r5, #12]
 8005d2e:	e7da      	b.n	8005ce6 <_fflush_r+0x22>
 8005d30:	08006470 	.word	0x08006470
 8005d34:	08006490 	.word	0x08006490
 8005d38:	08006450 	.word	0x08006450

08005d3c <std>:
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	b510      	push	{r4, lr}
 8005d40:	4604      	mov	r4, r0
 8005d42:	e9c0 3300 	strd	r3, r3, [r0]
 8005d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4a:	6083      	str	r3, [r0, #8]
 8005d4c:	8181      	strh	r1, [r0, #12]
 8005d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d50:	81c2      	strh	r2, [r0, #14]
 8005d52:	6183      	str	r3, [r0, #24]
 8005d54:	4619      	mov	r1, r3
 8005d56:	2208      	movs	r2, #8
 8005d58:	305c      	adds	r0, #92	; 0x5c
 8005d5a:	f7ff fdef 	bl	800593c <memset>
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <std+0x38>)
 8005d60:	6224      	str	r4, [r4, #32]
 8005d62:	6263      	str	r3, [r4, #36]	; 0x24
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <std+0x3c>)
 8005d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <std+0x40>)
 8005d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <std+0x44>)
 8005d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	bf00      	nop
 8005d74:	08006161 	.word	0x08006161
 8005d78:	08006183 	.word	0x08006183
 8005d7c:	080061bb 	.word	0x080061bb
 8005d80:	080061df 	.word	0x080061df

08005d84 <_cleanup_r>:
 8005d84:	4901      	ldr	r1, [pc, #4]	; (8005d8c <_cleanup_r+0x8>)
 8005d86:	f000 b8af 	b.w	8005ee8 <_fwalk_reent>
 8005d8a:	bf00      	nop
 8005d8c:	08005cc5 	.word	0x08005cc5

08005d90 <__sfmoreglue>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	2568      	movs	r5, #104	; 0x68
 8005d94:	1e4a      	subs	r2, r1, #1
 8005d96:	4355      	muls	r5, r2
 8005d98:	460e      	mov	r6, r1
 8005d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d9e:	f000 f975 	bl	800608c <_malloc_r>
 8005da2:	4604      	mov	r4, r0
 8005da4:	b140      	cbz	r0, 8005db8 <__sfmoreglue+0x28>
 8005da6:	2100      	movs	r1, #0
 8005da8:	e9c0 1600 	strd	r1, r6, [r0]
 8005dac:	300c      	adds	r0, #12
 8005dae:	60a0      	str	r0, [r4, #8]
 8005db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db4:	f7ff fdc2 	bl	800593c <memset>
 8005db8:	4620      	mov	r0, r4
 8005dba:	bd70      	pop	{r4, r5, r6, pc}

08005dbc <__sfp_lock_acquire>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	; (8005dc4 <__sfp_lock_acquire+0x8>)
 8005dbe:	f000 b8b3 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	20001adc 	.word	0x20001adc

08005dc8 <__sfp_lock_release>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__sfp_lock_release+0x8>)
 8005dca:	f000 b8ae 	b.w	8005f2a <__retarget_lock_release_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20001adc 	.word	0x20001adc

08005dd4 <__sinit_lock_acquire>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__sinit_lock_acquire+0x8>)
 8005dd6:	f000 b8a7 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20001ad7 	.word	0x20001ad7

08005de0 <__sinit_lock_release>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sinit_lock_release+0x8>)
 8005de2:	f000 b8a2 	b.w	8005f2a <__retarget_lock_release_recursive>
 8005de6:	bf00      	nop
 8005de8:	20001ad7 	.word	0x20001ad7

08005dec <__sinit>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4604      	mov	r4, r0
 8005df0:	f7ff fff0 	bl	8005dd4 <__sinit_lock_acquire>
 8005df4:	69a3      	ldr	r3, [r4, #24]
 8005df6:	b11b      	cbz	r3, 8005e00 <__sinit+0x14>
 8005df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfc:	f7ff bff0 	b.w	8005de0 <__sinit_lock_release>
 8005e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e04:	6523      	str	r3, [r4, #80]	; 0x50
 8005e06:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <__sinit+0x68>)
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <__sinit+0x6c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	bf08      	it	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	4620      	mov	r0, r4
 8005e16:	bf08      	it	eq
 8005e18:	61a3      	streq	r3, [r4, #24]
 8005e1a:	f000 f81f 	bl	8005e5c <__sfp>
 8005e1e:	6060      	str	r0, [r4, #4]
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 f81b 	bl	8005e5c <__sfp>
 8005e26:	60a0      	str	r0, [r4, #8]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f817 	bl	8005e5c <__sfp>
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2104      	movs	r1, #4
 8005e32:	60e0      	str	r0, [r4, #12]
 8005e34:	6860      	ldr	r0, [r4, #4]
 8005e36:	f7ff ff81 	bl	8005d3c <std>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	2109      	movs	r1, #9
 8005e3e:	68a0      	ldr	r0, [r4, #8]
 8005e40:	f7ff ff7c 	bl	8005d3c <std>
 8005e44:	2202      	movs	r2, #2
 8005e46:	2112      	movs	r1, #18
 8005e48:	68e0      	ldr	r0, [r4, #12]
 8005e4a:	f7ff ff77 	bl	8005d3c <std>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61a3      	str	r3, [r4, #24]
 8005e52:	e7d1      	b.n	8005df8 <__sinit+0xc>
 8005e54:	0800644c 	.word	0x0800644c
 8005e58:	08005d85 	.word	0x08005d85

08005e5c <__sfp>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	4607      	mov	r7, r0
 8005e60:	f7ff ffac 	bl	8005dbc <__sfp_lock_acquire>
 8005e64:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <__sfp+0x84>)
 8005e66:	681e      	ldr	r6, [r3, #0]
 8005e68:	69b3      	ldr	r3, [r6, #24]
 8005e6a:	b913      	cbnz	r3, 8005e72 <__sfp+0x16>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff ffbd 	bl	8005dec <__sinit>
 8005e72:	3648      	adds	r6, #72	; 0x48
 8005e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	d503      	bpl.n	8005e84 <__sfp+0x28>
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	b30b      	cbz	r3, 8005ec4 <__sfp+0x68>
 8005e80:	6836      	ldr	r6, [r6, #0]
 8005e82:	e7f7      	b.n	8005e74 <__sfp+0x18>
 8005e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e88:	b9d5      	cbnz	r5, 8005ec0 <__sfp+0x64>
 8005e8a:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <__sfp+0x88>)
 8005e8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e90:	60e3      	str	r3, [r4, #12]
 8005e92:	6665      	str	r5, [r4, #100]	; 0x64
 8005e94:	f000 f847 	bl	8005f26 <__retarget_lock_init_recursive>
 8005e98:	f7ff ff96 	bl	8005dc8 <__sfp_lock_release>
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ea8:	6025      	str	r5, [r4, #0]
 8005eaa:	61a5      	str	r5, [r4, #24]
 8005eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eb0:	f7ff fd44 	bl	800593c <memset>
 8005eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec0:	3468      	adds	r4, #104	; 0x68
 8005ec2:	e7d9      	b.n	8005e78 <__sfp+0x1c>
 8005ec4:	2104      	movs	r1, #4
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7ff ff62 	bl	8005d90 <__sfmoreglue>
 8005ecc:	4604      	mov	r4, r0
 8005ece:	6030      	str	r0, [r6, #0]
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1d5      	bne.n	8005e80 <__sfp+0x24>
 8005ed4:	f7ff ff78 	bl	8005dc8 <__sfp_lock_release>
 8005ed8:	230c      	movs	r3, #12
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	e7ee      	b.n	8005ebc <__sfp+0x60>
 8005ede:	bf00      	nop
 8005ee0:	0800644c 	.word	0x0800644c
 8005ee4:	ffff0001 	.word	0xffff0001

08005ee8 <_fwalk_reent>:
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	4606      	mov	r6, r0
 8005eee:	4688      	mov	r8, r1
 8005ef0:	2700      	movs	r7, #0
 8005ef2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005efa:	f1b9 0901 	subs.w	r9, r9, #1
 8005efe:	d505      	bpl.n	8005f0c <_fwalk_reent+0x24>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	d1f7      	bne.n	8005ef6 <_fwalk_reent+0xe>
 8005f06:	4638      	mov	r0, r7
 8005f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0c:	89ab      	ldrh	r3, [r5, #12]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d907      	bls.n	8005f22 <_fwalk_reent+0x3a>
 8005f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f16:	3301      	adds	r3, #1
 8005f18:	d003      	beq.n	8005f22 <_fwalk_reent+0x3a>
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	47c0      	blx	r8
 8005f20:	4307      	orrs	r7, r0
 8005f22:	3568      	adds	r5, #104	; 0x68
 8005f24:	e7e9      	b.n	8005efa <_fwalk_reent+0x12>

08005f26 <__retarget_lock_init_recursive>:
 8005f26:	4770      	bx	lr

08005f28 <__retarget_lock_acquire_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_release_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <__swhatbuf_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	460e      	mov	r6, r1
 8005f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f34:	4614      	mov	r4, r2
 8005f36:	2900      	cmp	r1, #0
 8005f38:	461d      	mov	r5, r3
 8005f3a:	b096      	sub	sp, #88	; 0x58
 8005f3c:	da07      	bge.n	8005f4e <__swhatbuf_r+0x22>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	89b3      	ldrh	r3, [r6, #12]
 8005f44:	061a      	lsls	r2, r3, #24
 8005f46:	d410      	bmi.n	8005f6a <__swhatbuf_r+0x3e>
 8005f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4c:	e00e      	b.n	8005f6c <__swhatbuf_r+0x40>
 8005f4e:	466a      	mov	r2, sp
 8005f50:	f000 f96c 	bl	800622c <_fstat_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	dbf2      	blt.n	8005f3e <__swhatbuf_r+0x12>
 8005f58:	9a01      	ldr	r2, [sp, #4]
 8005f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f62:	425a      	negs	r2, r3
 8005f64:	415a      	adcs	r2, r3
 8005f66:	602a      	str	r2, [r5, #0]
 8005f68:	e7ee      	b.n	8005f48 <__swhatbuf_r+0x1c>
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	b016      	add	sp, #88	; 0x58
 8005f72:	bd70      	pop	{r4, r5, r6, pc}

08005f74 <__smakebuf_r>:
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f78:	079d      	lsls	r5, r3, #30
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	d507      	bpl.n	8005f90 <__smakebuf_r+0x1c>
 8005f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	6163      	str	r3, [r4, #20]
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	466a      	mov	r2, sp
 8005f92:	ab01      	add	r3, sp, #4
 8005f94:	f7ff ffca 	bl	8005f2c <__swhatbuf_r>
 8005f98:	9900      	ldr	r1, [sp, #0]
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f875 	bl	800608c <_malloc_r>
 8005fa2:	b948      	cbnz	r0, 8005fb8 <__smakebuf_r+0x44>
 8005fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa8:	059a      	lsls	r2, r3, #22
 8005faa:	d4ef      	bmi.n	8005f8c <__smakebuf_r+0x18>
 8005fac:	f023 0303 	bic.w	r3, r3, #3
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	e7e3      	b.n	8005f80 <__smakebuf_r+0xc>
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <__smakebuf_r+0x7c>)
 8005fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	9b00      	ldr	r3, [sp, #0]
 8005fc8:	6120      	str	r0, [r4, #16]
 8005fca:	6163      	str	r3, [r4, #20]
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	b15b      	cbz	r3, 8005fe8 <__smakebuf_r+0x74>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd6:	f000 f93b 	bl	8006250 <_isatty_r>
 8005fda:	b128      	cbz	r0, 8005fe8 <__smakebuf_r+0x74>
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	89a0      	ldrh	r0, [r4, #12]
 8005fea:	4305      	orrs	r5, r0
 8005fec:	81a5      	strh	r5, [r4, #12]
 8005fee:	e7cd      	b.n	8005f8c <__smakebuf_r+0x18>
 8005ff0:	08005d85 	.word	0x08005d85

08005ff4 <_free_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	d043      	beq.n	8006084 <_free_r+0x90>
 8005ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006000:	1f0c      	subs	r4, r1, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	bfb8      	it	lt
 8006006:	18e4      	addlt	r4, r4, r3
 8006008:	f000 f944 	bl	8006294 <__malloc_lock>
 800600c:	4a1e      	ldr	r2, [pc, #120]	; (8006088 <_free_r+0x94>)
 800600e:	6813      	ldr	r3, [r2, #0]
 8006010:	4610      	mov	r0, r2
 8006012:	b933      	cbnz	r3, 8006022 <_free_r+0x2e>
 8006014:	6063      	str	r3, [r4, #4]
 8006016:	6014      	str	r4, [r2, #0]
 8006018:	4628      	mov	r0, r5
 800601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601e:	f000 b93f 	b.w	80062a0 <__malloc_unlock>
 8006022:	42a3      	cmp	r3, r4
 8006024:	d90a      	bls.n	800603c <_free_r+0x48>
 8006026:	6821      	ldr	r1, [r4, #0]
 8006028:	1862      	adds	r2, r4, r1
 800602a:	4293      	cmp	r3, r2
 800602c:	bf01      	itttt	eq
 800602e:	681a      	ldreq	r2, [r3, #0]
 8006030:	685b      	ldreq	r3, [r3, #4]
 8006032:	1852      	addeq	r2, r2, r1
 8006034:	6022      	streq	r2, [r4, #0]
 8006036:	6063      	str	r3, [r4, #4]
 8006038:	6004      	str	r4, [r0, #0]
 800603a:	e7ed      	b.n	8006018 <_free_r+0x24>
 800603c:	461a      	mov	r2, r3
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	b10b      	cbz	r3, 8006046 <_free_r+0x52>
 8006042:	42a3      	cmp	r3, r4
 8006044:	d9fa      	bls.n	800603c <_free_r+0x48>
 8006046:	6811      	ldr	r1, [r2, #0]
 8006048:	1850      	adds	r0, r2, r1
 800604a:	42a0      	cmp	r0, r4
 800604c:	d10b      	bne.n	8006066 <_free_r+0x72>
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	4401      	add	r1, r0
 8006052:	1850      	adds	r0, r2, r1
 8006054:	4283      	cmp	r3, r0
 8006056:	6011      	str	r1, [r2, #0]
 8006058:	d1de      	bne.n	8006018 <_free_r+0x24>
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4401      	add	r1, r0
 8006060:	6011      	str	r1, [r2, #0]
 8006062:	6053      	str	r3, [r2, #4]
 8006064:	e7d8      	b.n	8006018 <_free_r+0x24>
 8006066:	d902      	bls.n	800606e <_free_r+0x7a>
 8006068:	230c      	movs	r3, #12
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	e7d4      	b.n	8006018 <_free_r+0x24>
 800606e:	6820      	ldr	r0, [r4, #0]
 8006070:	1821      	adds	r1, r4, r0
 8006072:	428b      	cmp	r3, r1
 8006074:	bf01      	itttt	eq
 8006076:	6819      	ldreq	r1, [r3, #0]
 8006078:	685b      	ldreq	r3, [r3, #4]
 800607a:	1809      	addeq	r1, r1, r0
 800607c:	6021      	streq	r1, [r4, #0]
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	6054      	str	r4, [r2, #4]
 8006082:	e7c9      	b.n	8006018 <_free_r+0x24>
 8006084:	bd38      	pop	{r3, r4, r5, pc}
 8006086:	bf00      	nop
 8006088:	2000199c 	.word	0x2000199c

0800608c <_malloc_r>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	1ccd      	adds	r5, r1, #3
 8006090:	f025 0503 	bic.w	r5, r5, #3
 8006094:	3508      	adds	r5, #8
 8006096:	2d0c      	cmp	r5, #12
 8006098:	bf38      	it	cc
 800609a:	250c      	movcc	r5, #12
 800609c:	2d00      	cmp	r5, #0
 800609e:	4606      	mov	r6, r0
 80060a0:	db01      	blt.n	80060a6 <_malloc_r+0x1a>
 80060a2:	42a9      	cmp	r1, r5
 80060a4:	d903      	bls.n	80060ae <_malloc_r+0x22>
 80060a6:	230c      	movs	r3, #12
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	2000      	movs	r0, #0
 80060ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ae:	f000 f8f1 	bl	8006294 <__malloc_lock>
 80060b2:	4921      	ldr	r1, [pc, #132]	; (8006138 <_malloc_r+0xac>)
 80060b4:	680a      	ldr	r2, [r1, #0]
 80060b6:	4614      	mov	r4, r2
 80060b8:	b99c      	cbnz	r4, 80060e2 <_malloc_r+0x56>
 80060ba:	4f20      	ldr	r7, [pc, #128]	; (800613c <_malloc_r+0xb0>)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	b923      	cbnz	r3, 80060ca <_malloc_r+0x3e>
 80060c0:	4621      	mov	r1, r4
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 f83c 	bl	8006140 <_sbrk_r>
 80060c8:	6038      	str	r0, [r7, #0]
 80060ca:	4629      	mov	r1, r5
 80060cc:	4630      	mov	r0, r6
 80060ce:	f000 f837 	bl	8006140 <_sbrk_r>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	d123      	bne.n	800611e <_malloc_r+0x92>
 80060d6:	230c      	movs	r3, #12
 80060d8:	4630      	mov	r0, r6
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f000 f8e0 	bl	80062a0 <__malloc_unlock>
 80060e0:	e7e3      	b.n	80060aa <_malloc_r+0x1e>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	1b5b      	subs	r3, r3, r5
 80060e6:	d417      	bmi.n	8006118 <_malloc_r+0x8c>
 80060e8:	2b0b      	cmp	r3, #11
 80060ea:	d903      	bls.n	80060f4 <_malloc_r+0x68>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	441c      	add	r4, r3
 80060f0:	6025      	str	r5, [r4, #0]
 80060f2:	e004      	b.n	80060fe <_malloc_r+0x72>
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	42a2      	cmp	r2, r4
 80060f8:	bf0c      	ite	eq
 80060fa:	600b      	streq	r3, [r1, #0]
 80060fc:	6053      	strne	r3, [r2, #4]
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f8ce 	bl	80062a0 <__malloc_unlock>
 8006104:	f104 000b 	add.w	r0, r4, #11
 8006108:	1d23      	adds	r3, r4, #4
 800610a:	f020 0007 	bic.w	r0, r0, #7
 800610e:	1ac2      	subs	r2, r0, r3
 8006110:	d0cc      	beq.n	80060ac <_malloc_r+0x20>
 8006112:	1a1b      	subs	r3, r3, r0
 8006114:	50a3      	str	r3, [r4, r2]
 8006116:	e7c9      	b.n	80060ac <_malloc_r+0x20>
 8006118:	4622      	mov	r2, r4
 800611a:	6864      	ldr	r4, [r4, #4]
 800611c:	e7cc      	b.n	80060b8 <_malloc_r+0x2c>
 800611e:	1cc4      	adds	r4, r0, #3
 8006120:	f024 0403 	bic.w	r4, r4, #3
 8006124:	42a0      	cmp	r0, r4
 8006126:	d0e3      	beq.n	80060f0 <_malloc_r+0x64>
 8006128:	1a21      	subs	r1, r4, r0
 800612a:	4630      	mov	r0, r6
 800612c:	f000 f808 	bl	8006140 <_sbrk_r>
 8006130:	3001      	adds	r0, #1
 8006132:	d1dd      	bne.n	80060f0 <_malloc_r+0x64>
 8006134:	e7cf      	b.n	80060d6 <_malloc_r+0x4a>
 8006136:	bf00      	nop
 8006138:	2000199c 	.word	0x2000199c
 800613c:	200019a0 	.word	0x200019a0

08006140 <_sbrk_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	2300      	movs	r3, #0
 8006144:	4d05      	ldr	r5, [pc, #20]	; (800615c <_sbrk_r+0x1c>)
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fa fa7c 	bl	8000648 <_sbrk>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_sbrk_r+0x1a>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_sbrk_r+0x1a>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	20001ae0 	.word	0x20001ae0

08006160 <__sread>:
 8006160:	b510      	push	{r4, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	f000 f8a0 	bl	80062ac <_read_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	bfab      	itete	ge
 8006170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006172:	89a3      	ldrhlt	r3, [r4, #12]
 8006174:	181b      	addge	r3, r3, r0
 8006176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617a:	bfac      	ite	ge
 800617c:	6563      	strge	r3, [r4, #84]	; 0x54
 800617e:	81a3      	strhlt	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__swrite>:
 8006182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	461f      	mov	r7, r3
 8006188:	898b      	ldrh	r3, [r1, #12]
 800618a:	4605      	mov	r5, r0
 800618c:	05db      	lsls	r3, r3, #23
 800618e:	460c      	mov	r4, r1
 8006190:	4616      	mov	r6, r2
 8006192:	d505      	bpl.n	80061a0 <__swrite+0x1e>
 8006194:	2302      	movs	r3, #2
 8006196:	2200      	movs	r2, #0
 8006198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619c:	f000 f868 	bl	8006270 <_lseek_r>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	4632      	mov	r2, r6
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a8:	81a3      	strh	r3, [r4, #12]
 80061aa:	4628      	mov	r0, r5
 80061ac:	463b      	mov	r3, r7
 80061ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	f000 b817 	b.w	80061e8 <_write_r>

080061ba <__sseek>:
 80061ba:	b510      	push	{r4, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 f855 	bl	8006270 <_lseek_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	bf15      	itete	ne
 80061cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061d6:	81a3      	strheq	r3, [r4, #12]
 80061d8:	bf18      	it	ne
 80061da:	81a3      	strhne	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__sclose>:
 80061de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e2:	f000 b813 	b.w	800620c <_close_r>
	...

080061e8 <_write_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	4611      	mov	r1, r2
 80061f0:	2200      	movs	r2, #0
 80061f2:	4d05      	ldr	r5, [pc, #20]	; (8006208 <_write_r+0x20>)
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fa fb30 	bl	800085c <_write>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_write_r+0x1e>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_write_r+0x1e>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	20001ae0 	.word	0x20001ae0

0800620c <_close_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	2300      	movs	r3, #0
 8006210:	4d05      	ldr	r5, [pc, #20]	; (8006228 <_close_r+0x1c>)
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fa f9e5 	bl	80005e6 <_close>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_close_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_close_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20001ae0 	.word	0x20001ae0

0800622c <_fstat_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	2300      	movs	r3, #0
 8006230:	4d06      	ldr	r5, [pc, #24]	; (800624c <_fstat_r+0x20>)
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	f7fa f9df 	bl	80005fc <_fstat>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d102      	bne.n	8006248 <_fstat_r+0x1c>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	b103      	cbz	r3, 8006248 <_fstat_r+0x1c>
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	bf00      	nop
 800624c:	20001ae0 	.word	0x20001ae0

08006250 <_isatty_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	2300      	movs	r3, #0
 8006254:	4d05      	ldr	r5, [pc, #20]	; (800626c <_isatty_r+0x1c>)
 8006256:	4604      	mov	r4, r0
 8006258:	4608      	mov	r0, r1
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	f7fa f9dd 	bl	800061a <_isatty>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_isatty_r+0x1a>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_isatty_r+0x1a>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20001ae0 	.word	0x20001ae0

08006270 <_lseek_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	2200      	movs	r2, #0
 800627a:	4d05      	ldr	r5, [pc, #20]	; (8006290 <_lseek_r+0x20>)
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fa f9d5 	bl	800062e <_lseek>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_lseek_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_lseek_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20001ae0 	.word	0x20001ae0

08006294 <__malloc_lock>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__malloc_lock+0x8>)
 8006296:	f7ff be47 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	20001ad8 	.word	0x20001ad8

080062a0 <__malloc_unlock>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__malloc_unlock+0x8>)
 80062a2:	f7ff be42 	b.w	8005f2a <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	20001ad8 	.word	0x20001ad8

080062ac <_read_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	2200      	movs	r2, #0
 80062b6:	4d05      	ldr	r5, [pc, #20]	; (80062cc <_read_r+0x20>)
 80062b8:	602a      	str	r2, [r5, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	f7fa f976 	bl	80005ac <_read>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d102      	bne.n	80062ca <_read_r+0x1e>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	b103      	cbz	r3, 80062ca <_read_r+0x1e>
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	20001ae0 	.word	0x20001ae0

080062d0 <_init>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr

080062dc <_fini>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr
