
SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006630  08006630  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006630  08006630  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006630  08006630  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006634  08006634  00016634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000070  080066a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  080066a8  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f96  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c84  00000000  00000000  0003302f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00035cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  00036860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c2  00000000  00000000  00037318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000faf8  00000000  00000000  00050cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086da2  00000000  00000000  000607d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000e75c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800645c 	.word	0x0800645c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800645c 	.word	0x0800645c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <MX_DMA_Init+0x48>)
 8000168:	695b      	ldr	r3, [r3, #20]
 800016a:	4a0f      	ldr	r2, [pc, #60]	; (80001a8 <MX_DMA_Init+0x48>)
 800016c:	f043 0301 	orr.w	r3, r3, #1
 8000170:	6153      	str	r3, [r2, #20]
 8000172:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <MX_DMA_Init+0x48>)
 8000174:	695b      	ldr	r3, [r3, #20]
 8000176:	f003 0301 	and.w	r3, r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2100      	movs	r1, #0
 8000182:	200d      	movs	r0, #13
 8000184:	f000 ff9b 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000188:	200d      	movs	r0, #13
 800018a:	f000 ffb4 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2100      	movs	r1, #0
 8000192:	200f      	movs	r0, #15
 8000194:	f000 ff93 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000198:	200f      	movs	r0, #15
 800019a:	f000 ffac 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000

080001ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b2:	f107 0310 	add.w	r3, r7, #16
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c0:	4b2d      	ldr	r3, [pc, #180]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a2c      	ldr	r2, [pc, #176]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001c6:	f043 0310 	orr.w	r3, r3, #16
 80001ca:	6193      	str	r3, [r2, #24]
 80001cc:	4b2a      	ldr	r3, [pc, #168]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	f003 0310 	and.w	r3, r3, #16
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d8:	4b27      	ldr	r3, [pc, #156]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a26      	ldr	r2, [pc, #152]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b21      	ldr	r3, [pc, #132]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a20      	ldr	r2, [pc, #128]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <MX_GPIO_Init+0xcc>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000208:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <MX_GPIO_Init+0xcc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <MX_GPIO_Init+0xcc>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <MX_GPIO_Init+0xcc>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	603b      	str	r3, [r7, #0]
 800021e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2120      	movs	r1, #32
 8000224:	4815      	ldr	r0, [pc, #84]	; (800027c <MX_GPIO_Init+0xd0>)
 8000226:	f001 fbaf 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800022a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800022e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <MX_GPIO_Init+0xd4>)
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000238:	f107 0310 	add.w	r3, r7, #16
 800023c:	4619      	mov	r1, r3
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <MX_GPIO_Init+0xd8>)
 8000240:	f001 fa1e 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000244:	2320      	movs	r3, #32
 8000246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000248:	2301      	movs	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024c:	2300      	movs	r3, #0
 800024e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000250:	2302      	movs	r3, #2
 8000252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000254:	f107 0310 	add.w	r3, r7, #16
 8000258:	4619      	mov	r1, r3
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <MX_GPIO_Init+0xd0>)
 800025c:	f001 fa10 	bl	8001680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2100      	movs	r1, #0
 8000264:	2028      	movs	r0, #40	; 0x28
 8000266:	f000 ff2a 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800026a:	2028      	movs	r0, #40	; 0x28
 800026c:	f000 ff43 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 8000270:	bf00      	nop
 8000272:	3720      	adds	r7, #32
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40021000 	.word	0x40021000
 800027c:	40010800 	.word	0x40010800
 8000280:	10110000 	.word	0x10110000
 8000284:	40011000 	.word	0x40011000

08000288 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_I2C1_Init+0x50>)
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <MX_I2C1_Init+0x54>)
 8000290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <MX_I2C1_Init+0x50>)
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x58>)
 8000296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002c6:	f001 fb99 	bl	80019fc <HAL_I2C_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 f8c3 	bl	800045a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200004cc 	.word	0x200004cc
 80002dc:	40005400 	.word	0x40005400
 80002e0:	00061a80 	.word	0x00061a80

080002e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a25      	ldr	r2, [pc, #148]	; (8000394 <HAL_I2C_MspInit+0xb0>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d142      	bne.n	800038a <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <HAL_I2C_MspInit+0xb4>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <HAL_I2C_MspInit+0xb4>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <HAL_I2C_MspInit+0xb4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800031c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000322:	2312      	movs	r3, #18
 8000324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000326:	2303      	movs	r3, #3
 8000328:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	4619      	mov	r1, r3
 8000330:	481a      	ldr	r0, [pc, #104]	; (800039c <HAL_I2C_MspInit+0xb8>)
 8000332:	f001 f9a5 	bl	8001680 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <HAL_I2C_MspInit+0xbc>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
 800033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
 8000344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	627b      	str	r3, [r7, #36]	; 0x24
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <HAL_I2C_MspInit+0xbc>)
 800034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000350:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <HAL_I2C_MspInit+0xb4>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a10      	ldr	r2, [pc, #64]	; (8000398 <HAL_I2C_MspInit+0xb4>)
 8000358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <HAL_I2C_MspInit+0xb4>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	201f      	movs	r0, #31
 8000370:	f000 fea5 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000374:	201f      	movs	r0, #31
 8000376:	f000 febe 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	2020      	movs	r0, #32
 8000380:	f000 fe9d 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000384:	2020      	movs	r0, #32
 8000386:	f000 feb6 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800038a:	bf00      	nop
 800038c:	3728      	adds	r7, #40	; 0x28
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40005400 	.word	0x40005400
 8000398:	40021000 	.word	0x40021000
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010000 	.word	0x40010000

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 fd2c 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f814 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f7ff fefc 	bl	80001ac <MX_GPIO_Init>
  MX_DMA_Init();
 80003b4:	f7ff fed4 	bl	8000160 <MX_DMA_Init>
  MX_I2C1_Init();
 80003b8:	f7ff ff66 	bl	8000288 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80003bc:	f000 fb8c 	bl	8000ad8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80003c0:	f000 fbba 	bl	8000b38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80003c4:	f000 f8b2 	bl	800052c <ssd1306_Init>

//  uint8_t str1[] = "Hello World!\n\r";
//  uint8_t received1 = '\0';
//  HAL_StatusTypeDef rcvStat1;
  printf("Nucleo F103RB Rev 0.1\r\n");
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <main+0x30>)
 80003ca:	f004 ffc7 	bl	800535c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  ssd1306_test();
	  Terminal_Task();
 80003ce:	f000 fa9f 	bl	8000910 <Terminal_Task>
 80003d2:	e7fc      	b.n	80003ce <main+0x2a>
 80003d4:	08006474 	.word	0x08006474

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b090      	sub	sp, #64	; 0x40
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 ff16 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fe:	2301      	movs	r3, #1
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000402:	2310      	movs	r3, #16
 8000404:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800040a:	2300      	movs	r3, #0
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800040e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fc1d 	bl	8003c58 <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000424:	f000 f819 	bl	800045a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f003 fe88 	bl	8004158 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800044e:	f000 f804 	bl	800045a <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	; 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045e:	b672      	cpsid	i
}
 8000460:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000462:	e7fe      	b.n	8000462 <Error_Handler+0x8>

08000464 <Serial3_ReadBuff>:
#define SERIAL3_RX_SIZE          ((SERIAL3_RX_BUFF_HEAD + (SERIAL3_BUFF_SIZE+1) - g_serial3_RxBufferTail) & SERIAL3_BUFF_SIZE)
#define SERIAL3_RX_BUFF_CLEAR    (g_serial3_RxBufferTail = SERIAL3_RX_BUFF_HEAD);


u32 Serial3_ReadBuff(u8 *buff, u32 size)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
	u32 i;
	u32 cnt = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < size; i++)
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	e01e      	b.n	80004b6 <Serial3_ReadBuff+0x52>
	{
		if (0 == SERIAL3_RX_SIZE) break; // Empty check
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <Serial3_ReadBuff+0x6c>)
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <Serial3_ReadBuff+0x70>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4413      	add	r3, r2
 8000482:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8000486:	3301      	adds	r3, #1
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d018      	beq.n	80004c0 <Serial3_ReadBuff+0x5c>
		buff[i] = g_serial3_RxBuffer[g_serial3_RxBufferTail];
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <Serial3_ReadBuff+0x70>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	440b      	add	r3, r1
 8000498:	490f      	ldr	r1, [pc, #60]	; (80004d8 <Serial3_ReadBuff+0x74>)
 800049a:	5c8a      	ldrb	r2, [r1, r2]
 800049c:	701a      	strb	r2, [r3, #0]
		g_serial3_RxBufferTail = (g_serial3_RxBufferTail + 1) & SERIAL3_BUFF_SIZE;
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <Serial3_ReadBuff+0x70>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <Serial3_ReadBuff+0x70>)
 80004a8:	6013      	str	r3, [r2, #0]
		cnt++;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < size; i++)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3301      	adds	r3, #1
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d3dc      	bcc.n	8000478 <Serial3_ReadBuff+0x14>
 80004be:	e000      	b.n	80004c2 <Serial3_ReadBuff+0x5e>
		if (0 == SERIAL3_RX_SIZE) break; // Empty check
 80004c0:	bf00      	nop
	}

	return cnt;
 80004c2:	68bb      	ldr	r3, [r7, #8]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40020030 	.word	0x40020030
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	20000620 	.word	0x20000620

080004dc <Serial3_Flush>:


void Serial3_Flush(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	SERIAL3_RX_BUFF_CLEAR;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <Serial3_Flush+0x18>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <Serial3_Flush+0x1c>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40020030 	.word	0x40020030
 80004f8:	2000008c 	.word	0x2000008c

080004fc <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000506:	230a      	movs	r3, #10
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	2200      	movs	r2, #0
 8000516:	2178      	movs	r1, #120	; 0x78
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <ssd1306_WriteCommand+0x2c>)
 800051a:	f001 fbb3 	bl	8001c84 <HAL_I2C_Mem_Write>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200004cc 	.word	0x200004cc

0800052c <ssd1306_Init>:

//
//	Het scherm initialiseren voor gebruik
//
uint8_t ssd1306_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	// Even wachten zodat het scherm zeker opgestart is
	HAL_Delay(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f000 fcc9 	bl	8000ec8 <HAL_Delay>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
	ssd1306_WriteCommand(0x14); //
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
#else
	ssd1306_WriteCommand(0xA8);	//Set Mux Ratio
 8000536:	20a8      	movs	r0, #168	; 0xa8
 8000538:	f7ff ffe0 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F);	//64MUX
 800053c:	203f      	movs	r0, #63	; 0x3f
 800053e:	f7ff ffdd 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3);	//Set Display Offset
 8000542:	20d3      	movs	r0, #211	; 0xd3
 8000544:	f7ff ffda 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);	//COM0
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff ffd7 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40);	//Set Display Start Line
 800054e:	2040      	movs	r0, #64	; 0x40
 8000550:	f7ff ffd4 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA1);	//Set Segment re-map, Default 0xA0
 8000554:	20a1      	movs	r0, #161	; 0xa1
 8000556:	f7ff ffd1 	bl	80004fc <ssd1306_WriteCommand>
					//column address 127 is mapped to SEG0 (좌우 반전)

	ssd1306_WriteCommand(0xC8);	//Set COM Output Scan Direction, default 0xC0
 800055a:	20c8      	movs	r0, #200	; 0xc8
 800055c:	f7ff ffce 	bl	80004fc <ssd1306_WriteCommand>
					//remapped mode. Scan from COM[N-1] to COM0 (상하 반전)

	ssd1306_WriteCommand(0xDA);	//Set COM Pins hardware configuration
 8000560:	20da      	movs	r0, #218	; 0xda
 8000562:	f7ff ffcb 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000566:	2012      	movs	r0, #18
 8000568:	f7ff ffc8 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x20);	//Set Memory Addressing Mode
 800056c:	2020      	movs	r0, #32
 800056e:	f7ff ffc5 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x02);	//Page Addressing Mode
 8000572:	2002      	movs	r0, #2
 8000574:	f7ff ffc2 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x81);	//Set Contrast Control
 8000578:	2081      	movs	r0, #129	; 0x81
 800057a:	f7ff ffbf 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x7F);	//1~256
 800057e:	207f      	movs	r0, #127	; 0x7f
 8000580:	f7ff ffbc 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA4);	//Disable Entire Display On
 8000584:	20a4      	movs	r0, #164	; 0xa4
 8000586:	f7ff ffb9 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA6);	//Set Normal Display
 800058a:	20a6      	movs	r0, #166	; 0xa6
 800058c:	f7ff ffb6 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5);	//Set Osc Frequency
 8000590:	20d5      	movs	r0, #213	; 0xd5
 8000592:	f7ff ffb3 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x80);
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	f7ff ffb0 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D);	//Enable charge pump regulator
 800059c:	208d      	movs	r0, #141	; 0x8d
 800059e:	f7ff ffad 	bl	80004fc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 80005a2:	2014      	movs	r0, #20
 80005a4:	f7ff ffaa 	bl	80004fc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xAF);	//Display ON
 80005a8:	20af      	movs	r0, #175	; 0xaf
 80005aa:	f7ff ffa7 	bl	80004fc <ssd1306_WriteCommand>
#endif
	/* Clearen scherm */
	ssd1306_Fill(Black);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f810 	bl	80005d4 <ssd1306_Fill>

	/* Update screen */
	ssd1306_UpdateScreen();
 80005b4:	f000 f830 	bl	8000618 <ssd1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <ssd1306_Init+0xa4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <ssd1306_Init+0xa4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <ssd1306_Init+0xa4>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200004b0 	.word	0x200004b0

080005d4 <ssd1306_Fill>:
//
//	We zetten de hele buffer op een bepaalde kleur
// 	color 	=> de kleur waarin alles moet
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e00d      	b.n	8000600 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <ssd1306_Fill+0x1a>
 80005ea:	2100      	movs	r1, #0
 80005ec:	e000      	b.n	80005f0 <ssd1306_Fill+0x1c>
 80005ee:	21ff      	movs	r1, #255	; 0xff
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <ssd1306_Fill+0x40>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8000606:	d3ed      	bcc.n	80005e4 <ssd1306_Fill+0x10>
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20000090 	.word	0x20000090

08000618 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	e021      	b.n	8000668 <ssd1306_UpdateScreen+0x50>
		ssd1306_WriteCommand(0xB0 + i);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	3b50      	subs	r3, #80	; 0x50
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff66 	bl	80004fc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ff63 	bl	80004fc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000636:	2010      	movs	r0, #16
 8000638:	f7ff ff60 	bl	80004fc <ssd1306_WriteCommand>

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	4613      	mov	r3, r2
 8000640:	015b      	lsls	r3, r3, #5
 8000642:	4413      	add	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	461a      	mov	r2, r3
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <ssd1306_UpdateScreen+0x60>)
 800064a:	4413      	add	r3, r2
 800064c:	2264      	movs	r2, #100	; 0x64
 800064e:	9202      	str	r2, [sp, #8]
 8000650:	2284      	movs	r2, #132	; 0x84
 8000652:	9201      	str	r2, [sp, #4]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	2178      	movs	r1, #120	; 0x78
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <ssd1306_UpdateScreen+0x64>)
 800065e:	f001 fb11 	bl	8001c84 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	3301      	adds	r3, #1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b07      	cmp	r3, #7
 800066c:	d9da      	bls.n	8000624 <ssd1306_UpdateScreen+0xc>
	}
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000090 	.word	0x20000090
 800067c:	200004cc 	.word	0x200004cc

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x60>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x60>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072a:	f000 fbb1 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <DMA1_Channel3_IRQHandler+0x10>)
 800073a:	f000 fe61 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000804 	.word	0x20000804

08000748 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <DMA1_Channel5_IRQHandler+0x10>)
 800074e:	f000 fe57 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000088c 	.word	0x2000088c

0800075c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <I2C1_EV_IRQHandler+0x10>)
 8000762:	f001 fb89 	bl	8001e78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200004cc 	.word	0x200004cc

08000770 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <I2C1_ER_IRQHandler+0x10>)
 8000776:	f001 fcf0 	bl	800215a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200004cc 	.word	0x200004cc

08000784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART1_IRQHandler+0x10>)
 800078a:	f003 ffbf 	bl	800470c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200008d0 	.word	0x200008d0

08000798 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <USART3_IRQHandler+0x10>)
 800079e:	f003 ffb5 	bl	800470c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000848 	.word	0x20000848

080007ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007b4:	f001 f900 	bl	80019b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return 1;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <_kill>:

int _kill(int pid, int sig)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007d4:	f004 fcf6 	bl	80051c4 <__errno>
 80007d8:	4603      	mov	r3, r0
 80007da:	2216      	movs	r2, #22
 80007dc:	601a      	str	r2, [r3, #0]
	return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_exit>:

void _exit (int status)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007f2:	f04f 31ff 	mov.w	r1, #4294967295
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffe7 	bl	80007ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80007fc:	e7fe      	b.n	80007fc <_exit+0x12>

080007fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00a      	b.n	8000826 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000810:	f3af 8000 	nop.w
 8000814:	4601      	mov	r1, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	60ba      	str	r2, [r7, #8]
 800081c:	b2ca      	uxtb	r2, r1
 800081e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf0      	blt.n	8000810 <_read+0x12>
	}

return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085e:	605a      	str	r2, [r3, #4]
	return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <_isatty>:

int _isatty(int file)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	return 1;
 8000874:	2301      	movs	r3, #1
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f004 fc7c 	bl	80051c4 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20005000 	.word	0x20005000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200004b8 	.word	0x200004b8
 8000900:	20000930 	.word	0x20000930

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <Terminal_Task>:
s8 token[4][16];
s32 token_size;
s32 tap_cnt = 0;

void Terminal_Task()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	u8 recv_data = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]

	if (Serial3_ReadBuff(&recv_data,1))
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	2101      	movs	r1, #1
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fda0 	bl	8000464 <Serial3_ReadBuff>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d026      	beq.n	8000978 <Terminal_Task+0x68>
	{
		if (Terminal_GetData(recv_data))
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f835 	bl	800099c <Terminal_GetData>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d01f      	beq.n	8000978 <Terminal_Task+0x68>
		{
			token_size = Tokenize (term_str, token);
 8000938:	4911      	ldr	r1, [pc, #68]	; (8000980 <Terminal_Task+0x70>)
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <Terminal_Task+0x74>)
 800093c:	f000 f896 	bl	8000a6c <Tokenize>
 8000940:	4603      	mov	r3, r0
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <Terminal_Task+0x78>)
 8000944:	6013      	str	r3, [r2, #0]

			if(0 < token_size) {
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <Terminal_Task+0x78>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dd09      	ble.n	8000962 <Terminal_Task+0x52>
				if(strcmp((char *)token[0], "load") == 0) {
 800094e:	490f      	ldr	r1, [pc, #60]	; (800098c <Terminal_Task+0x7c>)
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <Terminal_Task+0x70>)
 8000952:	f7ff fbfb 	bl	800014c <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <Terminal_Task+0x52>
						printf("Load Program\r\n");
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <Terminal_Task+0x80>)
 800095e:	f004 fcfd 	bl	800535c <puts>
				}
			}

			printf ("F103RB> ");
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <Terminal_Task+0x84>)
 8000964:	f004 fc60 	bl	8005228 <iprintf>
			term_str_idx = 0;
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <Terminal_Task+0x88>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
			term_str[term_str_idx] = 0;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <Terminal_Task+0x88>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <Terminal_Task+0x74>)
 8000974:	2100      	movs	r1, #0
 8000976:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200007c4 	.word	0x200007c4
 8000984:	200007a4 	.word	0x200007a4
 8000988:	20000720 	.word	0x20000720
 800098c:	0800648c 	.word	0x0800648c
 8000990:	08006494 	.word	0x08006494
 8000994:	080064a4 	.word	0x080064a4
 8000998:	200004bc 	.word	0x200004bc

0800099c <Terminal_GetData>:

u8 Terminal_GetData (u8 data)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	u8 ret = FALSE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	75fb      	strb	r3, [r7, #23]

	if (data=='\n' || data=='\r')
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b0a      	cmp	r3, #10
 80009ae:	d002      	beq.n	80009b6 <Terminal_GetData+0x1a>
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b0d      	cmp	r3, #13
 80009b4:	d105      	bne.n	80009c2 <Terminal_GetData+0x26>
	{               		 // enter
		printf ("\r\n");
 80009b6:	4820      	ldr	r0, [pc, #128]	; (8000a38 <Terminal_GetData+0x9c>)
 80009b8:	f004 fcd0 	bl	800535c <puts>
		//term_recv_comp = TRUE;
		ret = TRUE;
 80009bc:	2301      	movs	r3, #1
 80009be:	75fb      	strb	r3, [r7, #23]
 80009c0:	e035      	b.n	8000a2e <Terminal_GetData+0x92>
	}
	else if (data == '\b')
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d117      	bne.n	80009f8 <Terminal_GetData+0x5c>
	{                        // backspace
		u8 tmp[10];
//			Timer_DelayMS(5);
		Terminal_ReadBuff (tmp, 2);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2102      	movs	r1, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f83c 	bl	8000a4c <Terminal_ReadBuff>

		if (0 < term_str_idx)
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <Terminal_GetData+0xa0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dd07      	ble.n	80009ec <Terminal_GetData+0x50>
		{
			printf ("\b \b");
 80009dc:	4818      	ldr	r0, [pc, #96]	; (8000a40 <Terminal_GetData+0xa4>)
 80009de:	f004 fc23 	bl	8005228 <iprintf>
			--term_str_idx;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <Terminal_GetData+0xa0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <Terminal_GetData+0xa0>)
 80009ea:	6013      	str	r3, [r2, #0]
		}
		term_str[term_str_idx] = 0;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <Terminal_GetData+0xa0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <Terminal_GetData+0xa8>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	54d1      	strb	r1, [r2, r3]
 80009f6:	e01a      	b.n	8000a2e <Terminal_GetData+0x92>
	}
	else
	{
		term_str[term_str_idx] = data;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <Terminal_GetData+0xa0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <Terminal_GetData+0xa8>)
 8000a02:	54d1      	strb	r1, [r2, r3]
		if (term_str_idx < TERM_STR_MAX-1) ++term_str_idx;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <Terminal_GetData+0xa0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b1e      	cmp	r3, #30
 8000a0a:	dc04      	bgt.n	8000a16 <Terminal_GetData+0x7a>
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <Terminal_GetData+0xa0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <Terminal_GetData+0xa0>)
 8000a14:	6013      	str	r3, [r2, #0]
		term_str[term_str_idx] = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <Terminal_GetData+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <Terminal_GetData+0xa8>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	54d1      	strb	r1, [r2, r3]
		printf ("%c", data);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 fc18 	bl	8005258 <putchar>
		tap_cnt = 0;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <Terminal_GetData+0xac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
	}

	return ret;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	080064b0 	.word	0x080064b0
 8000a3c:	200004bc 	.word	0x200004bc
 8000a40:	080064b4 	.word	0x080064b4
 8000a44:	200007a4 	.word	0x200007a4
 8000a48:	200004c0 	.word	0x200004c0

08000a4c <Terminal_ReadBuff>:

s32 Terminal_ReadBuff (u8 *buff, s32 size)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
        return Serial3_ReadBuff(buff, size);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fd02 	bl	8000464 <Serial3_ReadBuff>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <Tokenize>:

s32 Tokenize (s8 *str, s8 token[4][16])
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	s8 tmp[TERM_STR_MAX];
	s8 *p;
	s32 cnt = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28

	strcpy ((char *)tmp, (char *)str);
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f004 fc73 	bl	800536c <strcpy>
	p = (s8 *)strtok ((char *)tmp, " =");
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4912      	ldr	r1, [pc, #72]	; (8000ad4 <Tokenize+0x68>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fc75 	bl	800537c <strtok>
 8000a92:	62f8      	str	r0, [r7, #44]	; 0x2c

	for (;;) {
			token[cnt][0] = 0;
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
			strcpy ((char *)token[cnt], (char *)p);
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fc5e 	bl	800536c <strcpy>
			cnt++;
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
			p = (s8 *)strtok (NULL, (char *)" =");
 8000ab6:	4907      	ldr	r1, [pc, #28]	; (8000ad4 <Tokenize+0x68>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f004 fc5f 	bl	800537c <strtok>
 8000abe:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (p == NULL) break;
 8000ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d000      	beq.n	8000ac8 <Tokenize+0x5c>
			token[cnt][0] = 0;
 8000ac6:	e7e5      	b.n	8000a94 <Tokenize+0x28>
			if (p == NULL) break;
 8000ac8:	bf00      	nop
	}

	return cnt;
 8000aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	080064b8 	.word	0x080064b8

08000ad8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <MX_USART1_UART_Init+0x58>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000b10:	f003 fcbc 	bl	800448c <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f7ff fc9e 	bl	800045a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &m_data, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4904      	ldr	r1, [pc, #16]	; (8000b34 <MX_USART1_UART_Init+0x5c>)
 8000b22:	4802      	ldr	r0, [pc, #8]	; (8000b2c <MX_USART1_UART_Init+0x54>)
 8000b24:	f003 fd91 	bl	800464a <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200008d0 	.word	0x200008d0
 8000b30:	40013800 	.word	0x40013800
 8000b34:	20000914 	.word	0x20000914

08000b38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_USART3_UART_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b44:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b70:	f003 fc8c 	bl	800448c <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f7ff fc6e 	bl	800045a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
//  HAL_UART_Receive_IT(&huart3, &m_data, 1);
  HAL_UART_Receive_DMA(&huart3, g_serial3_RxBuffer, SERIAL3_BUFF_SIZE);
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	4905      	ldr	r1, [pc, #20]	; (8000b98 <MX_USART3_UART_Init+0x60>)
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_USART3_UART_Init+0x58>)
 8000b84:	f003 fd91 	bl	80046aa <HAL_UART_Receive_DMA>

  Serial3_Flush();
 8000b88:	f7ff fca8 	bl	80004dc <Serial3_Flush>
  /* USER CODE END USART3_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000848 	.word	0x20000848
 8000b94:	40004800 	.word	0x40004800
 8000b98:	20000620 	.word	0x20000620

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a67      	ldr	r2, [pc, #412]	; (8000d54 <HAL_UART_MspInit+0x1b8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d160      	bne.n	8000c7e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bbc:	4b66      	ldr	r3, [pc, #408]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a65      	ldr	r2, [pc, #404]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b60      	ldr	r3, [pc, #384]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a5f      	ldr	r2, [pc, #380]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4856      	ldr	r0, [pc, #344]	; (8000d5c <HAL_UART_MspInit+0x1c0>)
 8000c02:	f000 fd3d 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4850      	ldr	r0, [pc, #320]	; (8000d5c <HAL_UART_MspInit+0x1c0>)
 8000c1c:	f000 fd30 	bl	8001680 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c20:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c22:	4a50      	ldr	r2, [pc, #320]	; (8000d64 <HAL_UART_MspInit+0x1c8>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c26:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c38:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c44:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c46:	2220      	movs	r2, #32
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c50:	4843      	ldr	r0, [pc, #268]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c52:	f000 fa6b 	bl	800112c <HAL_DMA_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000c5c:	f7ff fbfd 	bl	800045a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
 8000c66:	4a3e      	ldr	r2, [pc, #248]	; (8000d60 <HAL_UART_MspInit+0x1c4>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2025      	movs	r0, #37	; 0x25
 8000c72:	f000 fa24 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c76:	2025      	movs	r0, #37	; 0x25
 8000c78:	f000 fa3d 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */
  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c7c:	e065      	b.n	8000d4a <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a39      	ldr	r2, [pc, #228]	; (8000d68 <HAL_UART_MspInit+0x1cc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d160      	bne.n	8000d4a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_UART_MspInit+0x1bc>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4827      	ldr	r0, [pc, #156]	; (8000d6c <HAL_UART_MspInit+0x1d0>)
 8000cce:	f000 fcd7 	bl	8001680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4821      	ldr	r0, [pc, #132]	; (8000d6c <HAL_UART_MspInit+0x1d0>)
 8000ce8:	f000 fcca 	bl	8001680 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000cee:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <HAL_UART_MspInit+0x1d8>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d12:	2220      	movs	r2, #32
 8000d14:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d20:	f000 fa04 	bl	800112c <HAL_DMA_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_UART_MspInit+0x192>
      Error_Handler();
 8000d2a:	f7ff fb96 	bl	800045a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0x1d4>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2027      	movs	r0, #39	; 0x27
 8000d40:	f000 f9bd 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d44:	2027      	movs	r0, #39	; 0x27
 8000d46:	f000 f9d6 	bl	80010f6 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	2000088c 	.word	0x2000088c
 8000d64:	40020058 	.word	0x40020058
 8000d68:	40004800 	.word	0x40004800
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	20000804 	.word	0x20000804
 8000d74:	40020030 	.word	0x40020030

08000d78 <_write>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		__io_putchar(*ptr++);
	}
#else
	HAL_UART_Transmit(&huart3, ptr, len, 500);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <_write+0x28>)
 8000d90:	f003 fbc9 	bl	8004526 <HAL_UART_Transmit>
#endif
	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000848 	.word	0x20000848

08000da4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

	}
	if (huart->Instance == USART3) {

	}
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dde:	f7ff fd91 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f004 f9f5 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de6:	f7ff fadd 	bl	80003a4 <main>
  bx lr
 8000dea:	4770      	bx	lr
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df4:	08006638 	.word	0x08006638
  ldr r2, =_sbss
 8000df8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dfc:	2000092c 	.word	0x2000092c

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x28>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f947 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fc2e 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f95f 	bl	8001112 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f927 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x1c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_IncTick+0x20>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000918 	.word	0x20000918

08000eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000918 	.word	0x20000918

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff fff0 	bl	8000eb4 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffe0 	bl	8000eb4 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <__NVIC_EnableIRQ+0x34>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff90 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff2d 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff42 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff35 	bl	8000f74 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e043      	b.n	80011ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_DMA_Init+0xa8>)
 800114a:	4413      	add	r3, r2
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_DMA_Init+0xac>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	009a      	lsls	r2, r3, #2
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_DMA_Init+0xb0>)
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2202      	movs	r2, #2
 8001164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001176:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800117a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	bffdfff8 	.word	0xbffdfff8
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_DMA_Start_IT+0x20>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e04a      	b.n	8001296 <HAL_DMA_Start_IT+0xb6>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800120e:	2b01      	cmp	r3, #1
 8001210:	d13a      	bne.n	8001288 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2202      	movs	r2, #2
 8001216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 f9f4 	bl	8001624 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 020e 	orr.w	r2, r2, #14
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e00f      	b.n	8001276 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 020a 	orr.w	r2, r2, #10
 8001274:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0201 	orr.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001290:	2302      	movs	r3, #2
 8001292:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d008      	beq.n	80012c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e020      	b.n	8001308 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 020e 	bic.w	r2, r2, #14
 80012d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f202 	lsl.w	r2, r1, r2
 80012f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
	...

08001314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001326:	2b02      	cmp	r3, #2
 8001328:	d005      	beq.n	8001336 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2204      	movs	r2, #4
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e051      	b.n	80013da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020e 	bic.w	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_DMA_Abort_IT+0xd0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d029      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xa0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <HAL_DMA_Abort_IT+0xd4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d022      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x9c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <HAL_DMA_Abort_IT+0xd8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d01a      	beq.n	80013aa <HAL_DMA_Abort_IT+0x96>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_DMA_Abort_IT+0xdc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d012      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x90>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_DMA_Abort_IT+0xe0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d00a      	beq.n	800139e <HAL_DMA_Abort_IT+0x8a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_DMA_Abort_IT+0xe4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d102      	bne.n	8001398 <HAL_DMA_Abort_IT+0x84>
 8001392:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001396:	e00e      	b.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 8001398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800139c:	e00b      	b.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 800139e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a2:	e008      	b.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	e005      	b.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	e002      	b.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 80013b0:	2310      	movs	r3, #16
 80013b2:	e000      	b.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 80013b4:	2301      	movs	r3, #1
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_DMA_Abort_IT+0xe8>)
 80013b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	4798      	blx	r3
    } 
  }
  return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40020008 	.word	0x40020008
 80013e8:	4002001c 	.word	0x4002001c
 80013ec:	40020030 	.word	0x40020030
 80013f0:	40020044 	.word	0x40020044
 80013f4:	40020058 	.word	0x40020058
 80013f8:	4002006c 	.word	0x4002006c
 80013fc:	40020000 	.word	0x40020000

08001400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2204      	movs	r2, #4
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d04f      	beq.n	80014c8 <HAL_DMA_IRQHandler+0xc8>
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d04a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b00      	cmp	r3, #0
 800143e:	d107      	bne.n	8001450 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0204 	bic.w	r2, r2, #4
 800144e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a66      	ldr	r2, [pc, #408]	; (80015f0 <HAL_DMA_IRQHandler+0x1f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d029      	beq.n	80014ae <HAL_DMA_IRQHandler+0xae>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a65      	ldr	r2, [pc, #404]	; (80015f4 <HAL_DMA_IRQHandler+0x1f4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d022      	beq.n	80014aa <HAL_DMA_IRQHandler+0xaa>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a63      	ldr	r2, [pc, #396]	; (80015f8 <HAL_DMA_IRQHandler+0x1f8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01a      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xa4>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a62      	ldr	r2, [pc, #392]	; (80015fc <HAL_DMA_IRQHandler+0x1fc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d012      	beq.n	800149e <HAL_DMA_IRQHandler+0x9e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a60      	ldr	r2, [pc, #384]	; (8001600 <HAL_DMA_IRQHandler+0x200>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00a      	beq.n	8001498 <HAL_DMA_IRQHandler+0x98>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a5f      	ldr	r2, [pc, #380]	; (8001604 <HAL_DMA_IRQHandler+0x204>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d102      	bne.n	8001492 <HAL_DMA_IRQHandler+0x92>
 800148c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001490:	e00e      	b.n	80014b0 <HAL_DMA_IRQHandler+0xb0>
 8001492:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001496:	e00b      	b.n	80014b0 <HAL_DMA_IRQHandler+0xb0>
 8001498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800149c:	e008      	b.n	80014b0 <HAL_DMA_IRQHandler+0xb0>
 800149e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014a2:	e005      	b.n	80014b0 <HAL_DMA_IRQHandler+0xb0>
 80014a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a8:	e002      	b.n	80014b0 <HAL_DMA_IRQHandler+0xb0>
 80014aa:	2340      	movs	r3, #64	; 0x40
 80014ac:	e000      	b.n	80014b0 <HAL_DMA_IRQHandler+0xb0>
 80014ae:	2304      	movs	r3, #4
 80014b0:	4a55      	ldr	r2, [pc, #340]	; (8001608 <HAL_DMA_IRQHandler+0x208>)
 80014b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8094 	beq.w	80015e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014c6:	e08e      	b.n	80015e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2202      	movs	r2, #2
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d056      	beq.n	8001586 <HAL_DMA_IRQHandler+0x186>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d051      	beq.n	8001586 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10b      	bne.n	8001508 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020a 	bic.w	r2, r2, #10
 80014fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <HAL_DMA_IRQHandler+0x1f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d029      	beq.n	8001566 <HAL_DMA_IRQHandler+0x166>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a37      	ldr	r2, [pc, #220]	; (80015f4 <HAL_DMA_IRQHandler+0x1f4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d022      	beq.n	8001562 <HAL_DMA_IRQHandler+0x162>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <HAL_DMA_IRQHandler+0x1f8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01a      	beq.n	800155c <HAL_DMA_IRQHandler+0x15c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_DMA_IRQHandler+0x1fc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d012      	beq.n	8001556 <HAL_DMA_IRQHandler+0x156>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_DMA_IRQHandler+0x200>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00a      	beq.n	8001550 <HAL_DMA_IRQHandler+0x150>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a31      	ldr	r2, [pc, #196]	; (8001604 <HAL_DMA_IRQHandler+0x204>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d102      	bne.n	800154a <HAL_DMA_IRQHandler+0x14a>
 8001544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001548:	e00e      	b.n	8001568 <HAL_DMA_IRQHandler+0x168>
 800154a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800154e:	e00b      	b.n	8001568 <HAL_DMA_IRQHandler+0x168>
 8001550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001554:	e008      	b.n	8001568 <HAL_DMA_IRQHandler+0x168>
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	e005      	b.n	8001568 <HAL_DMA_IRQHandler+0x168>
 800155c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001560:	e002      	b.n	8001568 <HAL_DMA_IRQHandler+0x168>
 8001562:	2320      	movs	r3, #32
 8001564:	e000      	b.n	8001568 <HAL_DMA_IRQHandler+0x168>
 8001566:	2302      	movs	r3, #2
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_DMA_IRQHandler+0x208>)
 800156a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	d034      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001584:	e02f      	b.n	80015e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2208      	movs	r2, #8
 800158c:	409a      	lsls	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d028      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x1e8>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d023      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 020e 	bic.w	r2, r2, #14
 80015ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
    }
  }
  return;
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
}
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40020008 	.word	0x40020008
 80015f4:	4002001c 	.word	0x4002001c
 80015f8:	40020030 	.word	0x40020030
 80015fc:	40020044 	.word	0x40020044
 8001600:	40020058 	.word	0x40020058
 8001604:	4002006c 	.word	0x4002006c
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d108      	bne.n	8001664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001662:	e007      	b.n	8001674 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	60da      	str	r2, [r3, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	e169      	b.n	8001968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001694:	2201      	movs	r2, #1
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8158 	bne.w	8001962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a9a      	ldr	r2, [pc, #616]	; (8001920 <HAL_GPIO_Init+0x2a0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d05e      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016bc:	4a98      	ldr	r2, [pc, #608]	; (8001920 <HAL_GPIO_Init+0x2a0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d875      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016c2:	4a98      	ldr	r2, [pc, #608]	; (8001924 <HAL_GPIO_Init+0x2a4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d058      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016c8:	4a96      	ldr	r2, [pc, #600]	; (8001924 <HAL_GPIO_Init+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d86f      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016ce:	4a96      	ldr	r2, [pc, #600]	; (8001928 <HAL_GPIO_Init+0x2a8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d052      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016d4:	4a94      	ldr	r2, [pc, #592]	; (8001928 <HAL_GPIO_Init+0x2a8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d869      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016da:	4a94      	ldr	r2, [pc, #592]	; (800192c <HAL_GPIO_Init+0x2ac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d04c      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016e0:	4a92      	ldr	r2, [pc, #584]	; (800192c <HAL_GPIO_Init+0x2ac>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d863      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016e6:	4a92      	ldr	r2, [pc, #584]	; (8001930 <HAL_GPIO_Init+0x2b0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d046      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016ec:	4a90      	ldr	r2, [pc, #576]	; (8001930 <HAL_GPIO_Init+0x2b0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d85d      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d82a      	bhi.n	800174c <HAL_GPIO_Init+0xcc>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d859      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016fa:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <HAL_GPIO_Init+0x80>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	0800177b 	.word	0x0800177b
 8001704:	08001755 	.word	0x08001755
 8001708:	08001767 	.word	0x08001767
 800170c:	080017a9 	.word	0x080017a9
 8001710:	080017af 	.word	0x080017af
 8001714:	080017af 	.word	0x080017af
 8001718:	080017af 	.word	0x080017af
 800171c:	080017af 	.word	0x080017af
 8001720:	080017af 	.word	0x080017af
 8001724:	080017af 	.word	0x080017af
 8001728:	080017af 	.word	0x080017af
 800172c:	080017af 	.word	0x080017af
 8001730:	080017af 	.word	0x080017af
 8001734:	080017af 	.word	0x080017af
 8001738:	080017af 	.word	0x080017af
 800173c:	080017af 	.word	0x080017af
 8001740:	080017af 	.word	0x080017af
 8001744:	0800175d 	.word	0x0800175d
 8001748:	08001771 	.word	0x08001771
 800174c:	4a79      	ldr	r2, [pc, #484]	; (8001934 <HAL_GPIO_Init+0x2b4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001752:	e02c      	b.n	80017ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e029      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	3304      	adds	r3, #4
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e024      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	3308      	adds	r3, #8
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e01f      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	330c      	adds	r3, #12
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e01a      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001782:	2304      	movs	r3, #4
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e013      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	611a      	str	r2, [r3, #16]
          break;
 800179a:	e009      	b.n	80017b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800179c:	2308      	movs	r3, #8
 800179e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	615a      	str	r2, [r3, #20]
          break;
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
          break;
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          break;
 80017ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d801      	bhi.n	80017ba <HAL_GPIO_Init+0x13a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	e001      	b.n	80017be <HAL_GPIO_Init+0x13e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d802      	bhi.n	80017cc <HAL_GPIO_Init+0x14c>
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x152>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	3b08      	subs	r3, #8
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	210f      	movs	r1, #15
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80b1 	beq.w	8001962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001800:	4b4d      	ldr	r3, [pc, #308]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001818:	4a48      	ldr	r2, [pc, #288]	; (800193c <HAL_GPIO_Init+0x2bc>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a40      	ldr	r2, [pc, #256]	; (8001940 <HAL_GPIO_Init+0x2c0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_Init+0x1ec>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <HAL_GPIO_Init+0x2c4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_Init+0x1e8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3e      	ldr	r2, [pc, #248]	; (8001948 <HAL_GPIO_Init+0x2c8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x1e4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3d      	ldr	r2, [pc, #244]	; (800194c <HAL_GPIO_Init+0x2cc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_Init+0x1e0>
 800185c:	2303      	movs	r3, #3
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001860:	2304      	movs	r3, #4
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 800186c:	2300      	movs	r3, #0
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187e:	492f      	ldr	r1, [pc, #188]	; (800193c <HAL_GPIO_Init+0x2bc>)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	492c      	ldr	r1, [pc, #176]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4928      	ldr	r1, [pc, #160]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4922      	ldr	r1, [pc, #136]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	491e      	ldr	r1, [pc, #120]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4918      	ldr	r1, [pc, #96]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4914      	ldr	r1, [pc, #80]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 8001900:	4013      	ands	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d021      	beq.n	8001954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
 800191c:	e021      	b.n	8001962 <HAL_GPIO_Init+0x2e2>
 800191e:	bf00      	nop
 8001920:	10320000 	.word	0x10320000
 8001924:	10310000 	.word	0x10310000
 8001928:	10220000 	.word	0x10220000
 800192c:	10210000 	.word	0x10210000
 8001930:	10120000 	.word	0x10120000
 8001934:	10110000 	.word	0x10110000
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	40010800 	.word	0x40010800
 8001944:	40010c00 	.word	0x40010c00
 8001948:	40011000 	.word	0x40011000
 800194c:	40011400 	.word	0x40011400
 8001950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_GPIO_Init+0x304>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4909      	ldr	r1, [pc, #36]	; (8001984 <HAL_GPIO_Init+0x304>)
 800195e:	4013      	ands	r3, r2
 8001960:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae8e 	bne.w	8001694 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	372c      	adds	r7, #44	; 0x2c
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f806 	bl	80019e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e12b      	b.n	8001c66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fc5e 	bl	80002e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a60:	f002 fcce 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8001a64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a81      	ldr	r2, [pc, #516]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d807      	bhi.n	8001a80 <HAL_I2C_Init+0x84>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <HAL_I2C_Init+0x278>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	bf94      	ite	ls
 8001a78:	2301      	movls	r3, #1
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e006      	b.n	8001a8e <HAL_I2C_Init+0x92>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a7d      	ldr	r2, [pc, #500]	; (8001c78 <HAL_I2C_Init+0x27c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bf94      	ite	ls
 8001a88:	2301      	movls	r3, #1
 8001a8a:	2300      	movhi	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0e7      	b.n	8001c66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a78      	ldr	r2, [pc, #480]	; (8001c7c <HAL_I2C_Init+0x280>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_I2C_Init+0xd4>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3301      	adds	r3, #1
 8001ace:	e009      	b.n	8001ae4 <HAL_I2C_Init+0xe8>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_I2C_Init+0x284>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	495c      	ldr	r1, [pc, #368]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001b00:	428b      	cmp	r3, r1
 8001b02:	d819      	bhi.n	8001b38 <HAL_I2C_Init+0x13c>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e59      	subs	r1, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b18:	400b      	ands	r3, r1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <HAL_I2C_Init+0x138>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1e59      	subs	r1, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	e051      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e04f      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d111      	bne.n	8001b64 <HAL_I2C_Init+0x168>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e012      	b.n	8001b8a <HAL_I2C_Init+0x18e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	0099      	lsls	r1, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Init+0x196>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e022      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10e      	bne.n	8001bb8 <HAL_I2C_Init+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e58      	subs	r0, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	440b      	add	r3, r1
 8001ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb6:	e00f      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	0099      	lsls	r1, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	6809      	ldr	r1, [r1, #0]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6911      	ldr	r1, [r2, #16]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68d2      	ldr	r2, [r2, #12]
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	000186a0 	.word	0x000186a0
 8001c74:	001e847f 	.word	0x001e847f
 8001c78:	003d08ff 	.word	0x003d08ff
 8001c7c:	431bde83 	.word	0x431bde83
 8001c80:	10624dd3 	.word	0x10624dd3

08001c84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	4611      	mov	r1, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	817b      	strh	r3, [r7, #10]
 8001c96:	460b      	mov	r3, r1
 8001c98:	813b      	strh	r3, [r7, #8]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c9e:	f7ff f909 	bl	8000eb4 <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	f040 80d9 	bne.w	8001e64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2319      	movs	r3, #25
 8001cb8:	2201      	movs	r2, #1
 8001cba:	496d      	ldr	r1, [pc, #436]	; (8001e70 <HAL_I2C_Mem_Write+0x1ec>)
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f001 fdf9 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0cc      	b.n	8001e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_I2C_Mem_Write+0x56>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e0c5      	b.n	8001e66 <HAL_I2C_Mem_Write+0x1e2>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d007      	beq.n	8001d00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2221      	movs	r2, #33	; 0x21
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <HAL_I2C_Mem_Write+0x1f0>)
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d42:	88f8      	ldrh	r0, [r7, #6]
 8001d44:	893a      	ldrh	r2, [r7, #8]
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4603      	mov	r3, r0
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f001 fc70 	bl	8003638 <I2C_RequestMemoryWrite>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d052      	beq.n	8001e04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e081      	b.n	8001e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f001 fe7a 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d107      	bne.n	8001d8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d11b      	bne.n	8001e04 <HAL_I2C_Mem_Write+0x180>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d017      	beq.n	8001e04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1aa      	bne.n	8001d62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f001 fe66 	bl	8003ae2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d107      	bne.n	8001e34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e016      	b.n	8001e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	00100002 	.word	0x00100002
 8001e74:	ffff0000 	.word	0xffff0000

08001e78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d003      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x38>
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b40      	cmp	r3, #64	; 0x40
 8001eac:	f040 80c1 	bne.w	8002032 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x6e>
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ed0:	d003      	beq.n	8001eda <HAL_I2C_EV_IRQHandler+0x62>
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_EV_IRQHandler+0x66>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x68>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	f000 8132 	beq.w	800214a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00c      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x92>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f001 fe91 	bl	8003c24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fd77 	bl	80029f6 <I2C_Master_SB>
 8001f08:	e092      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0xb2>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	0a5b      	lsrs	r3, r3, #9
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fdec 	bl	8002b00 <I2C_Master_ADD10>
 8001f28:	e082      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_I2C_EV_IRQHandler+0xd2>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	0a5b      	lsrs	r3, r3, #9
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fe05 	bl	8002b52 <I2C_Master_ADDR>
 8001f48:	e072      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03b      	beq.n	8001fce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f64:	f000 80f3 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	09db      	lsrs	r3, r3, #7
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00f      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f9f1 	bl	8002374 <I2C_MasterTransmit_TXE>
 8001f92:	e04d      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80d6 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	0a5b      	lsrs	r3, r3, #9
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80cf 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b21      	cmp	r3, #33	; 0x21
 8001fb4:	d103      	bne.n	8001fbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa78 	bl	80024ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fbc:	e0c7      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	f040 80c4 	bne.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fae6 	bl	8002598 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fcc:	e0bf      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fdc:	f000 80b7 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00f      	beq.n	800200c <HAL_I2C_EV_IRQHandler+0x194>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d009      	beq.n	800200c <HAL_I2C_EV_IRQHandler+0x194>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fb5b 	bl	80026c0 <I2C_MasterReceive_RXNE>
 800200a:	e011      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 809a 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	0a5b      	lsrs	r3, r3, #9
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8093 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fbfa 	bl	8002822 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202e:	e08e      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002030:	e08d      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e007      	b.n	8002054 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_I2C_EV_IRQHandler+0x20e>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	0a5b      	lsrs	r3, r3, #9
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800207c:	69b9      	ldr	r1, [r7, #24]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 ffbe 	bl	8003000 <I2C_Slave_ADDR>
 8002084:	e066      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	0a5b      	lsrs	r3, r3, #9
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fff8 	bl	8003094 <I2C_Slave_STOPF>
 80020a4:	e056      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	2b21      	cmp	r3, #33	; 0x21
 80020aa:	d002      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	2b29      	cmp	r3, #41	; 0x29
 80020b0:	d125      	bne.n	80020fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	09db      	lsrs	r3, r3, #7
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00f      	beq.n	80020de <HAL_I2C_EV_IRQHandler+0x266>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	0a9b      	lsrs	r3, r3, #10
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_I2C_EV_IRQHandler+0x266>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fed6 	bl	8002e88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020dc:	e039      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d033      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	0a5b      	lsrs	r3, r3, #9
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d02d      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 ff03 	bl	8002f02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fc:	e029      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00f      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x2b2>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	0a9b      	lsrs	r3, r3, #10
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 ff0d 	bl	8002f42 <I2C_SlaveReceive_RXNE>
 8002128:	e014      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00e      	beq.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	0a5b      	lsrs	r3, r3, #9
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 ff3b 	bl	8002fbe <I2C_SlaveReceive_BTF>
 8002148:	e004      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800214a:	bf00      	nop
 800214c:	e002      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800214e:	bf00      	nop
 8002150:	e000      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002152:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b08a      	sub	sp, #40	; 0x28
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800217c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <HAL_I2C_ER_IRQHandler+0x5e>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021a6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	0a5b      	lsrs	r3, r3, #9
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00e      	beq.n	80021e2 <HAL_I2C_ER_IRQHandler+0x88>
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80021e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	0a9b      	lsrs	r3, r3, #10
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d03f      	beq.n	800226e <HAL_I2C_ER_IRQHandler+0x114>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d039      	beq.n	800226e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80021fa:	7efb      	ldrb	r3, [r7, #27]
 80021fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002214:	7ebb      	ldrb	r3, [r7, #26]
 8002216:	2b20      	cmp	r3, #32
 8002218:	d112      	bne.n	8002240 <HAL_I2C_ER_IRQHandler+0xe6>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_I2C_ER_IRQHandler+0xe6>
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	2b21      	cmp	r3, #33	; 0x21
 8002224:	d008      	beq.n	8002238 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b29      	cmp	r3, #41	; 0x29
 800222a:	d005      	beq.n	8002238 <HAL_I2C_ER_IRQHandler+0xde>
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	2b28      	cmp	r3, #40	; 0x28
 8002230:	d106      	bne.n	8002240 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b21      	cmp	r3, #33	; 0x21
 8002236:	d103      	bne.n	8002240 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f001 f85b 	bl	80032f4 <I2C_Slave_AF>
 800223e:	e016      	b.n	800226e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002248:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002252:	7efb      	ldrb	r3, [r7, #27]
 8002254:	2b10      	cmp	r3, #16
 8002256:	d002      	beq.n	800225e <HAL_I2C_ER_IRQHandler+0x104>
 8002258:	7efb      	ldrb	r3, [r7, #27]
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d107      	bne.n	800226e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	0adb      	lsrs	r3, r3, #11
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00e      	beq.n	8002298 <HAL_I2C_ER_IRQHandler+0x13e>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f043 0308 	orr.w	r3, r3, #8
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002296:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 f892 	bl	80033d4 <I2C_ITError>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
 800230c:	4613      	mov	r3, r2
 800230e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d150      	bne.n	800243c <I2C_MasterTransmit_TXE+0xc8>
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2b21      	cmp	r3, #33	; 0x21
 800239e:	d14d      	bne.n	800243c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d01d      	beq.n	80023e2 <I2C_MasterTransmit_TXE+0x6e>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d01a      	beq.n	80023e2 <I2C_MasterTransmit_TXE+0x6e>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b2:	d016      	beq.n	80023e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2211      	movs	r2, #17
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff6c 	bl	80022b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023e0:	e060      	b.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002400:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d107      	bne.n	800242c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff81 	bl	800232c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800242a:	e03b      	b.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff3f 	bl	80022b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243a:	e033      	b.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b21      	cmp	r3, #33	; 0x21
 8002440:	d005      	beq.n	800244e <I2C_MasterTransmit_TXE+0xda>
 8002442:	7bbb      	ldrb	r3, [r7, #14]
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d12d      	bne.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b22      	cmp	r3, #34	; 0x22
 800244c:	d12a      	bne.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002466:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002468:	e01c      	b.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d103      	bne.n	800247e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f88e 	bl	8002598 <I2C_MemoryTransmit_TXE_BTF>
}
 800247c:	e012      	b.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024a2:	e7ff      	b.n	80024a4 <I2C_MasterTransmit_TXE+0x130>
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b21      	cmp	r3, #33	; 0x21
 80024c4:	d164      	bne.n	8002590 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80024f4:	e04c      	b.n	8002590 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d01d      	beq.n	8002538 <I2C_MasterTransmit_BTF+0x8c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d01a      	beq.n	8002538 <I2C_MasterTransmit_BTF+0x8c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002508:	d016      	beq.n	8002538 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002518:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2211      	movs	r2, #17
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fec1 	bl	80022b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002536:	e02b      	b.n	8002590 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002546:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d107      	bne.n	8002582 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff fed6 	bl	800232c <HAL_I2C_MemTxCpltCallback>
}
 8002580:	e006      	b.n	8002590 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fe94 	bl	80022b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11d      	bne.n	80025ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10b      	bne.n	80025d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	1c9a      	adds	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80025ce:	e073      	b.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	121b      	asrs	r3, r3, #8
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025ea:	e065      	b.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10b      	bne.n	800260c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	651a      	str	r2, [r3, #80]	; 0x50
}
 800260a:	e055      	b.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	2b02      	cmp	r3, #2
 8002612:	d151      	bne.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b22      	cmp	r3, #34	; 0x22
 8002618:	d10d      	bne.n	8002636 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002628:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002634:	e040      	b.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d015      	beq.n	800266c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b21      	cmp	r3, #33	; 0x21
 8002644:	d112      	bne.n	800266c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800266a:	e025      	b.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d120      	bne.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b21      	cmp	r3, #33	; 0x21
 800267a:	d11d      	bne.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800268a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff fe3a 	bl	800232c <HAL_I2C_MemTxCpltCallback>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b22      	cmp	r3, #34	; 0x22
 80026d2:	f040 80a2 	bne.w	800281a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d921      	bls.n	8002728 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b03      	cmp	r3, #3
 8002712:	f040 8082 	bne.w	800281a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002726:	e078      	b.n	800281a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2b02      	cmp	r3, #2
 800272e:	d074      	beq.n	800281a <I2C_MasterReceive_RXNE+0x15a>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d002      	beq.n	800273c <I2C_MasterReceive_RXNE+0x7c>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d16e      	bne.n	800281a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f001 fa11 	bl	8003b64 <I2C_WaitOnSTOPRequestThroughIT>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d142      	bne.n	80027ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002756:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002766:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d10a      	bne.n	80027b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fdc4 	bl	800233e <HAL_I2C_MemRxCpltCallback>
}
 80027b6:	e030      	b.n	800281a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2212      	movs	r2, #18
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fd7f 	bl	80022ca <HAL_I2C_MasterRxCpltCallback>
}
 80027cc:	e025      	b.n	800281a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fd9b 	bl	8002350 <HAL_I2C_ErrorCallback>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b04      	cmp	r3, #4
 8002838:	d11b      	bne.n	8002872 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002870:	e0bd      	b.n	80029ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b03      	cmp	r3, #3
 800287a:	d129      	bne.n	80028d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00a      	beq.n	80028a8 <I2C_MasterReceive_BTF+0x86>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d007      	beq.n	80028a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028ce:	e08e      	b.n	80029ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d176      	bne.n	80029c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <I2C_MasterReceive_BTF+0xc4>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d108      	bne.n	80028f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e019      	b.n	800292c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d002      	beq.n	8002904 <I2C_MasterReceive_BTF+0xe2>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d108      	bne.n	8002916 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e00a      	b.n	800292c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d007      	beq.n	800292c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002986:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d10a      	bne.n	80029b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fcc7 	bl	800233e <HAL_I2C_MemRxCpltCallback>
}
 80029b0:	e01d      	b.n	80029ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2212      	movs	r2, #18
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fc82 	bl	80022ca <HAL_I2C_MasterRxCpltCallback>
}
 80029c6:	e012      	b.n	80029ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d117      	bne.n	8002a3a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a22:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a24:	e067      	b.n	8002af6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]
}
 8002a38:	e05d      	b.n	8002af6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a42:	d133      	bne.n	8002aac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b21      	cmp	r3, #33	; 0x21
 8002a4e:	d109      	bne.n	8002a64 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	e008      	b.n	8002a76 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <I2C_Master_SB+0x92>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d032      	beq.n	8002af6 <I2C_Master_SB+0x100>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02d      	beq.n	8002af6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	605a      	str	r2, [r3, #4]
}
 8002aaa:	e024      	b.n	8002af6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	11db      	asrs	r3, r3, #7
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f003 0306 	and.w	r3, r3, #6
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f063 030f 	orn	r3, r3, #15
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]
}
 8002ad0:	e011      	b.n	8002af6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10d      	bne.n	8002af6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	11db      	asrs	r3, r3, #7
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 0306 	and.w	r3, r3, #6
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f063 030e 	orn	r3, r3, #14
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <I2C_Master_ADD10+0x26>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <I2C_Master_ADD10+0x48>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b46:	605a      	str	r2, [r3, #4]
  }
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b091      	sub	sp, #68	; 0x44
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b22      	cmp	r3, #34	; 0x22
 8002b7a:	f040 8174 	bne.w	8002e66 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <I2C_Master_ADDR+0x54>
 8002b86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d10b      	bne.n	8002ba6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	e16b      	b.n	8002e7e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11d      	bne.n	8002bea <I2C_Master_ADDR+0x98>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bb6:	d118      	bne.n	8002bea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50
 8002be8:	e149      	b.n	8002e7e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d113      	bne.n	8002c1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e120      	b.n	8002e5e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 808a 	bne.w	8002d3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c2e:	d137      	bne.n	8002ca0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c4e:	d113      	bne.n	8002c78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	e0f2      	b.n	8002e5e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e0de      	b.n	8002e5e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d02e      	beq.n	8002d04 <I2C_Master_ADDR+0x1b2>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d02b      	beq.n	8002d04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	2b12      	cmp	r3, #18
 8002cb0:	d102      	bne.n	8002cb8 <I2C_Master_ADDR+0x166>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d125      	bne.n	8002d04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d00e      	beq.n	8002cdc <I2C_Master_ADDR+0x18a>
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d00b      	beq.n	8002cdc <I2C_Master_ADDR+0x18a>
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d008      	beq.n	8002cdc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e007      	b.n	8002cec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	e0ac      	b.n	8002e5e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e090      	b.n	8002e5e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d158      	bne.n	8002df8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d021      	beq.n	8002d90 <I2C_Master_ADDR+0x23e>
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d01e      	beq.n	8002d90 <I2C_Master_ADDR+0x23e>
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d01b      	beq.n	8002d90 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e012      	b.n	8002db6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d9e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc4:	d14b      	bne.n	8002e5e <I2C_Master_ADDR+0x30c>
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dcc:	d00b      	beq.n	8002de6 <I2C_Master_ADDR+0x294>
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d008      	beq.n	8002de6 <I2C_Master_ADDR+0x294>
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d005      	beq.n	8002de6 <I2C_Master_ADDR+0x294>
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d002      	beq.n	8002de6 <I2C_Master_ADDR+0x294>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d13b      	bne.n	8002e5e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	e032      	b.n	8002e5e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e06:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e16:	d117      	bne.n	8002e48 <I2C_Master_ADDR+0x2f6>
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e1e:	d00b      	beq.n	8002e38 <I2C_Master_ADDR+0x2e6>
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d008      	beq.n	8002e38 <I2C_Master_ADDR+0x2e6>
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d005      	beq.n	8002e38 <I2C_Master_ADDR+0x2e6>
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d002      	beq.n	8002e38 <I2C_Master_ADDR+0x2e6>
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d107      	bne.n	8002e48 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002e64:	e00b      	b.n	8002e7e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
}
 8002e7c:	e7ff      	b.n	8002e7e <I2C_Master_ADDR+0x32c>
 8002e7e:	bf00      	nop
 8002e80:	3744      	adds	r7, #68	; 0x44
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d02b      	beq.n	8002efa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d114      	bne.n	8002efa <I2C_SlaveTransmit_TXE+0x72>
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b29      	cmp	r3, #41	; 0x29
 8002ed4:	d111      	bne.n	8002efa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2221      	movs	r2, #33	; 0x21
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2228      	movs	r2, #40	; 0x28
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff f9f1 	bl	80022dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02c      	beq.n	8002fb6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d114      	bne.n	8002fb6 <I2C_SlaveReceive_RXNE+0x74>
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f90:	d111      	bne.n	8002fb6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2222      	movs	r2, #34	; 0x22
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2228      	movs	r2, #40	; 0x28
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff f99c 	bl	80022ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800301a:	2b28      	cmp	r3, #40	; 0x28
 800301c:	d127      	bne.n	800306e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	09db      	lsrs	r3, r3, #7
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	81bb      	strh	r3, [r7, #12]
 8003050:	e002      	b.n	8003058 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003060:	89ba      	ldrh	r2, [r7, #12]
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	4619      	mov	r1, r3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff f94a 	bl	8002300 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800306c:	e00e      	b.n	800308c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f0:	d172      	bne.n	80031d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b22      	cmp	r3, #34	; 0x22
 80030f6:	d002      	beq.n	80030fe <I2C_Slave_STOPF+0x6a>
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b2a      	cmp	r3, #42	; 0x2a
 80030fc:	d135      	bne.n	800316a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003130:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fa68 	bl	800160c <HAL_DMA_GetState>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d049      	beq.n	80031d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	4a69      	ldr	r2, [pc, #420]	; (80032ec <I2C_Slave_STOPF+0x258>)
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f8e0 	bl	8001314 <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d03d      	beq.n	80031d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003168:	e035      	b.n	80031d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fa32 	bl	800160c <HAL_DMA_GetState>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d014      	beq.n	80031d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b2:	4a4e      	ldr	r2, [pc, #312]	; (80032ec <I2C_Slave_STOPF+0x258>)
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe f8aa 	bl	8001314 <HAL_DMA_Abort_IT>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031d0:	4610      	mov	r0, r2
 80031d2:	4798      	blx	r3
 80031d4:	e000      	b.n	80031d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d03e      	beq.n	8003260 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d112      	bne.n	8003216 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d112      	bne.n	800324a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8b3 	bl	80033d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800326e:	e039      	b.n	80032e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b2a      	cmp	r3, #42	; 0x2a
 8003274:	d109      	bne.n	800328a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2228      	movs	r2, #40	; 0x28
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff f832 	bl	80022ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b28      	cmp	r3, #40	; 0x28
 8003294:	d111      	bne.n	80032ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <I2C_Slave_STOPF+0x25c>)
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff f831 	bl	800231a <HAL_I2C_ListenCpltCallback>
}
 80032b8:	e014      	b.n	80032e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	2b22      	cmp	r3, #34	; 0x22
 80032c0:	d002      	beq.n	80032c8 <I2C_Slave_STOPF+0x234>
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b22      	cmp	r3, #34	; 0x22
 80032c6:	d10d      	bne.n	80032e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff f805 	bl	80022ee <HAL_I2C_SlaveRxCpltCallback>
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	08003765 	.word	0x08003765
 80032f0:	ffff0000 	.word	0xffff0000

080032f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d002      	beq.n	8003316 <I2C_Slave_AF+0x22>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b20      	cmp	r3, #32
 8003314:	d129      	bne.n	800336a <I2C_Slave_AF+0x76>
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b28      	cmp	r3, #40	; 0x28
 800331a:	d126      	bne.n	800336a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <I2C_Slave_AF+0xdc>)
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003330:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe ffd9 	bl	800231a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003368:	e02e      	b.n	80033c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b21      	cmp	r3, #33	; 0x21
 800336e:	d126      	bne.n	80033be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <I2C_Slave_AF+0xdc>)
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2221      	movs	r2, #33	; 0x21
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe ff90 	bl	80022dc <HAL_I2C_SlaveTxCpltCallback>
}
 80033bc:	e004      	b.n	80033c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c6:	615a      	str	r2, [r3, #20]
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	ffff0000 	.word	0xffff0000

080033d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033ec:	7bbb      	ldrb	r3, [r7, #14]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d002      	beq.n	80033f8 <I2C_ITError+0x24>
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10a      	bne.n	800340e <I2C_ITError+0x3a>
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b22      	cmp	r3, #34	; 0x22
 80033fc:	d107      	bne.n	800340e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003414:	2b28      	cmp	r3, #40	; 0x28
 8003416:	d107      	bne.n	8003428 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2228      	movs	r2, #40	; 0x28
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003426:	e015      	b.n	8003454 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003436:	d00a      	beq.n	800344e <I2C_ITError+0x7a>
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b60      	cmp	r3, #96	; 0x60
 800343c:	d007      	beq.n	800344e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003462:	d161      	bne.n	8003528 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003472:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800347c:	2b01      	cmp	r3, #1
 800347e:	d020      	beq.n	80034c2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	4a6a      	ldr	r2, [pc, #424]	; (8003630 <I2C_ITError+0x25c>)
 8003486:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd ff41 	bl	8001314 <HAL_DMA_Abort_IT>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8089 	beq.w	80035ac <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034bc:	4610      	mov	r0, r2
 80034be:	4798      	blx	r3
 80034c0:	e074      	b.n	80035ac <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	4a5a      	ldr	r2, [pc, #360]	; (8003630 <I2C_ITError+0x25c>)
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd ff20 	bl	8001314 <HAL_DMA_Abort_IT>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d068      	beq.n	80035ac <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d10b      	bne.n	8003500 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003522:	4610      	mov	r0, r2
 8003524:	4798      	blx	r3
 8003526:	e041      	b.n	80035ac <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b60      	cmp	r3, #96	; 0x60
 8003532:	d125      	bne.n	8003580 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d10b      	bne.n	8003568 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe fef2 	bl	8002362 <HAL_I2C_AbortCpltCallback>
 800357e:	e015      	b.n	80035ac <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d10b      	bne.n	80035a6 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe fed2 	bl	8002350 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10e      	bne.n	80035da <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035e8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d113      	bne.n	8003626 <I2C_ITError+0x252>
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b28      	cmp	r3, #40	; 0x28
 8003602:	d110      	bne.n	8003626 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <I2C_ITError+0x260>)
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe fe7a 	bl	800231a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	08003765 	.word	0x08003765
 8003634:	ffff0000 	.word	0xffff0000

08003638 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	460b      	mov	r3, r1
 800364c:	813b      	strh	r3, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2200      	movs	r2, #0
 800366a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f920 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003688:	d103      	bne.n	8003692 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e05f      	b.n	8003756 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003696:	897b      	ldrh	r3, [r7, #10]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	492d      	ldr	r1, [pc, #180]	; (8003760 <I2C_RequestMemoryWrite+0x128>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f958 	bl	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e04c      	b.n	8003756 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f9c2 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d107      	bne.n	80036fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e02b      	b.n	8003756 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003704:	893b      	ldrh	r3, [r7, #8]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	e021      	b.n	8003754 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	b29b      	uxth	r3, r3
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	6a39      	ldr	r1, [r7, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f99c 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b04      	cmp	r3, #4
 8003734:	d107      	bne.n	8003746 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e005      	b.n	8003756 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800374a:	893b      	ldrh	r3, [r7, #8]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	00010002 	.word	0x00010002

08003764 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800377e:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <I2C_DMAAbort+0x148>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	08db      	lsrs	r3, r3, #3
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <I2C_DMAAbort+0x14c>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0a1a      	lsrs	r2, r3, #8
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00da      	lsls	r2, r3, #3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80037aa:	e00a      	b.n	80037c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c0:	d0ea      	beq.n	8003798 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	2200      	movs	r2, #0
 80037d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	2200      	movs	r2, #0
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2200      	movs	r2, #0
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	2200      	movs	r2, #0
 8003806:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	2200      	movs	r2, #0
 8003816:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d10e      	bne.n	8003852 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800384a:	6978      	ldr	r0, [r7, #20]
 800384c:	f7fe fd89 	bl	8002362 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003850:	e027      	b.n	80038a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003858:	2b28      	cmp	r3, #40	; 0x28
 800385a:	d117      	bne.n	800388c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800387a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2228      	movs	r2, #40	; 0x28
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800388a:	e007      	b.n	800389c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7fe fd57 	bl	8002350 <HAL_I2C_ErrorCallback>
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000
 80038b0:	14f8b589 	.word	0x14f8b589

080038b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	e025      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d021      	beq.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fd faf1 	bl	8000eb4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e023      	b.n	800395a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <I2C_WaitOnFlagUntilTimeout+0x84>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	e00c      	b.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0b6      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003970:	e051      	b.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d123      	bne.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800399a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e046      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d021      	beq.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fd fa6f 	bl	8000eb4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d116      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e020      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10c      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e00b      	b.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d18d      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6c:	e02d      	b.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8aa 	bl	8003bc8 <I2C_IsAcknowledgeFailed>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e02d      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d021      	beq.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fd fa15 	bl	8000eb4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d1ca      	bne.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aee:	e02d      	b.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f869 	bl	8003bc8 <I2C_IsAcknowledgeFailed>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e02d      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d021      	beq.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fd f9d4 	bl	8000eb4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e007      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d1ca      	bne.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	0a1a      	lsrs	r2, r3, #8
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e008      	b.n	8003bb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb0:	d0e9      	beq.n	8003b86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	14f8b589 	.word	0x14f8b589

08003bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bde:	d11b      	bne.n	8003c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0204 	orr.w	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c34:	d103      	bne.n	8003c3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c3c:	e007      	b.n	8003c4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c46:	d102      	bne.n	8003c4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e26c      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8087 	beq.w	8003d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c78:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00c      	beq.n	8003c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c84:	4b8f      	ldr	r3, [pc, #572]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d112      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5e>
 8003c90:	4b8c      	ldr	r3, [pc, #560]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9e:	4b89      	ldr	r3, [pc, #548]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d06c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x12c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d168      	bne.n	8003d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e246      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x76>
 8003cc0:	4b80      	ldr	r3, [pc, #512]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7f      	ldr	r2, [pc, #508]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e02e      	b.n	8003d2c <HAL_RCC_OscConfig+0xd4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x98>
 8003cd6:	4b7b      	ldr	r3, [pc, #492]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7a      	ldr	r2, [pc, #488]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b78      	ldr	r3, [pc, #480]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a77      	ldr	r2, [pc, #476]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xd4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0xbc>
 8003cfa:	4b72      	ldr	r3, [pc, #456]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a71      	ldr	r2, [pc, #452]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xd4>
 8003d14:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a6a      	ldr	r2, [pc, #424]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a67      	ldr	r2, [pc, #412]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd f8be 	bl	8000eb4 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f8ba 	bl	8000eb4 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1fa      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xe4>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd f8aa 	bl	8000eb4 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd f8a6 	bl	8000eb4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1e6      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x10c>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d92:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d9e:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x18c>
 8003daa:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x176>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1ba      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4939      	ldr	r1, [pc, #228]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fd f85f 	bl	8000eb4 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fd f85b 	bl	8000eb4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e19b      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4927      	ldr	r1, [pc, #156]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd f83e 	bl	8000eb4 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fd f83a 	bl	8000eb4 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e17a      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03a      	beq.n	8003edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d019      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_RCC_OscConfig+0x274>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fd f81e 	bl	8000eb4 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fd f81a 	bl	8000eb4 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e15a      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f000 fad8 	bl	8004450 <RCC_Delay>
 8003ea0:	e01c      	b.n	8003edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_OscConfig+0x274>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fd f804 	bl	8000eb4 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eae:	e00f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fd f800 	bl	8000eb4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d908      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e140      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	42420000 	.word	0x42420000
 8003ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b9e      	ldr	r3, [pc, #632]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e9      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a6 	beq.w	8004036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b97      	ldr	r3, [pc, #604]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b94      	ldr	r3, [pc, #592]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4a93      	ldr	r2, [pc, #588]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	61d3      	str	r3, [r2, #28]
 8003f06:	4b91      	ldr	r3, [pc, #580]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b8e      	ldr	r3, [pc, #568]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f22:	4b8b      	ldr	r3, [pc, #556]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a8a      	ldr	r2, [pc, #552]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fc ffc1 	bl	8000eb4 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fc ffbd 	bl	8000eb4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0fd      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b81      	ldr	r3, [pc, #516]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x312>
 8003f5c:	4b7b      	ldr	r3, [pc, #492]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	e02d      	b.n	8003fc6 <HAL_RCC_OscConfig+0x36e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x334>
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	4a75      	ldr	r2, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6213      	str	r3, [r2, #32]
 8003f7e:	4b73      	ldr	r3, [pc, #460]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a72      	ldr	r2, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	e01c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x36e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d10c      	bne.n	8003fae <HAL_RCC_OscConfig+0x356>
 8003f94:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	6213      	str	r3, [r2, #32]
 8003fa0:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a69      	ldr	r2, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	e00b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x36e>
 8003fae:	4b67      	ldr	r3, [pc, #412]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	4a66      	ldr	r2, [pc, #408]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6213      	str	r3, [r2, #32]
 8003fba:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d015      	beq.n	8003ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fce:	f7fc ff71 	bl	8000eb4 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fc ff6d 	bl	8000eb4 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0ab      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x37e>
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fc ff5b 	bl	8000eb4 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fc ff57 	bl	8000eb4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e095      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b48      	ldr	r3, [pc, #288]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a47      	ldr	r2, [pc, #284]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8081 	beq.w	8004142 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004040:	4b42      	ldr	r3, [pc, #264]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d061      	beq.n	8004110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d146      	bne.n	80040e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_RCC_OscConfig+0x4fc>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fc ff2b 	bl	8000eb4 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fc ff27 	bl	8000eb4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e067      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004074:	4b35      	ldr	r3, [pc, #212]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004088:	d108      	bne.n	800409c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	492d      	ldr	r1, [pc, #180]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a19      	ldr	r1, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	430b      	orrs	r3, r1
 80040ae:	4927      	ldr	r1, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <HAL_RCC_OscConfig+0x4fc>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fc fefb 	bl	8000eb4 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fc fef7 	bl	8000eb4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e037      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x46a>
 80040e0:	e02f      	b.n	8004142 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_RCC_OscConfig+0x4fc>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fc fee4 	bl	8000eb4 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fc fee0 	bl	8000eb4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e020      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x498>
 800410e:	e018      	b.n	8004142 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e013      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	429a      	cmp	r2, r3
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	40007000 	.word	0x40007000
 8004154:	42420060 	.word	0x42420060

08004158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0d0      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b6a      	ldr	r3, [pc, #424]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4965      	ldr	r1, [pc, #404]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b63      	ldr	r3, [pc, #396]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b8      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b59      	ldr	r3, [pc, #356]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041cc:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b50      	ldr	r3, [pc, #320]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	494d      	ldr	r1, [pc, #308]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d040      	beq.n	8004278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d115      	bne.n	8004236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e073      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004226:	4b3d      	ldr	r3, [pc, #244]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e06b      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f023 0203 	bic.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4936      	ldr	r1, [pc, #216]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004248:	f7fc fe34 	bl	8000eb4 <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	e00a      	b.n	8004266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004250:	f7fc fe30 	bl	8000eb4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e053      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 020c 	and.w	r2, r3, #12
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	429a      	cmp	r2, r3
 8004276:	d1eb      	bne.n	8004250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004278:	4b27      	ldr	r3, [pc, #156]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d210      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	4922      	ldr	r1, [pc, #136]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e032      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4916      	ldr	r1, [pc, #88]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490e      	ldr	r1, [pc, #56]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042e6:	f000 f821 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490a      	ldr	r1, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <HAL_RCC_ClockConfig+0x1cc>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1d0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fd92 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40022000 	.word	0x40022000
 800431c:	40021000 	.word	0x40021000
 8004320:	080064cc 	.word	0x080064cc
 8004324:	20000000 	.word	0x20000000
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	b490      	push	{r4, r7}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004332:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004334:	1d3c      	adds	r4, r7, #4
 8004336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800433c:	f240 2301 	movw	r3, #513	; 0x201
 8004340:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x40>
 8004366:	2b08      	cmp	r3, #8
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x46>
 800436a:	e02d      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800436e:	623b      	str	r3, [r7, #32]
      break;
 8004370:	e02d      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800437e:	4413      	add	r3, r2
 8004380:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004384:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	0c5b      	lsrs	r3, r3, #17
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800439e:	4413      	add	r3, r2
 80043a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043aa:	fb02 f203 	mul.w	r2, r2, r3
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	e004      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	623b      	str	r3, [r7, #32]
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ca:	623b      	str	r3, [r7, #32]
      break;
 80043cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ce:	6a3b      	ldr	r3, [r7, #32]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	; 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc90      	pop	{r4, r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	080064bc 	.word	0x080064bc
 80043e0:	40021000 	.word	0x40021000
 80043e4:	007a1200 	.word	0x007a1200
 80043e8:	003d0900 	.word	0x003d0900

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b02      	ldr	r3, [pc, #8]	; (80043fc <HAL_RCC_GetHCLKFreq+0x10>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004404:	f7ff fff2 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	080064dc 	.word	0x080064dc

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800442c:	f7ff ffde 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	0adb      	lsrs	r3, r3, #11
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <HAL_RCC_GetPCLK2Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	080064dc 	.word	0x080064dc

08004450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <RCC_Delay+0x34>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <RCC_Delay+0x38>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0a5b      	lsrs	r3, r3, #9
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800446c:	bf00      	nop
  }
  while (Delay --);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	60fa      	str	r2, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f9      	bne.n	800446c <RCC_Delay+0x1c>
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	20000000 	.word	0x20000000
 8004488:	10624dd3 	.word	0x10624dd3

0800448c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e03f      	b.n	800451e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fb72 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fde9 	bl	80050a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08a      	sub	sp, #40	; 0x28
 800452a:	af02      	add	r7, sp, #8
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d17c      	bne.n	8004640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_UART_Transmit+0x2c>
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e075      	b.n	8004642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x3e>
 8004560:	2302      	movs	r3, #2
 8004562:	e06e      	b.n	8004642 <HAL_UART_Transmit+0x11c>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2221      	movs	r2, #33	; 0x21
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800457a:	f7fc fc9b 	bl	8000eb4 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Transmit+0x82>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045b8:	e02a      	b.n	8004610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fb21 	bl	8004c0c <UART_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e036      	b.n	8004642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3302      	adds	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e007      	b.n	8004602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1cf      	bne.n	80045ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	; 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 faf1 	bl	8004c0c <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b20      	cmp	r3, #32
 8004662:	d11d      	bne.n	80046a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_UART_Receive_IT+0x26>
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e016      	b.n	80046a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_UART_Receive_IT+0x38>
 800467e:	2302      	movs	r3, #2
 8004680:	e00f      	b.n	80046a2 <HAL_UART_Receive_IT+0x58>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	461a      	mov	r2, r3
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb02 	bl	8004ca0 <UART_Start_Receive_IT>
 800469c:	4603      	mov	r3, r0
 800469e:	e000      	b.n	80046a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d11d      	bne.n	8004700 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Receive_DMA+0x26>
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e016      	b.n	8004702 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Receive_DMA+0x38>
 80046de:	2302      	movs	r3, #2
 80046e0:	e00f      	b.n	8004702 <HAL_UART_Receive_DMA+0x58>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fb0c 	bl	8004d14 <UART_Start_Receive_DMA>
 80046fc:	4603      	mov	r3, r0
 80046fe:	e000      	b.n	8004702 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_UART_IRQHandler+0x52>
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fbfc 	bl	8004f54 <UART_Receive_IT>
      return;
 800475c:	e17b      	b.n	8004a56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80b1 	beq.w	80048c8 <HAL_UART_IRQHandler+0x1bc>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <HAL_UART_IRQHandler+0x70>
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80a6 	beq.w	80048c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_UART_IRQHandler+0x90>
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_UART_IRQHandler+0xb0>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0202 	orr.w	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_UART_IRQHandler+0xd0>
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f043 0204 	orr.w	r2, r3, #4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00f      	beq.n	8004806 <HAL_UART_IRQHandler+0xfa>
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_UART_IRQHandler+0xee>
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0208 	orr.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 811e 	beq.w	8004a4c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_UART_IRQHandler+0x11e>
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fb95 	bl	8004f54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <HAL_UART_IRQHandler+0x146>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d031      	beq.n	80048b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fad7 	bl	8004e06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d023      	beq.n	80048ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004874:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	2b00      	cmp	r3, #0
 800487c:	d013      	beq.n	80048a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	4a76      	ldr	r2, [pc, #472]	; (8004a5c <HAL_UART_IRQHandler+0x350>)
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	4618      	mov	r0, r3
 800488c:	f7fc fd42 	bl	8001314 <HAL_DMA_Abort_IT>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a0:	4610      	mov	r0, r2
 80048a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	e00e      	b.n	80048c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8ec 	bl	8004a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e00a      	b.n	80048c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8e8 	bl	8004a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e006      	b.n	80048c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8e4 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048c2:	e0c3      	b.n	8004a4c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	bf00      	nop
    return;
 80048c6:	e0c1      	b.n	8004a4c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	f040 80a1 	bne.w	8004a14 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 809b 	beq.w	8004a14 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8095 	beq.w	8004a14 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04e      	beq.n	80049ac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004918:	8a3b      	ldrh	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8098 	beq.w	8004a50 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004924:	8a3a      	ldrh	r2, [r7, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	f080 8092 	bcs.w	8004a50 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8a3a      	ldrh	r2, [r7, #16]
 8004930:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b20      	cmp	r3, #32
 800493a:	d02b      	beq.n	8004994 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800494a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0210 	bic.w	r2, r2, #16
 8004988:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	4618      	mov	r0, r3
 8004990:	f7fc fc85 	bl	800129e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499c:	b29b      	uxth	r3, r3
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f876 	bl	8004a96 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049aa:	e051      	b.n	8004a50 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d047      	beq.n	8004a54 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80049c4:	8a7b      	ldrh	r3, [r7, #18]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d044      	beq.n	8004a54 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0210 	bic.w	r2, r2, #16
 8004a06:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a08:	8a7b      	ldrh	r3, [r7, #18]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f842 	bl	8004a96 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a12:	e01f      	b.n	8004a54 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_UART_IRQHandler+0x324>
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa2c 	bl	8004e86 <UART_Transmit_IT>
    return;
 8004a2e:	e012      	b.n	8004a56 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <HAL_UART_IRQHandler+0x34a>
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa6d 	bl	8004f24 <UART_EndTransmit_IT>
    return;
 8004a4a:	e004      	b.n	8004a56 <HAL_UART_IRQHandler+0x34a>
    return;
 8004a4c:	bf00      	nop
 8004a4e:	e002      	b.n	8004a56 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a50:	bf00      	nop
 8004a52:	e000      	b.n	8004a56 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a54:	bf00      	nop
  }
}
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08004e5f 	.word	0x08004e5f

08004a60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12a      	bne.n	8004b1e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004adc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d107      	bne.n	8004b1e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0210 	bic.w	r2, r2, #16
 8004b1c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d106      	bne.n	8004b34 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ffb2 	bl	8004a96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b32:	e002      	b.n	8004b3a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7fc f935 	bl	8000da4 <HAL_UART_RxCpltCallback>
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d108      	bne.n	8004b6a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff97 	bl	8004a96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b68:	e002      	b.n	8004b70 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff ff81 	bl	8004a72 <HAL_UART_RxHalfCpltCallback>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b21      	cmp	r3, #33	; 0x21
 8004baa:	d108      	bne.n	8004bbe <UART_DMAError+0x46>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f000 f90f 	bl	8004ddc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b22      	cmp	r3, #34	; 0x22
 8004bde:	d108      	bne.n	8004bf2 <UART_DMAError+0x7a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2200      	movs	r2, #0
 8004bea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004bec:	68b8      	ldr	r0, [r7, #8]
 8004bee:	f000 f90a 	bl	8004e06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0210 	orr.w	r2, r3, #16
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bfe:	68b8      	ldr	r0, [r7, #8]
 8004c00:	f7ff ff40 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	e02c      	b.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d028      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2c:	f7fc f942 	bl	8000eb4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d21d      	bcs.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e00f      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d0c3      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2222      	movs	r2, #34	; 0x22
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0220 	orr.w	r2, r2, #32
 8004d04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
	...

08004d14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2222      	movs	r2, #34	; 0x22
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <UART_Start_Receive_DMA+0xbc>)
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <UART_Start_Receive_DMA+0xc0>)
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	4a21      	ldr	r2, [pc, #132]	; (8004dd8 <UART_Start_Receive_DMA+0xc4>)
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	2200      	movs	r2, #0
 8004d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	f7fc fa34 	bl	80011e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	08004aad 	.word	0x08004aad
 8004dd4:	08004b43 	.word	0x08004b43
 8004dd8:	08004b79 	.word	0x08004b79

08004ddc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004df2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0210 	bic.w	r2, r2, #16
 8004e44:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fe03 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b21      	cmp	r3, #33	; 0x21
 8004e98:	d13e      	bne.n	8004f18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea2:	d114      	bne.n	8004ece <UART_Transmit_IT+0x48>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d110      	bne.n	8004ece <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	621a      	str	r2, [r3, #32]
 8004ecc:	e008      	b.n	8004ee0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6211      	str	r1, [r2, #32]
 8004ed8:	781a      	ldrb	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4619      	mov	r1, r3
 8004eee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fd8b 	bl	8004a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b22      	cmp	r3, #34	; 0x22
 8004f66:	f040 8099 	bne.w	800509c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d117      	bne.n	8004fa4 <UART_Receive_IT+0x50>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d113      	bne.n	8004fa4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa2:	e026      	b.n	8004ff2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d007      	beq.n	8004fc8 <UART_Receive_IT+0x74>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <UART_Receive_IT+0x82>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e008      	b.n	8004fe8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4619      	mov	r1, r3
 8005000:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005002:	2b00      	cmp	r3, #0
 8005004:	d148      	bne.n	8005098 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0220 	bic.w	r2, r2, #32
 8005014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005024:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	2b01      	cmp	r3, #1
 8005044:	d123      	bne.n	800508e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0210 	bic.w	r2, r2, #16
 800505a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b10      	cmp	r3, #16
 8005068:	d10a      	bne.n	8005080 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005084:	4619      	mov	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fd05 	bl	8004a96 <HAL_UARTEx_RxEventCallback>
 800508c:	e002      	b.n	8005094 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fb fe88 	bl	8000da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e002      	b.n	800509e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800509c:	2302      	movs	r3, #2
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050e2:	f023 030c 	bic.w	r3, r3, #12
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2c      	ldr	r2, [pc, #176]	; (80051bc <UART_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d103      	bne.n	8005118 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7ff f98a 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	e002      	b.n	800511e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7ff f972 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 800511c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009a      	lsls	r2, r3, #2
 8005128:	441a      	add	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <UART_SetConfig+0x118>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	0119      	lsls	r1, r3, #4
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	fbb2 f2f3 	udiv	r2, r2, r3
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <UART_SetConfig+0x118>)
 8005156:	fba3 0302 	umull	r0, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2064      	movs	r0, #100	; 0x64
 800515e:	fb00 f303 	mul.w	r3, r0, r3
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	3332      	adds	r3, #50	; 0x32
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <UART_SetConfig+0x118>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005174:	4419      	add	r1, r3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fbb2 f2f3 	udiv	r2, r2, r3
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <UART_SetConfig+0x118>)
 800518e:	fba3 0302 	umull	r0, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2064      	movs	r0, #100	; 0x64
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a07      	ldr	r2, [pc, #28]	; (80051c0 <UART_SetConfig+0x118>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	440a      	add	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40013800 	.word	0x40013800
 80051c0:	51eb851f 	.word	0x51eb851f

080051c4 <__errno>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <__errno+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	2600      	movs	r6, #0
 80051d4:	4d0c      	ldr	r5, [pc, #48]	; (8005208 <__libc_init_array+0x38>)
 80051d6:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d8:	1b64      	subs	r4, r4, r5
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	f001 f93c 	bl	800645c <_init>
 80051e4:	2600      	movs	r6, #0
 80051e6:	4d0a      	ldr	r5, [pc, #40]	; (8005210 <__libc_init_array+0x40>)
 80051e8:	4c0a      	ldr	r4, [pc, #40]	; (8005214 <__libc_init_array+0x44>)
 80051ea:	1b64      	subs	r4, r4, r5
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08006630 	.word	0x08006630
 800520c:	08006630 	.word	0x08006630
 8005210:	08006630 	.word	0x08006630
 8005214:	08006634 	.word	0x08006634

08005218 <memset>:
 8005218:	4603      	mov	r3, r0
 800521a:	4402      	add	r2, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <iprintf>:
 8005228:	b40f      	push	{r0, r1, r2, r3}
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <iprintf+0x2c>)
 800522c:	b513      	push	{r0, r1, r4, lr}
 800522e:	681c      	ldr	r4, [r3, #0]
 8005230:	b124      	cbz	r4, 800523c <iprintf+0x14>
 8005232:	69a3      	ldr	r3, [r4, #24]
 8005234:	b913      	cbnz	r3, 800523c <iprintf+0x14>
 8005236:	4620      	mov	r0, r4
 8005238:	f000 faf4 	bl	8005824 <__sinit>
 800523c:	ab05      	add	r3, sp, #20
 800523e:	4620      	mov	r0, r4
 8005240:	9a04      	ldr	r2, [sp, #16]
 8005242:	68a1      	ldr	r1, [r4, #8]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f000 fcd9 	bl	8005bfc <_vfiprintf_r>
 800524a:	b002      	add	sp, #8
 800524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr
 8005254:	2000000c 	.word	0x2000000c

08005258 <putchar>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <putchar+0x24>)
 800525c:	4605      	mov	r5, r0
 800525e:	681c      	ldr	r4, [r3, #0]
 8005260:	b124      	cbz	r4, 800526c <putchar+0x14>
 8005262:	69a3      	ldr	r3, [r4, #24]
 8005264:	b913      	cbnz	r3, 800526c <putchar+0x14>
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fadc 	bl	8005824 <__sinit>
 800526c:	4629      	mov	r1, r5
 800526e:	4620      	mov	r0, r4
 8005270:	68a2      	ldr	r2, [r4, #8]
 8005272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005276:	f000 bf87 	b.w	8006188 <_putc_r>
 800527a:	bf00      	nop
 800527c:	2000000c 	.word	0x2000000c

08005280 <_puts_r>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	460e      	mov	r6, r1
 8005284:	4605      	mov	r5, r0
 8005286:	b118      	cbz	r0, 8005290 <_puts_r+0x10>
 8005288:	6983      	ldr	r3, [r0, #24]
 800528a:	b90b      	cbnz	r3, 8005290 <_puts_r+0x10>
 800528c:	f000 faca 	bl	8005824 <__sinit>
 8005290:	69ab      	ldr	r3, [r5, #24]
 8005292:	68ac      	ldr	r4, [r5, #8]
 8005294:	b913      	cbnz	r3, 800529c <_puts_r+0x1c>
 8005296:	4628      	mov	r0, r5
 8005298:	f000 fac4 	bl	8005824 <__sinit>
 800529c:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <_puts_r+0xd0>)
 800529e:	429c      	cmp	r4, r3
 80052a0:	d120      	bne.n	80052e4 <_puts_r+0x64>
 80052a2:	686c      	ldr	r4, [r5, #4]
 80052a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a6:	07db      	lsls	r3, r3, #31
 80052a8:	d405      	bmi.n	80052b6 <_puts_r+0x36>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	0598      	lsls	r0, r3, #22
 80052ae:	d402      	bmi.n	80052b6 <_puts_r+0x36>
 80052b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b2:	f000 fb67 	bl	8005984 <__retarget_lock_acquire_recursive>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	0719      	lsls	r1, r3, #28
 80052ba:	d51d      	bpl.n	80052f8 <_puts_r+0x78>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	b1db      	cbz	r3, 80052f8 <_puts_r+0x78>
 80052c0:	3e01      	subs	r6, #1
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052c8:	3b01      	subs	r3, #1
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	bb39      	cbnz	r1, 800531e <_puts_r+0x9e>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da38      	bge.n	8005344 <_puts_r+0xc4>
 80052d2:	4622      	mov	r2, r4
 80052d4:	210a      	movs	r1, #10
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 f8ac 	bl	8005434 <__swbuf_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d011      	beq.n	8005304 <_puts_r+0x84>
 80052e0:	250a      	movs	r5, #10
 80052e2:	e011      	b.n	8005308 <_puts_r+0x88>
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <_puts_r+0xd4>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d101      	bne.n	80052ee <_puts_r+0x6e>
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	e7da      	b.n	80052a4 <_puts_r+0x24>
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <_puts_r+0xd8>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	bf08      	it	eq
 80052f4:	68ec      	ldreq	r4, [r5, #12]
 80052f6:	e7d5      	b.n	80052a4 <_puts_r+0x24>
 80052f8:	4621      	mov	r1, r4
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 f8ec 	bl	80054d8 <__swsetup_r>
 8005300:	2800      	cmp	r0, #0
 8005302:	d0dd      	beq.n	80052c0 <_puts_r+0x40>
 8005304:	f04f 35ff 	mov.w	r5, #4294967295
 8005308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800530a:	07da      	lsls	r2, r3, #31
 800530c:	d405      	bmi.n	800531a <_puts_r+0x9a>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	059b      	lsls	r3, r3, #22
 8005312:	d402      	bmi.n	800531a <_puts_r+0x9a>
 8005314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005316:	f000 fb36 	bl	8005986 <__retarget_lock_release_recursive>
 800531a:	4628      	mov	r0, r5
 800531c:	bd70      	pop	{r4, r5, r6, pc}
 800531e:	2b00      	cmp	r3, #0
 8005320:	da04      	bge.n	800532c <_puts_r+0xac>
 8005322:	69a2      	ldr	r2, [r4, #24]
 8005324:	429a      	cmp	r2, r3
 8005326:	dc06      	bgt.n	8005336 <_puts_r+0xb6>
 8005328:	290a      	cmp	r1, #10
 800532a:	d004      	beq.n	8005336 <_puts_r+0xb6>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	6022      	str	r2, [r4, #0]
 8005332:	7019      	strb	r1, [r3, #0]
 8005334:	e7c5      	b.n	80052c2 <_puts_r+0x42>
 8005336:	4622      	mov	r2, r4
 8005338:	4628      	mov	r0, r5
 800533a:	f000 f87b 	bl	8005434 <__swbuf_r>
 800533e:	3001      	adds	r0, #1
 8005340:	d1bf      	bne.n	80052c2 <_puts_r+0x42>
 8005342:	e7df      	b.n	8005304 <_puts_r+0x84>
 8005344:	250a      	movs	r5, #10
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	6022      	str	r2, [r4, #0]
 800534c:	701d      	strb	r5, [r3, #0]
 800534e:	e7db      	b.n	8005308 <_puts_r+0x88>
 8005350:	080065bc 	.word	0x080065bc
 8005354:	080065dc 	.word	0x080065dc
 8005358:	0800659c 	.word	0x0800659c

0800535c <puts>:
 800535c:	4b02      	ldr	r3, [pc, #8]	; (8005368 <puts+0xc>)
 800535e:	4601      	mov	r1, r0
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f7ff bf8d 	b.w	8005280 <_puts_r>
 8005366:	bf00      	nop
 8005368:	2000000c 	.word	0x2000000c

0800536c <strcpy>:
 800536c:	4603      	mov	r3, r0
 800536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005372:	f803 2b01 	strb.w	r2, [r3], #1
 8005376:	2a00      	cmp	r2, #0
 8005378:	d1f9      	bne.n	800536e <strcpy+0x2>
 800537a:	4770      	bx	lr

0800537c <strtok>:
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <strtok+0x5c>)
 800537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005382:	681f      	ldr	r7, [r3, #0]
 8005384:	4605      	mov	r5, r0
 8005386:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005388:	460e      	mov	r6, r1
 800538a:	b9ec      	cbnz	r4, 80053c8 <strtok+0x4c>
 800538c:	2050      	movs	r0, #80	; 0x50
 800538e:	f000 fb5f 	bl	8005a50 <malloc>
 8005392:	4602      	mov	r2, r0
 8005394:	65b8      	str	r0, [r7, #88]	; 0x58
 8005396:	b920      	cbnz	r0, 80053a2 <strtok+0x26>
 8005398:	2157      	movs	r1, #87	; 0x57
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <strtok+0x60>)
 800539c:	4810      	ldr	r0, [pc, #64]	; (80053e0 <strtok+0x64>)
 800539e:	f000 f909 	bl	80055b4 <__assert_func>
 80053a2:	e9c0 4400 	strd	r4, r4, [r0]
 80053a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80053aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80053ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80053b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80053b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80053ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80053be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80053c2:	6184      	str	r4, [r0, #24]
 80053c4:	7704      	strb	r4, [r0, #28]
 80053c6:	6244      	str	r4, [r0, #36]	; 0x24
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ce:	2301      	movs	r3, #1
 80053d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	f000 b806 	b.w	80053e4 <__strtok_r>
 80053d8:	2000000c 	.word	0x2000000c
 80053dc:	080064e8 	.word	0x080064e8
 80053e0:	080064ff 	.word	0x080064ff

080053e4 <__strtok_r>:
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e6:	b908      	cbnz	r0, 80053ec <__strtok_r+0x8>
 80053e8:	6810      	ldr	r0, [r2, #0]
 80053ea:	b188      	cbz	r0, 8005410 <__strtok_r+0x2c>
 80053ec:	4604      	mov	r4, r0
 80053ee:	460f      	mov	r7, r1
 80053f0:	4620      	mov	r0, r4
 80053f2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80053fa:	b91e      	cbnz	r6, 8005404 <__strtok_r+0x20>
 80053fc:	b965      	cbnz	r5, 8005418 <__strtok_r+0x34>
 80053fe:	4628      	mov	r0, r5
 8005400:	6015      	str	r5, [r2, #0]
 8005402:	e005      	b.n	8005410 <__strtok_r+0x2c>
 8005404:	42b5      	cmp	r5, r6
 8005406:	d1f6      	bne.n	80053f6 <__strtok_r+0x12>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f0      	bne.n	80053ee <__strtok_r+0xa>
 800540c:	6014      	str	r4, [r2, #0]
 800540e:	7003      	strb	r3, [r0, #0]
 8005410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005412:	461c      	mov	r4, r3
 8005414:	e00c      	b.n	8005430 <__strtok_r+0x4c>
 8005416:	b915      	cbnz	r5, 800541e <__strtok_r+0x3a>
 8005418:	460e      	mov	r6, r1
 800541a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800541e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005422:	42ab      	cmp	r3, r5
 8005424:	d1f7      	bne.n	8005416 <__strtok_r+0x32>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f3      	beq.n	8005412 <__strtok_r+0x2e>
 800542a:	2300      	movs	r3, #0
 800542c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005430:	6014      	str	r4, [r2, #0]
 8005432:	e7ed      	b.n	8005410 <__strtok_r+0x2c>

08005434 <__swbuf_r>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	460e      	mov	r6, r1
 8005438:	4614      	mov	r4, r2
 800543a:	4605      	mov	r5, r0
 800543c:	b118      	cbz	r0, 8005446 <__swbuf_r+0x12>
 800543e:	6983      	ldr	r3, [r0, #24]
 8005440:	b90b      	cbnz	r3, 8005446 <__swbuf_r+0x12>
 8005442:	f000 f9ef 	bl	8005824 <__sinit>
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <__swbuf_r+0x98>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d12b      	bne.n	80054a4 <__swbuf_r+0x70>
 800544c:	686c      	ldr	r4, [r5, #4]
 800544e:	69a3      	ldr	r3, [r4, #24]
 8005450:	60a3      	str	r3, [r4, #8]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	071a      	lsls	r2, r3, #28
 8005456:	d52f      	bpl.n	80054b8 <__swbuf_r+0x84>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	b36b      	cbz	r3, 80054b8 <__swbuf_r+0x84>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	b2f6      	uxtb	r6, r6
 8005462:	1ac0      	subs	r0, r0, r3
 8005464:	6963      	ldr	r3, [r4, #20]
 8005466:	4637      	mov	r7, r6
 8005468:	4283      	cmp	r3, r0
 800546a:	dc04      	bgt.n	8005476 <__swbuf_r+0x42>
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f944 	bl	80056fc <_fflush_r>
 8005474:	bb30      	cbnz	r0, 80054c4 <__swbuf_r+0x90>
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	3001      	adds	r0, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	701e      	strb	r6, [r3, #0]
 8005486:	6963      	ldr	r3, [r4, #20]
 8005488:	4283      	cmp	r3, r0
 800548a:	d004      	beq.n	8005496 <__swbuf_r+0x62>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	07db      	lsls	r3, r3, #31
 8005490:	d506      	bpl.n	80054a0 <__swbuf_r+0x6c>
 8005492:	2e0a      	cmp	r6, #10
 8005494:	d104      	bne.n	80054a0 <__swbuf_r+0x6c>
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f92f 	bl	80056fc <_fflush_r>
 800549e:	b988      	cbnz	r0, 80054c4 <__swbuf_r+0x90>
 80054a0:	4638      	mov	r0, r7
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <__swbuf_r+0x9c>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swbuf_r+0x7a>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7cf      	b.n	800544e <__swbuf_r+0x1a>
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <__swbuf_r+0xa0>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7ca      	b.n	800544e <__swbuf_r+0x1a>
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f80c 	bl	80054d8 <__swsetup_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0cb      	beq.n	800545c <__swbuf_r+0x28>
 80054c4:	f04f 37ff 	mov.w	r7, #4294967295
 80054c8:	e7ea      	b.n	80054a0 <__swbuf_r+0x6c>
 80054ca:	bf00      	nop
 80054cc:	080065bc 	.word	0x080065bc
 80054d0:	080065dc 	.word	0x080065dc
 80054d4:	0800659c 	.word	0x0800659c

080054d8 <__swsetup_r>:
 80054d8:	4b32      	ldr	r3, [pc, #200]	; (80055a4 <__swsetup_r+0xcc>)
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	681d      	ldr	r5, [r3, #0]
 80054de:	4606      	mov	r6, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	b125      	cbz	r5, 80054ee <__swsetup_r+0x16>
 80054e4:	69ab      	ldr	r3, [r5, #24]
 80054e6:	b913      	cbnz	r3, 80054ee <__swsetup_r+0x16>
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f99b 	bl	8005824 <__sinit>
 80054ee:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <__swsetup_r+0xd0>)
 80054f0:	429c      	cmp	r4, r3
 80054f2:	d10f      	bne.n	8005514 <__swsetup_r+0x3c>
 80054f4:	686c      	ldr	r4, [r5, #4]
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054fc:	0719      	lsls	r1, r3, #28
 80054fe:	d42c      	bmi.n	800555a <__swsetup_r+0x82>
 8005500:	06dd      	lsls	r5, r3, #27
 8005502:	d411      	bmi.n	8005528 <__swsetup_r+0x50>
 8005504:	2309      	movs	r3, #9
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e03e      	b.n	8005592 <__swsetup_r+0xba>
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <__swsetup_r+0xd4>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d101      	bne.n	800551e <__swsetup_r+0x46>
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	e7eb      	b.n	80054f6 <__swsetup_r+0x1e>
 800551e:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <__swsetup_r+0xd8>)
 8005520:	429c      	cmp	r4, r3
 8005522:	bf08      	it	eq
 8005524:	68ec      	ldreq	r4, [r5, #12]
 8005526:	e7e6      	b.n	80054f6 <__swsetup_r+0x1e>
 8005528:	0758      	lsls	r0, r3, #29
 800552a:	d512      	bpl.n	8005552 <__swsetup_r+0x7a>
 800552c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552e:	b141      	cbz	r1, 8005542 <__swsetup_r+0x6a>
 8005530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005534:	4299      	cmp	r1, r3
 8005536:	d002      	beq.n	800553e <__swsetup_r+0x66>
 8005538:	4630      	mov	r0, r6
 800553a:	f000 fa91 	bl	8005a60 <_free_r>
 800553e:	2300      	movs	r3, #0
 8005540:	6363      	str	r3, [r4, #52]	; 0x34
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	2300      	movs	r3, #0
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	f043 0308 	orr.w	r3, r3, #8
 8005558:	81a3      	strh	r3, [r4, #12]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	b94b      	cbnz	r3, 8005572 <__swsetup_r+0x9a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005568:	d003      	beq.n	8005572 <__swsetup_r+0x9a>
 800556a:	4621      	mov	r1, r4
 800556c:	4630      	mov	r0, r6
 800556e:	f000 fa2f 	bl	80059d0 <__smakebuf_r>
 8005572:	89a0      	ldrh	r0, [r4, #12]
 8005574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005578:	f010 0301 	ands.w	r3, r0, #1
 800557c:	d00a      	beq.n	8005594 <__swsetup_r+0xbc>
 800557e:	2300      	movs	r3, #0
 8005580:	60a3      	str	r3, [r4, #8]
 8005582:	6963      	ldr	r3, [r4, #20]
 8005584:	425b      	negs	r3, r3
 8005586:	61a3      	str	r3, [r4, #24]
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	b943      	cbnz	r3, 800559e <__swsetup_r+0xc6>
 800558c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005590:	d1ba      	bne.n	8005508 <__swsetup_r+0x30>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	0781      	lsls	r1, r0, #30
 8005596:	bf58      	it	pl
 8005598:	6963      	ldrpl	r3, [r4, #20]
 800559a:	60a3      	str	r3, [r4, #8]
 800559c:	e7f4      	b.n	8005588 <__swsetup_r+0xb0>
 800559e:	2000      	movs	r0, #0
 80055a0:	e7f7      	b.n	8005592 <__swsetup_r+0xba>
 80055a2:	bf00      	nop
 80055a4:	2000000c 	.word	0x2000000c
 80055a8:	080065bc 	.word	0x080065bc
 80055ac:	080065dc 	.word	0x080065dc
 80055b0:	0800659c 	.word	0x0800659c

080055b4 <__assert_func>:
 80055b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055b6:	4614      	mov	r4, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <__assert_func+0x2c>)
 80055bc:	4605      	mov	r5, r0
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68d8      	ldr	r0, [r3, #12]
 80055c2:	b14c      	cbz	r4, 80055d8 <__assert_func+0x24>
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <__assert_func+0x30>)
 80055c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055ca:	9100      	str	r1, [sp, #0]
 80055cc:	462b      	mov	r3, r5
 80055ce:	4906      	ldr	r1, [pc, #24]	; (80055e8 <__assert_func+0x34>)
 80055d0:	f000 f9a6 	bl	8005920 <fiprintf>
 80055d4:	f000 fe86 	bl	80062e4 <abort>
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <__assert_func+0x38>)
 80055da:	461c      	mov	r4, r3
 80055dc:	e7f3      	b.n	80055c6 <__assert_func+0x12>
 80055de:	bf00      	nop
 80055e0:	2000000c 	.word	0x2000000c
 80055e4:	08006560 	.word	0x08006560
 80055e8:	0800656d 	.word	0x0800656d
 80055ec:	0800659b 	.word	0x0800659b

080055f0 <__sflush_r>:
 80055f0:	898a      	ldrh	r2, [r1, #12]
 80055f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	4605      	mov	r5, r0
 80055f8:	0710      	lsls	r0, r2, #28
 80055fa:	460c      	mov	r4, r1
 80055fc:	d458      	bmi.n	80056b0 <__sflush_r+0xc0>
 80055fe:	684b      	ldr	r3, [r1, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	dc05      	bgt.n	8005610 <__sflush_r+0x20>
 8005604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	dc02      	bgt.n	8005610 <__sflush_r+0x20>
 800560a:	2000      	movs	r0, #0
 800560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005612:	2e00      	cmp	r6, #0
 8005614:	d0f9      	beq.n	800560a <__sflush_r+0x1a>
 8005616:	2300      	movs	r3, #0
 8005618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800561c:	682f      	ldr	r7, [r5, #0]
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	d032      	beq.n	8005688 <__sflush_r+0x98>
 8005622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	075a      	lsls	r2, r3, #29
 8005628:	d505      	bpl.n	8005636 <__sflush_r+0x46>
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	1ac0      	subs	r0, r0, r3
 800562e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005630:	b10b      	cbz	r3, 8005636 <__sflush_r+0x46>
 8005632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005634:	1ac0      	subs	r0, r0, r3
 8005636:	2300      	movs	r3, #0
 8005638:	4602      	mov	r2, r0
 800563a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563c:	4628      	mov	r0, r5
 800563e:	6a21      	ldr	r1, [r4, #32]
 8005640:	47b0      	blx	r6
 8005642:	1c43      	adds	r3, r0, #1
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	d106      	bne.n	8005656 <__sflush_r+0x66>
 8005648:	6829      	ldr	r1, [r5, #0]
 800564a:	291d      	cmp	r1, #29
 800564c:	d82c      	bhi.n	80056a8 <__sflush_r+0xb8>
 800564e:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <__sflush_r+0x108>)
 8005650:	40ca      	lsrs	r2, r1
 8005652:	07d6      	lsls	r6, r2, #31
 8005654:	d528      	bpl.n	80056a8 <__sflush_r+0xb8>
 8005656:	2200      	movs	r2, #0
 8005658:	6062      	str	r2, [r4, #4]
 800565a:	6922      	ldr	r2, [r4, #16]
 800565c:	04d9      	lsls	r1, r3, #19
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	d504      	bpl.n	800566c <__sflush_r+0x7c>
 8005662:	1c42      	adds	r2, r0, #1
 8005664:	d101      	bne.n	800566a <__sflush_r+0x7a>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	b903      	cbnz	r3, 800566c <__sflush_r+0x7c>
 800566a:	6560      	str	r0, [r4, #84]	; 0x54
 800566c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566e:	602f      	str	r7, [r5, #0]
 8005670:	2900      	cmp	r1, #0
 8005672:	d0ca      	beq.n	800560a <__sflush_r+0x1a>
 8005674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005678:	4299      	cmp	r1, r3
 800567a:	d002      	beq.n	8005682 <__sflush_r+0x92>
 800567c:	4628      	mov	r0, r5
 800567e:	f000 f9ef 	bl	8005a60 <_free_r>
 8005682:	2000      	movs	r0, #0
 8005684:	6360      	str	r0, [r4, #52]	; 0x34
 8005686:	e7c1      	b.n	800560c <__sflush_r+0x1c>
 8005688:	6a21      	ldr	r1, [r4, #32]
 800568a:	2301      	movs	r3, #1
 800568c:	4628      	mov	r0, r5
 800568e:	47b0      	blx	r6
 8005690:	1c41      	adds	r1, r0, #1
 8005692:	d1c7      	bne.n	8005624 <__sflush_r+0x34>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0c4      	beq.n	8005624 <__sflush_r+0x34>
 800569a:	2b1d      	cmp	r3, #29
 800569c:	d001      	beq.n	80056a2 <__sflush_r+0xb2>
 800569e:	2b16      	cmp	r3, #22
 80056a0:	d101      	bne.n	80056a6 <__sflush_r+0xb6>
 80056a2:	602f      	str	r7, [r5, #0]
 80056a4:	e7b1      	b.n	800560a <__sflush_r+0x1a>
 80056a6:	89a3      	ldrh	r3, [r4, #12]
 80056a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	e7ad      	b.n	800560c <__sflush_r+0x1c>
 80056b0:	690f      	ldr	r7, [r1, #16]
 80056b2:	2f00      	cmp	r7, #0
 80056b4:	d0a9      	beq.n	800560a <__sflush_r+0x1a>
 80056b6:	0793      	lsls	r3, r2, #30
 80056b8:	bf18      	it	ne
 80056ba:	2300      	movne	r3, #0
 80056bc:	680e      	ldr	r6, [r1, #0]
 80056be:	bf08      	it	eq
 80056c0:	694b      	ldreq	r3, [r1, #20]
 80056c2:	eba6 0807 	sub.w	r8, r6, r7
 80056c6:	600f      	str	r7, [r1, #0]
 80056c8:	608b      	str	r3, [r1, #8]
 80056ca:	f1b8 0f00 	cmp.w	r8, #0
 80056ce:	dd9c      	ble.n	800560a <__sflush_r+0x1a>
 80056d0:	4643      	mov	r3, r8
 80056d2:	463a      	mov	r2, r7
 80056d4:	4628      	mov	r0, r5
 80056d6:	6a21      	ldr	r1, [r4, #32]
 80056d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056da:	47b0      	blx	r6
 80056dc:	2800      	cmp	r0, #0
 80056de:	dc06      	bgt.n	80056ee <__sflush_r+0xfe>
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295
 80056e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	e78e      	b.n	800560c <__sflush_r+0x1c>
 80056ee:	4407      	add	r7, r0
 80056f0:	eba8 0800 	sub.w	r8, r8, r0
 80056f4:	e7e9      	b.n	80056ca <__sflush_r+0xda>
 80056f6:	bf00      	nop
 80056f8:	20400001 	.word	0x20400001

080056fc <_fflush_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	690b      	ldr	r3, [r1, #16]
 8005700:	4605      	mov	r5, r0
 8005702:	460c      	mov	r4, r1
 8005704:	b913      	cbnz	r3, 800570c <_fflush_r+0x10>
 8005706:	2500      	movs	r5, #0
 8005708:	4628      	mov	r0, r5
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	b118      	cbz	r0, 8005716 <_fflush_r+0x1a>
 800570e:	6983      	ldr	r3, [r0, #24]
 8005710:	b90b      	cbnz	r3, 8005716 <_fflush_r+0x1a>
 8005712:	f000 f887 	bl	8005824 <__sinit>
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <_fflush_r+0x6c>)
 8005718:	429c      	cmp	r4, r3
 800571a:	d11b      	bne.n	8005754 <_fflush_r+0x58>
 800571c:	686c      	ldr	r4, [r5, #4]
 800571e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ef      	beq.n	8005706 <_fflush_r+0xa>
 8005726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005728:	07d0      	lsls	r0, r2, #31
 800572a:	d404      	bmi.n	8005736 <_fflush_r+0x3a>
 800572c:	0599      	lsls	r1, r3, #22
 800572e:	d402      	bmi.n	8005736 <_fflush_r+0x3a>
 8005730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005732:	f000 f927 	bl	8005984 <__retarget_lock_acquire_recursive>
 8005736:	4628      	mov	r0, r5
 8005738:	4621      	mov	r1, r4
 800573a:	f7ff ff59 	bl	80055f0 <__sflush_r>
 800573e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005740:	4605      	mov	r5, r0
 8005742:	07da      	lsls	r2, r3, #31
 8005744:	d4e0      	bmi.n	8005708 <_fflush_r+0xc>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	059b      	lsls	r3, r3, #22
 800574a:	d4dd      	bmi.n	8005708 <_fflush_r+0xc>
 800574c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574e:	f000 f91a 	bl	8005986 <__retarget_lock_release_recursive>
 8005752:	e7d9      	b.n	8005708 <_fflush_r+0xc>
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <_fflush_r+0x70>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d101      	bne.n	800575e <_fflush_r+0x62>
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	e7df      	b.n	800571e <_fflush_r+0x22>
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <_fflush_r+0x74>)
 8005760:	429c      	cmp	r4, r3
 8005762:	bf08      	it	eq
 8005764:	68ec      	ldreq	r4, [r5, #12]
 8005766:	e7da      	b.n	800571e <_fflush_r+0x22>
 8005768:	080065bc 	.word	0x080065bc
 800576c:	080065dc 	.word	0x080065dc
 8005770:	0800659c 	.word	0x0800659c

08005774 <std>:
 8005774:	2300      	movs	r3, #0
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
 800577a:	e9c0 3300 	strd	r3, r3, [r0]
 800577e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005782:	6083      	str	r3, [r0, #8]
 8005784:	8181      	strh	r1, [r0, #12]
 8005786:	6643      	str	r3, [r0, #100]	; 0x64
 8005788:	81c2      	strh	r2, [r0, #14]
 800578a:	6183      	str	r3, [r0, #24]
 800578c:	4619      	mov	r1, r3
 800578e:	2208      	movs	r2, #8
 8005790:	305c      	adds	r0, #92	; 0x5c
 8005792:	f7ff fd41 	bl	8005218 <memset>
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <std+0x38>)
 8005798:	6224      	str	r4, [r4, #32]
 800579a:	6263      	str	r3, [r4, #36]	; 0x24
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <std+0x3c>)
 800579e:	62a3      	str	r3, [r4, #40]	; 0x28
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <std+0x40>)
 80057a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057a4:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <std+0x44>)
 80057a6:	6323      	str	r3, [r4, #48]	; 0x30
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	bf00      	nop
 80057ac:	08006239 	.word	0x08006239
 80057b0:	0800625b 	.word	0x0800625b
 80057b4:	08006293 	.word	0x08006293
 80057b8:	080062b7 	.word	0x080062b7

080057bc <_cleanup_r>:
 80057bc:	4901      	ldr	r1, [pc, #4]	; (80057c4 <_cleanup_r+0x8>)
 80057be:	f000 b8c1 	b.w	8005944 <_fwalk_reent>
 80057c2:	bf00      	nop
 80057c4:	080056fd 	.word	0x080056fd

080057c8 <__sfmoreglue>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	2568      	movs	r5, #104	; 0x68
 80057cc:	1e4a      	subs	r2, r1, #1
 80057ce:	4355      	muls	r5, r2
 80057d0:	460e      	mov	r6, r1
 80057d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057d6:	f000 f98f 	bl	8005af8 <_malloc_r>
 80057da:	4604      	mov	r4, r0
 80057dc:	b140      	cbz	r0, 80057f0 <__sfmoreglue+0x28>
 80057de:	2100      	movs	r1, #0
 80057e0:	e9c0 1600 	strd	r1, r6, [r0]
 80057e4:	300c      	adds	r0, #12
 80057e6:	60a0      	str	r0, [r4, #8]
 80057e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057ec:	f7ff fd14 	bl	8005218 <memset>
 80057f0:	4620      	mov	r0, r4
 80057f2:	bd70      	pop	{r4, r5, r6, pc}

080057f4 <__sfp_lock_acquire>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__sfp_lock_acquire+0x8>)
 80057f6:	f000 b8c5 	b.w	8005984 <__retarget_lock_acquire_recursive>
 80057fa:	bf00      	nop
 80057fc:	20000924 	.word	0x20000924

08005800 <__sfp_lock_release>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__sfp_lock_release+0x8>)
 8005802:	f000 b8c0 	b.w	8005986 <__retarget_lock_release_recursive>
 8005806:	bf00      	nop
 8005808:	20000924 	.word	0x20000924

0800580c <__sinit_lock_acquire>:
 800580c:	4801      	ldr	r0, [pc, #4]	; (8005814 <__sinit_lock_acquire+0x8>)
 800580e:	f000 b8b9 	b.w	8005984 <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	2000091f 	.word	0x2000091f

08005818 <__sinit_lock_release>:
 8005818:	4801      	ldr	r0, [pc, #4]	; (8005820 <__sinit_lock_release+0x8>)
 800581a:	f000 b8b4 	b.w	8005986 <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	2000091f 	.word	0x2000091f

08005824 <__sinit>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4604      	mov	r4, r0
 8005828:	f7ff fff0 	bl	800580c <__sinit_lock_acquire>
 800582c:	69a3      	ldr	r3, [r4, #24]
 800582e:	b11b      	cbz	r3, 8005838 <__sinit+0x14>
 8005830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005834:	f7ff bff0 	b.w	8005818 <__sinit_lock_release>
 8005838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800583c:	6523      	str	r3, [r4, #80]	; 0x50
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <__sinit+0x68>)
 8005840:	4a13      	ldr	r2, [pc, #76]	; (8005890 <__sinit+0x6c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	62a2      	str	r2, [r4, #40]	; 0x28
 8005846:	42a3      	cmp	r3, r4
 8005848:	bf08      	it	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	4620      	mov	r0, r4
 800584e:	bf08      	it	eq
 8005850:	61a3      	streq	r3, [r4, #24]
 8005852:	f000 f81f 	bl	8005894 <__sfp>
 8005856:	6060      	str	r0, [r4, #4]
 8005858:	4620      	mov	r0, r4
 800585a:	f000 f81b 	bl	8005894 <__sfp>
 800585e:	60a0      	str	r0, [r4, #8]
 8005860:	4620      	mov	r0, r4
 8005862:	f000 f817 	bl	8005894 <__sfp>
 8005866:	2200      	movs	r2, #0
 8005868:	2104      	movs	r1, #4
 800586a:	60e0      	str	r0, [r4, #12]
 800586c:	6860      	ldr	r0, [r4, #4]
 800586e:	f7ff ff81 	bl	8005774 <std>
 8005872:	2201      	movs	r2, #1
 8005874:	2109      	movs	r1, #9
 8005876:	68a0      	ldr	r0, [r4, #8]
 8005878:	f7ff ff7c 	bl	8005774 <std>
 800587c:	2202      	movs	r2, #2
 800587e:	2112      	movs	r1, #18
 8005880:	68e0      	ldr	r0, [r4, #12]
 8005882:	f7ff ff77 	bl	8005774 <std>
 8005886:	2301      	movs	r3, #1
 8005888:	61a3      	str	r3, [r4, #24]
 800588a:	e7d1      	b.n	8005830 <__sinit+0xc>
 800588c:	080064e4 	.word	0x080064e4
 8005890:	080057bd 	.word	0x080057bd

08005894 <__sfp>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	4607      	mov	r7, r0
 8005898:	f7ff ffac 	bl	80057f4 <__sfp_lock_acquire>
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <__sfp+0x84>)
 800589e:	681e      	ldr	r6, [r3, #0]
 80058a0:	69b3      	ldr	r3, [r6, #24]
 80058a2:	b913      	cbnz	r3, 80058aa <__sfp+0x16>
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff ffbd 	bl	8005824 <__sinit>
 80058aa:	3648      	adds	r6, #72	; 0x48
 80058ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	d503      	bpl.n	80058bc <__sfp+0x28>
 80058b4:	6833      	ldr	r3, [r6, #0]
 80058b6:	b30b      	cbz	r3, 80058fc <__sfp+0x68>
 80058b8:	6836      	ldr	r6, [r6, #0]
 80058ba:	e7f7      	b.n	80058ac <__sfp+0x18>
 80058bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058c0:	b9d5      	cbnz	r5, 80058f8 <__sfp+0x64>
 80058c2:	4b16      	ldr	r3, [pc, #88]	; (800591c <__sfp+0x88>)
 80058c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058c8:	60e3      	str	r3, [r4, #12]
 80058ca:	6665      	str	r5, [r4, #100]	; 0x64
 80058cc:	f000 f859 	bl	8005982 <__retarget_lock_init_recursive>
 80058d0:	f7ff ff96 	bl	8005800 <__sfp_lock_release>
 80058d4:	2208      	movs	r2, #8
 80058d6:	4629      	mov	r1, r5
 80058d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058e0:	6025      	str	r5, [r4, #0]
 80058e2:	61a5      	str	r5, [r4, #24]
 80058e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058e8:	f7ff fc96 	bl	8005218 <memset>
 80058ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058f4:	4620      	mov	r0, r4
 80058f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f8:	3468      	adds	r4, #104	; 0x68
 80058fa:	e7d9      	b.n	80058b0 <__sfp+0x1c>
 80058fc:	2104      	movs	r1, #4
 80058fe:	4638      	mov	r0, r7
 8005900:	f7ff ff62 	bl	80057c8 <__sfmoreglue>
 8005904:	4604      	mov	r4, r0
 8005906:	6030      	str	r0, [r6, #0]
 8005908:	2800      	cmp	r0, #0
 800590a:	d1d5      	bne.n	80058b8 <__sfp+0x24>
 800590c:	f7ff ff78 	bl	8005800 <__sfp_lock_release>
 8005910:	230c      	movs	r3, #12
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	e7ee      	b.n	80058f4 <__sfp+0x60>
 8005916:	bf00      	nop
 8005918:	080064e4 	.word	0x080064e4
 800591c:	ffff0001 	.word	0xffff0001

08005920 <fiprintf>:
 8005920:	b40e      	push	{r1, r2, r3}
 8005922:	b503      	push	{r0, r1, lr}
 8005924:	4601      	mov	r1, r0
 8005926:	ab03      	add	r3, sp, #12
 8005928:	4805      	ldr	r0, [pc, #20]	; (8005940 <fiprintf+0x20>)
 800592a:	f853 2b04 	ldr.w	r2, [r3], #4
 800592e:	6800      	ldr	r0, [r0, #0]
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	f000 f963 	bl	8005bfc <_vfiprintf_r>
 8005936:	b002      	add	sp, #8
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b003      	add	sp, #12
 800593e:	4770      	bx	lr
 8005940:	2000000c 	.word	0x2000000c

08005944 <_fwalk_reent>:
 8005944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005948:	4606      	mov	r6, r0
 800594a:	4688      	mov	r8, r1
 800594c:	2700      	movs	r7, #0
 800594e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005956:	f1b9 0901 	subs.w	r9, r9, #1
 800595a:	d505      	bpl.n	8005968 <_fwalk_reent+0x24>
 800595c:	6824      	ldr	r4, [r4, #0]
 800595e:	2c00      	cmp	r4, #0
 8005960:	d1f7      	bne.n	8005952 <_fwalk_reent+0xe>
 8005962:	4638      	mov	r0, r7
 8005964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005968:	89ab      	ldrh	r3, [r5, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d907      	bls.n	800597e <_fwalk_reent+0x3a>
 800596e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005972:	3301      	adds	r3, #1
 8005974:	d003      	beq.n	800597e <_fwalk_reent+0x3a>
 8005976:	4629      	mov	r1, r5
 8005978:	4630      	mov	r0, r6
 800597a:	47c0      	blx	r8
 800597c:	4307      	orrs	r7, r0
 800597e:	3568      	adds	r5, #104	; 0x68
 8005980:	e7e9      	b.n	8005956 <_fwalk_reent+0x12>

08005982 <__retarget_lock_init_recursive>:
 8005982:	4770      	bx	lr

08005984 <__retarget_lock_acquire_recursive>:
 8005984:	4770      	bx	lr

08005986 <__retarget_lock_release_recursive>:
 8005986:	4770      	bx	lr

08005988 <__swhatbuf_r>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	460e      	mov	r6, r1
 800598c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005990:	4614      	mov	r4, r2
 8005992:	2900      	cmp	r1, #0
 8005994:	461d      	mov	r5, r3
 8005996:	b096      	sub	sp, #88	; 0x58
 8005998:	da07      	bge.n	80059aa <__swhatbuf_r+0x22>
 800599a:	2300      	movs	r3, #0
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	89b3      	ldrh	r3, [r6, #12]
 80059a0:	061a      	lsls	r2, r3, #24
 80059a2:	d410      	bmi.n	80059c6 <__swhatbuf_r+0x3e>
 80059a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a8:	e00e      	b.n	80059c8 <__swhatbuf_r+0x40>
 80059aa:	466a      	mov	r2, sp
 80059ac:	f000 fcb2 	bl	8006314 <_fstat_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	dbf2      	blt.n	800599a <__swhatbuf_r+0x12>
 80059b4:	9a01      	ldr	r2, [sp, #4]
 80059b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059be:	425a      	negs	r2, r3
 80059c0:	415a      	adcs	r2, r3
 80059c2:	602a      	str	r2, [r5, #0]
 80059c4:	e7ee      	b.n	80059a4 <__swhatbuf_r+0x1c>
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	2000      	movs	r0, #0
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	b016      	add	sp, #88	; 0x58
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__smakebuf_r>:
 80059d0:	898b      	ldrh	r3, [r1, #12]
 80059d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059d4:	079d      	lsls	r5, r3, #30
 80059d6:	4606      	mov	r6, r0
 80059d8:	460c      	mov	r4, r1
 80059da:	d507      	bpl.n	80059ec <__smakebuf_r+0x1c>
 80059dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	2301      	movs	r3, #1
 80059e6:	6163      	str	r3, [r4, #20]
 80059e8:	b002      	add	sp, #8
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	466a      	mov	r2, sp
 80059ee:	ab01      	add	r3, sp, #4
 80059f0:	f7ff ffca 	bl	8005988 <__swhatbuf_r>
 80059f4:	9900      	ldr	r1, [sp, #0]
 80059f6:	4605      	mov	r5, r0
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 f87d 	bl	8005af8 <_malloc_r>
 80059fe:	b948      	cbnz	r0, 8005a14 <__smakebuf_r+0x44>
 8005a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a04:	059a      	lsls	r2, r3, #22
 8005a06:	d4ef      	bmi.n	80059e8 <__smakebuf_r+0x18>
 8005a08:	f023 0303 	bic.w	r3, r3, #3
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	e7e3      	b.n	80059dc <__smakebuf_r+0xc>
 8005a14:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <__smakebuf_r+0x7c>)
 8005a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	6020      	str	r0, [r4, #0]
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	6120      	str	r0, [r4, #16]
 8005a26:	6163      	str	r3, [r4, #20]
 8005a28:	9b01      	ldr	r3, [sp, #4]
 8005a2a:	b15b      	cbz	r3, 8005a44 <__smakebuf_r+0x74>
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a32:	f000 fc81 	bl	8006338 <_isatty_r>
 8005a36:	b128      	cbz	r0, 8005a44 <__smakebuf_r+0x74>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	89a0      	ldrh	r0, [r4, #12]
 8005a46:	4305      	orrs	r5, r0
 8005a48:	81a5      	strh	r5, [r4, #12]
 8005a4a:	e7cd      	b.n	80059e8 <__smakebuf_r+0x18>
 8005a4c:	080057bd 	.word	0x080057bd

08005a50 <malloc>:
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <malloc+0xc>)
 8005a52:	4601      	mov	r1, r0
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	f000 b84f 	b.w	8005af8 <_malloc_r>
 8005a5a:	bf00      	nop
 8005a5c:	2000000c 	.word	0x2000000c

08005a60 <_free_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4605      	mov	r5, r0
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d043      	beq.n	8005af0 <_free_r+0x90>
 8005a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a6c:	1f0c      	subs	r4, r1, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfb8      	it	lt
 8005a72:	18e4      	addlt	r4, r4, r3
 8005a74:	f000 fc90 	bl	8006398 <__malloc_lock>
 8005a78:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <_free_r+0x94>)
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	b933      	cbnz	r3, 8005a8e <_free_r+0x2e>
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	6014      	str	r4, [r2, #0]
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a8a:	f000 bc8b 	b.w	80063a4 <__malloc_unlock>
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	d90a      	bls.n	8005aa8 <_free_r+0x48>
 8005a92:	6821      	ldr	r1, [r4, #0]
 8005a94:	1862      	adds	r2, r4, r1
 8005a96:	4293      	cmp	r3, r2
 8005a98:	bf01      	itttt	eq
 8005a9a:	681a      	ldreq	r2, [r3, #0]
 8005a9c:	685b      	ldreq	r3, [r3, #4]
 8005a9e:	1852      	addeq	r2, r2, r1
 8005aa0:	6022      	streq	r2, [r4, #0]
 8005aa2:	6063      	str	r3, [r4, #4]
 8005aa4:	6004      	str	r4, [r0, #0]
 8005aa6:	e7ed      	b.n	8005a84 <_free_r+0x24>
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b10b      	cbz	r3, 8005ab2 <_free_r+0x52>
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	d9fa      	bls.n	8005aa8 <_free_r+0x48>
 8005ab2:	6811      	ldr	r1, [r2, #0]
 8005ab4:	1850      	adds	r0, r2, r1
 8005ab6:	42a0      	cmp	r0, r4
 8005ab8:	d10b      	bne.n	8005ad2 <_free_r+0x72>
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	4401      	add	r1, r0
 8005abe:	1850      	adds	r0, r2, r1
 8005ac0:	4283      	cmp	r3, r0
 8005ac2:	6011      	str	r1, [r2, #0]
 8005ac4:	d1de      	bne.n	8005a84 <_free_r+0x24>
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4401      	add	r1, r0
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	6053      	str	r3, [r2, #4]
 8005ad0:	e7d8      	b.n	8005a84 <_free_r+0x24>
 8005ad2:	d902      	bls.n	8005ada <_free_r+0x7a>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	e7d4      	b.n	8005a84 <_free_r+0x24>
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	1821      	adds	r1, r4, r0
 8005ade:	428b      	cmp	r3, r1
 8005ae0:	bf01      	itttt	eq
 8005ae2:	6819      	ldreq	r1, [r3, #0]
 8005ae4:	685b      	ldreq	r3, [r3, #4]
 8005ae6:	1809      	addeq	r1, r1, r0
 8005ae8:	6021      	streq	r1, [r4, #0]
 8005aea:	6063      	str	r3, [r4, #4]
 8005aec:	6054      	str	r4, [r2, #4]
 8005aee:	e7c9      	b.n	8005a84 <_free_r+0x24>
 8005af0:	bd38      	pop	{r3, r4, r5, pc}
 8005af2:	bf00      	nop
 8005af4:	200004c4 	.word	0x200004c4

08005af8 <_malloc_r>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	1ccd      	adds	r5, r1, #3
 8005afc:	f025 0503 	bic.w	r5, r5, #3
 8005b00:	3508      	adds	r5, #8
 8005b02:	2d0c      	cmp	r5, #12
 8005b04:	bf38      	it	cc
 8005b06:	250c      	movcc	r5, #12
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	db01      	blt.n	8005b12 <_malloc_r+0x1a>
 8005b0e:	42a9      	cmp	r1, r5
 8005b10:	d903      	bls.n	8005b1a <_malloc_r+0x22>
 8005b12:	230c      	movs	r3, #12
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	2000      	movs	r0, #0
 8005b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b1a:	f000 fc3d 	bl	8006398 <__malloc_lock>
 8005b1e:	4921      	ldr	r1, [pc, #132]	; (8005ba4 <_malloc_r+0xac>)
 8005b20:	680a      	ldr	r2, [r1, #0]
 8005b22:	4614      	mov	r4, r2
 8005b24:	b99c      	cbnz	r4, 8005b4e <_malloc_r+0x56>
 8005b26:	4f20      	ldr	r7, [pc, #128]	; (8005ba8 <_malloc_r+0xb0>)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	b923      	cbnz	r3, 8005b36 <_malloc_r+0x3e>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f000 fb72 	bl	8006218 <_sbrk_r>
 8005b34:	6038      	str	r0, [r7, #0]
 8005b36:	4629      	mov	r1, r5
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fb6d 	bl	8006218 <_sbrk_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d123      	bne.n	8005b8a <_malloc_r+0x92>
 8005b42:	230c      	movs	r3, #12
 8005b44:	4630      	mov	r0, r6
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	f000 fc2c 	bl	80063a4 <__malloc_unlock>
 8005b4c:	e7e3      	b.n	8005b16 <_malloc_r+0x1e>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	1b5b      	subs	r3, r3, r5
 8005b52:	d417      	bmi.n	8005b84 <_malloc_r+0x8c>
 8005b54:	2b0b      	cmp	r3, #11
 8005b56:	d903      	bls.n	8005b60 <_malloc_r+0x68>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	441c      	add	r4, r3
 8005b5c:	6025      	str	r5, [r4, #0]
 8005b5e:	e004      	b.n	8005b6a <_malloc_r+0x72>
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	42a2      	cmp	r2, r4
 8005b64:	bf0c      	ite	eq
 8005b66:	600b      	streq	r3, [r1, #0]
 8005b68:	6053      	strne	r3, [r2, #4]
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f000 fc1a 	bl	80063a4 <__malloc_unlock>
 8005b70:	f104 000b 	add.w	r0, r4, #11
 8005b74:	1d23      	adds	r3, r4, #4
 8005b76:	f020 0007 	bic.w	r0, r0, #7
 8005b7a:	1ac2      	subs	r2, r0, r3
 8005b7c:	d0cc      	beq.n	8005b18 <_malloc_r+0x20>
 8005b7e:	1a1b      	subs	r3, r3, r0
 8005b80:	50a3      	str	r3, [r4, r2]
 8005b82:	e7c9      	b.n	8005b18 <_malloc_r+0x20>
 8005b84:	4622      	mov	r2, r4
 8005b86:	6864      	ldr	r4, [r4, #4]
 8005b88:	e7cc      	b.n	8005b24 <_malloc_r+0x2c>
 8005b8a:	1cc4      	adds	r4, r0, #3
 8005b8c:	f024 0403 	bic.w	r4, r4, #3
 8005b90:	42a0      	cmp	r0, r4
 8005b92:	d0e3      	beq.n	8005b5c <_malloc_r+0x64>
 8005b94:	1a21      	subs	r1, r4, r0
 8005b96:	4630      	mov	r0, r6
 8005b98:	f000 fb3e 	bl	8006218 <_sbrk_r>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d1dd      	bne.n	8005b5c <_malloc_r+0x64>
 8005ba0:	e7cf      	b.n	8005b42 <_malloc_r+0x4a>
 8005ba2:	bf00      	nop
 8005ba4:	200004c4 	.word	0x200004c4
 8005ba8:	200004c8 	.word	0x200004c8

08005bac <__sfputc_r>:
 8005bac:	6893      	ldr	r3, [r2, #8]
 8005bae:	b410      	push	{r4}
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	6093      	str	r3, [r2, #8]
 8005bb6:	da07      	bge.n	8005bc8 <__sfputc_r+0x1c>
 8005bb8:	6994      	ldr	r4, [r2, #24]
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	db01      	blt.n	8005bc2 <__sfputc_r+0x16>
 8005bbe:	290a      	cmp	r1, #10
 8005bc0:	d102      	bne.n	8005bc8 <__sfputc_r+0x1c>
 8005bc2:	bc10      	pop	{r4}
 8005bc4:	f7ff bc36 	b.w	8005434 <__swbuf_r>
 8005bc8:	6813      	ldr	r3, [r2, #0]
 8005bca:	1c58      	adds	r0, r3, #1
 8005bcc:	6010      	str	r0, [r2, #0]
 8005bce:	7019      	strb	r1, [r3, #0]
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	bc10      	pop	{r4}
 8005bd4:	4770      	bx	lr

08005bd6 <__sfputs_r>:
 8005bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd8:	4606      	mov	r6, r0
 8005bda:	460f      	mov	r7, r1
 8005bdc:	4614      	mov	r4, r2
 8005bde:	18d5      	adds	r5, r2, r3
 8005be0:	42ac      	cmp	r4, r5
 8005be2:	d101      	bne.n	8005be8 <__sfputs_r+0x12>
 8005be4:	2000      	movs	r0, #0
 8005be6:	e007      	b.n	8005bf8 <__sfputs_r+0x22>
 8005be8:	463a      	mov	r2, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf0:	f7ff ffdc 	bl	8005bac <__sfputc_r>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d1f3      	bne.n	8005be0 <__sfputs_r+0xa>
 8005bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bfc <_vfiprintf_r>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	460d      	mov	r5, r1
 8005c02:	4614      	mov	r4, r2
 8005c04:	4698      	mov	r8, r3
 8005c06:	4606      	mov	r6, r0
 8005c08:	b09d      	sub	sp, #116	; 0x74
 8005c0a:	b118      	cbz	r0, 8005c14 <_vfiprintf_r+0x18>
 8005c0c:	6983      	ldr	r3, [r0, #24]
 8005c0e:	b90b      	cbnz	r3, 8005c14 <_vfiprintf_r+0x18>
 8005c10:	f7ff fe08 	bl	8005824 <__sinit>
 8005c14:	4b89      	ldr	r3, [pc, #548]	; (8005e3c <_vfiprintf_r+0x240>)
 8005c16:	429d      	cmp	r5, r3
 8005c18:	d11b      	bne.n	8005c52 <_vfiprintf_r+0x56>
 8005c1a:	6875      	ldr	r5, [r6, #4]
 8005c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c1e:	07d9      	lsls	r1, r3, #31
 8005c20:	d405      	bmi.n	8005c2e <_vfiprintf_r+0x32>
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	059a      	lsls	r2, r3, #22
 8005c26:	d402      	bmi.n	8005c2e <_vfiprintf_r+0x32>
 8005c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c2a:	f7ff feab 	bl	8005984 <__retarget_lock_acquire_recursive>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	071b      	lsls	r3, r3, #28
 8005c32:	d501      	bpl.n	8005c38 <_vfiprintf_r+0x3c>
 8005c34:	692b      	ldr	r3, [r5, #16]
 8005c36:	b9eb      	cbnz	r3, 8005c74 <_vfiprintf_r+0x78>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff fc4c 	bl	80054d8 <__swsetup_r>
 8005c40:	b1c0      	cbz	r0, 8005c74 <_vfiprintf_r+0x78>
 8005c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c44:	07dc      	lsls	r4, r3, #31
 8005c46:	d50e      	bpl.n	8005c66 <_vfiprintf_r+0x6a>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	b01d      	add	sp, #116	; 0x74
 8005c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c52:	4b7b      	ldr	r3, [pc, #492]	; (8005e40 <_vfiprintf_r+0x244>)
 8005c54:	429d      	cmp	r5, r3
 8005c56:	d101      	bne.n	8005c5c <_vfiprintf_r+0x60>
 8005c58:	68b5      	ldr	r5, [r6, #8]
 8005c5a:	e7df      	b.n	8005c1c <_vfiprintf_r+0x20>
 8005c5c:	4b79      	ldr	r3, [pc, #484]	; (8005e44 <_vfiprintf_r+0x248>)
 8005c5e:	429d      	cmp	r5, r3
 8005c60:	bf08      	it	eq
 8005c62:	68f5      	ldreq	r5, [r6, #12]
 8005c64:	e7da      	b.n	8005c1c <_vfiprintf_r+0x20>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	0598      	lsls	r0, r3, #22
 8005c6a:	d4ed      	bmi.n	8005c48 <_vfiprintf_r+0x4c>
 8005c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c6e:	f7ff fe8a 	bl	8005986 <__retarget_lock_release_recursive>
 8005c72:	e7e9      	b.n	8005c48 <_vfiprintf_r+0x4c>
 8005c74:	2300      	movs	r3, #0
 8005c76:	9309      	str	r3, [sp, #36]	; 0x24
 8005c78:	2320      	movs	r3, #32
 8005c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c7e:	2330      	movs	r3, #48	; 0x30
 8005c80:	f04f 0901 	mov.w	r9, #1
 8005c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e48 <_vfiprintf_r+0x24c>
 8005c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c90:	4623      	mov	r3, r4
 8005c92:	469a      	mov	sl, r3
 8005c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c98:	b10a      	cbz	r2, 8005c9e <_vfiprintf_r+0xa2>
 8005c9a:	2a25      	cmp	r2, #37	; 0x25
 8005c9c:	d1f9      	bne.n	8005c92 <_vfiprintf_r+0x96>
 8005c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca2:	d00b      	beq.n	8005cbc <_vfiprintf_r+0xc0>
 8005ca4:	465b      	mov	r3, fp
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7ff ff93 	bl	8005bd6 <__sfputs_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f000 80aa 	beq.w	8005e0a <_vfiprintf_r+0x20e>
 8005cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cb8:	445a      	add	r2, fp
 8005cba:	9209      	str	r2, [sp, #36]	; 0x24
 8005cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80a2 	beq.w	8005e0a <_vfiprintf_r+0x20e>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd0:	f10a 0a01 	add.w	sl, sl, #1
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8005cde:	4654      	mov	r4, sl
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce6:	4858      	ldr	r0, [pc, #352]	; (8005e48 <_vfiprintf_r+0x24c>)
 8005ce8:	f000 fb48 	bl	800637c <memchr>
 8005cec:	9a04      	ldr	r2, [sp, #16]
 8005cee:	b9d8      	cbnz	r0, 8005d28 <_vfiprintf_r+0x12c>
 8005cf0:	06d1      	lsls	r1, r2, #27
 8005cf2:	bf44      	itt	mi
 8005cf4:	2320      	movmi	r3, #32
 8005cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfa:	0713      	lsls	r3, r2, #28
 8005cfc:	bf44      	itt	mi
 8005cfe:	232b      	movmi	r3, #43	; 0x2b
 8005d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d04:	f89a 3000 	ldrb.w	r3, [sl]
 8005d08:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0a:	d015      	beq.n	8005d38 <_vfiprintf_r+0x13c>
 8005d0c:	4654      	mov	r4, sl
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f04f 0c0a 	mov.w	ip, #10
 8005d14:	9a07      	ldr	r2, [sp, #28]
 8005d16:	4621      	mov	r1, r4
 8005d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d1c:	3b30      	subs	r3, #48	; 0x30
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	d94e      	bls.n	8005dc0 <_vfiprintf_r+0x1c4>
 8005d22:	b1b0      	cbz	r0, 8005d52 <_vfiprintf_r+0x156>
 8005d24:	9207      	str	r2, [sp, #28]
 8005d26:	e014      	b.n	8005d52 <_vfiprintf_r+0x156>
 8005d28:	eba0 0308 	sub.w	r3, r0, r8
 8005d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d30:	4313      	orrs	r3, r2
 8005d32:	46a2      	mov	sl, r4
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	e7d2      	b.n	8005cde <_vfiprintf_r+0xe2>
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	1d19      	adds	r1, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	9103      	str	r1, [sp, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bfbb      	ittet	lt
 8005d44:	425b      	neglt	r3, r3
 8005d46:	f042 0202 	orrlt.w	r2, r2, #2
 8005d4a:	9307      	strge	r3, [sp, #28]
 8005d4c:	9307      	strlt	r3, [sp, #28]
 8005d4e:	bfb8      	it	lt
 8005d50:	9204      	strlt	r2, [sp, #16]
 8005d52:	7823      	ldrb	r3, [r4, #0]
 8005d54:	2b2e      	cmp	r3, #46	; 0x2e
 8005d56:	d10c      	bne.n	8005d72 <_vfiprintf_r+0x176>
 8005d58:	7863      	ldrb	r3, [r4, #1]
 8005d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5c:	d135      	bne.n	8005dca <_vfiprintf_r+0x1ce>
 8005d5e:	9b03      	ldr	r3, [sp, #12]
 8005d60:	3402      	adds	r4, #2
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	9203      	str	r2, [sp, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfb8      	it	lt
 8005d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d70:	9305      	str	r3, [sp, #20]
 8005d72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e58 <_vfiprintf_r+0x25c>
 8005d76:	2203      	movs	r2, #3
 8005d78:	4650      	mov	r0, sl
 8005d7a:	7821      	ldrb	r1, [r4, #0]
 8005d7c:	f000 fafe 	bl	800637c <memchr>
 8005d80:	b140      	cbz	r0, 8005d94 <_vfiprintf_r+0x198>
 8005d82:	2340      	movs	r3, #64	; 0x40
 8005d84:	eba0 000a 	sub.w	r0, r0, sl
 8005d88:	fa03 f000 	lsl.w	r0, r3, r0
 8005d8c:	9b04      	ldr	r3, [sp, #16]
 8005d8e:	3401      	adds	r4, #1
 8005d90:	4303      	orrs	r3, r0
 8005d92:	9304      	str	r3, [sp, #16]
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	2206      	movs	r2, #6
 8005d9a:	482c      	ldr	r0, [pc, #176]	; (8005e4c <_vfiprintf_r+0x250>)
 8005d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da0:	f000 faec 	bl	800637c <memchr>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d03f      	beq.n	8005e28 <_vfiprintf_r+0x22c>
 8005da8:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <_vfiprintf_r+0x254>)
 8005daa:	bb1b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x1f8>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	3307      	adds	r3, #7
 8005db0:	f023 0307 	bic.w	r3, r3, #7
 8005db4:	3308      	adds	r3, #8
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dba:	443b      	add	r3, r7
 8005dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dbe:	e767      	b.n	8005c90 <_vfiprintf_r+0x94>
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc8:	e7a5      	b.n	8005d16 <_vfiprintf_r+0x11a>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f04f 0c0a 	mov.w	ip, #10
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	3401      	adds	r4, #1
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ddc:	3a30      	subs	r2, #48	; 0x30
 8005dde:	2a09      	cmp	r2, #9
 8005de0:	d903      	bls.n	8005dea <_vfiprintf_r+0x1ee>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0c5      	beq.n	8005d72 <_vfiprintf_r+0x176>
 8005de6:	9105      	str	r1, [sp, #20]
 8005de8:	e7c3      	b.n	8005d72 <_vfiprintf_r+0x176>
 8005dea:	4604      	mov	r4, r0
 8005dec:	2301      	movs	r3, #1
 8005dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df2:	e7f0      	b.n	8005dd6 <_vfiprintf_r+0x1da>
 8005df4:	ab03      	add	r3, sp, #12
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <_vfiprintf_r+0x258>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	f3af 8000 	nop.w
 8005e04:	4607      	mov	r7, r0
 8005e06:	1c78      	adds	r0, r7, #1
 8005e08:	d1d6      	bne.n	8005db8 <_vfiprintf_r+0x1bc>
 8005e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e0c:	07d9      	lsls	r1, r3, #31
 8005e0e:	d405      	bmi.n	8005e1c <_vfiprintf_r+0x220>
 8005e10:	89ab      	ldrh	r3, [r5, #12]
 8005e12:	059a      	lsls	r2, r3, #22
 8005e14:	d402      	bmi.n	8005e1c <_vfiprintf_r+0x220>
 8005e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e18:	f7ff fdb5 	bl	8005986 <__retarget_lock_release_recursive>
 8005e1c:	89ab      	ldrh	r3, [r5, #12]
 8005e1e:	065b      	lsls	r3, r3, #25
 8005e20:	f53f af12 	bmi.w	8005c48 <_vfiprintf_r+0x4c>
 8005e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e26:	e711      	b.n	8005c4c <_vfiprintf_r+0x50>
 8005e28:	ab03      	add	r3, sp, #12
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	462a      	mov	r2, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <_vfiprintf_r+0x258>)
 8005e32:	a904      	add	r1, sp, #16
 8005e34:	f000 f882 	bl	8005f3c <_printf_i>
 8005e38:	e7e4      	b.n	8005e04 <_vfiprintf_r+0x208>
 8005e3a:	bf00      	nop
 8005e3c:	080065bc 	.word	0x080065bc
 8005e40:	080065dc 	.word	0x080065dc
 8005e44:	0800659c 	.word	0x0800659c
 8005e48:	080065fc 	.word	0x080065fc
 8005e4c:	08006606 	.word	0x08006606
 8005e50:	00000000 	.word	0x00000000
 8005e54:	08005bd7 	.word	0x08005bd7
 8005e58:	08006602 	.word	0x08006602

08005e5c <_printf_common>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	4616      	mov	r6, r2
 8005e62:	4699      	mov	r9, r3
 8005e64:	688a      	ldr	r2, [r1, #8]
 8005e66:	690b      	ldr	r3, [r1, #16]
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	bfb8      	it	lt
 8005e6e:	4613      	movlt	r3, r2
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e76:	460c      	mov	r4, r1
 8005e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e7c:	b10a      	cbz	r2, 8005e82 <_printf_common+0x26>
 8005e7e:	3301      	adds	r3, #1
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	0699      	lsls	r1, r3, #26
 8005e86:	bf42      	ittt	mi
 8005e88:	6833      	ldrmi	r3, [r6, #0]
 8005e8a:	3302      	addmi	r3, #2
 8005e8c:	6033      	strmi	r3, [r6, #0]
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	f015 0506 	ands.w	r5, r5, #6
 8005e94:	d106      	bne.n	8005ea4 <_printf_common+0x48>
 8005e96:	f104 0a19 	add.w	sl, r4, #25
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	6832      	ldr	r2, [r6, #0]
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	dc28      	bgt.n	8005ef6 <_printf_common+0x9a>
 8005ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea8:	1e13      	subs	r3, r2, #0
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	bf18      	it	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	0692      	lsls	r2, r2, #26
 8005eb2:	d42d      	bmi.n	8005f10 <_printf_common+0xb4>
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ebc:	47c0      	blx	r8
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d020      	beq.n	8005f04 <_printf_common+0xa8>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	68e5      	ldr	r5, [r4, #12]
 8005ec6:	f003 0306 	and.w	r3, r3, #6
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	bf18      	it	ne
 8005ece:	2500      	movne	r5, #0
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	f04f 0600 	mov.w	r6, #0
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	bf08      	it	eq
 8005eda:	1aad      	subeq	r5, r5, r2
 8005edc:	6922      	ldr	r2, [r4, #16]
 8005ede:	bf08      	it	eq
 8005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bfc4      	itt	gt
 8005ee8:	1a9b      	subgt	r3, r3, r2
 8005eea:	18ed      	addgt	r5, r5, r3
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xcc>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xac>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4649      	mov	r1, r9
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c0      	blx	r8
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xb0>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c4      	b.n	8005e9a <_printf_common+0x3e>
 8005f10:	2030      	movs	r0, #48	; 0x30
 8005f12:	18e1      	adds	r1, r4, r3
 8005f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f1e:	4422      	add	r2, r4
 8005f20:	3302      	adds	r3, #2
 8005f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f26:	e7c5      	b.n	8005eb4 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa8>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x92>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	460c      	mov	r4, r1
 8005f42:	7e27      	ldrb	r7, [r4, #24]
 8005f44:	4691      	mov	r9, r2
 8005f46:	2f78      	cmp	r7, #120	; 0x78
 8005f48:	4680      	mov	r8, r0
 8005f4a:	469a      	mov	sl, r3
 8005f4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	; 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d9 	beq.w	8006110 <_printf_i+0x1d4>
 8005f5e:	2f58      	cmp	r7, #88	; 0x58
 8005f60:	f000 80a4 	beq.w	80060ac <_printf_i+0x170>
 8005f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a001      	add	r0, pc, #4	; (adr r0, 8005f7c <_printf_i+0x40>)
 8005f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060f7 	.word	0x080060f7
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	080060d9 	.word	0x080060d9
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	08006119 	.word	0x08006119
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060e1 	.word	0x080060e1
 8005fd4:	680b      	ldr	r3, [r1, #0]
 8005fd6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	600a      	str	r2, [r1, #0]
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a4      	b.n	8006132 <_printf_i+0x1f6>
 8005fe8:	6825      	ldr	r5, [r4, #0]
 8005fea:	6808      	ldr	r0, [r1, #0]
 8005fec:	062e      	lsls	r6, r5, #24
 8005fee:	f100 0304 	add.w	r3, r0, #4
 8005ff2:	d50a      	bpl.n	800600a <_printf_i+0xce>
 8005ff4:	6805      	ldr	r5, [r0, #0]
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	da03      	bge.n	8006004 <_printf_i+0xc8>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	426d      	negs	r5, r5
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	230a      	movs	r3, #10
 8006006:	485e      	ldr	r0, [pc, #376]	; (8006180 <_printf_i+0x244>)
 8006008:	e019      	b.n	800603e <_printf_i+0x102>
 800600a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800600e:	6805      	ldr	r5, [r0, #0]
 8006010:	600b      	str	r3, [r1, #0]
 8006012:	bf18      	it	ne
 8006014:	b22d      	sxthne	r5, r5
 8006016:	e7ef      	b.n	8005ff8 <_printf_i+0xbc>
 8006018:	680b      	ldr	r3, [r1, #0]
 800601a:	6825      	ldr	r5, [r4, #0]
 800601c:	1d18      	adds	r0, r3, #4
 800601e:	6008      	str	r0, [r1, #0]
 8006020:	0628      	lsls	r0, r5, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xec>
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0xf2>
 8006028:	0669      	lsls	r1, r5, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xe8>
 800602c:	881d      	ldrh	r5, [r3, #0]
 800602e:	2f6f      	cmp	r7, #111	; 0x6f
 8006030:	bf0c      	ite	eq
 8006032:	2308      	moveq	r3, #8
 8006034:	230a      	movne	r3, #10
 8006036:	4852      	ldr	r0, [pc, #328]	; (8006180 <_printf_i+0x244>)
 8006038:	2100      	movs	r1, #0
 800603a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800603e:	6866      	ldr	r6, [r4, #4]
 8006040:	2e00      	cmp	r6, #0
 8006042:	bfa8      	it	ge
 8006044:	6821      	ldrge	r1, [r4, #0]
 8006046:	60a6      	str	r6, [r4, #8]
 8006048:	bfa4      	itt	ge
 800604a:	f021 0104 	bicge.w	r1, r1, #4
 800604e:	6021      	strge	r1, [r4, #0]
 8006050:	b90d      	cbnz	r5, 8006056 <_printf_i+0x11a>
 8006052:	2e00      	cmp	r6, #0
 8006054:	d04d      	beq.n	80060f2 <_printf_i+0x1b6>
 8006056:	4616      	mov	r6, r2
 8006058:	fbb5 f1f3 	udiv	r1, r5, r3
 800605c:	fb03 5711 	mls	r7, r3, r1, r5
 8006060:	5dc7      	ldrb	r7, [r0, r7]
 8006062:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006066:	462f      	mov	r7, r5
 8006068:	42bb      	cmp	r3, r7
 800606a:	460d      	mov	r5, r1
 800606c:	d9f4      	bls.n	8006058 <_printf_i+0x11c>
 800606e:	2b08      	cmp	r3, #8
 8006070:	d10b      	bne.n	800608a <_printf_i+0x14e>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	07df      	lsls	r7, r3, #31
 8006076:	d508      	bpl.n	800608a <_printf_i+0x14e>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	6861      	ldr	r1, [r4, #4]
 800607c:	4299      	cmp	r1, r3
 800607e:	bfde      	ittt	le
 8006080:	2330      	movle	r3, #48	; 0x30
 8006082:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006086:	f106 36ff 	addle.w	r6, r6, #4294967295
 800608a:	1b92      	subs	r2, r2, r6
 800608c:	6122      	str	r2, [r4, #16]
 800608e:	464b      	mov	r3, r9
 8006090:	4621      	mov	r1, r4
 8006092:	4640      	mov	r0, r8
 8006094:	f8cd a000 	str.w	sl, [sp]
 8006098:	aa03      	add	r2, sp, #12
 800609a:	f7ff fedf 	bl	8005e5c <_printf_common>
 800609e:	3001      	adds	r0, #1
 80060a0:	d14c      	bne.n	800613c <_printf_i+0x200>
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	b004      	add	sp, #16
 80060a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ac:	4834      	ldr	r0, [pc, #208]	; (8006180 <_printf_i+0x244>)
 80060ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060b2:	680e      	ldr	r6, [r1, #0]
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80060ba:	061f      	lsls	r7, r3, #24
 80060bc:	600e      	str	r6, [r1, #0]
 80060be:	d514      	bpl.n	80060ea <_printf_i+0x1ae>
 80060c0:	07d9      	lsls	r1, r3, #31
 80060c2:	bf44      	itt	mi
 80060c4:	f043 0320 	orrmi.w	r3, r3, #32
 80060c8:	6023      	strmi	r3, [r4, #0]
 80060ca:	b91d      	cbnz	r5, 80060d4 <_printf_i+0x198>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f023 0320 	bic.w	r3, r3, #32
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	2310      	movs	r3, #16
 80060d6:	e7af      	b.n	8006038 <_printf_i+0xfc>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f043 0320 	orr.w	r3, r3, #32
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	2378      	movs	r3, #120	; 0x78
 80060e2:	4828      	ldr	r0, [pc, #160]	; (8006184 <_printf_i+0x248>)
 80060e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e8:	e7e3      	b.n	80060b2 <_printf_i+0x176>
 80060ea:	065e      	lsls	r6, r3, #25
 80060ec:	bf48      	it	mi
 80060ee:	b2ad      	uxthmi	r5, r5
 80060f0:	e7e6      	b.n	80060c0 <_printf_i+0x184>
 80060f2:	4616      	mov	r6, r2
 80060f4:	e7bb      	b.n	800606e <_printf_i+0x132>
 80060f6:	680b      	ldr	r3, [r1, #0]
 80060f8:	6826      	ldr	r6, [r4, #0]
 80060fa:	1d1d      	adds	r5, r3, #4
 80060fc:	6960      	ldr	r0, [r4, #20]
 80060fe:	600d      	str	r5, [r1, #0]
 8006100:	0635      	lsls	r5, r6, #24
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	d501      	bpl.n	800610a <_printf_i+0x1ce>
 8006106:	6018      	str	r0, [r3, #0]
 8006108:	e002      	b.n	8006110 <_printf_i+0x1d4>
 800610a:	0671      	lsls	r1, r6, #25
 800610c:	d5fb      	bpl.n	8006106 <_printf_i+0x1ca>
 800610e:	8018      	strh	r0, [r3, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	4616      	mov	r6, r2
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	e7ba      	b.n	800608e <_printf_i+0x152>
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	600a      	str	r2, [r1, #0]
 800611e:	681e      	ldr	r6, [r3, #0]
 8006120:	2100      	movs	r1, #0
 8006122:	4630      	mov	r0, r6
 8006124:	6862      	ldr	r2, [r4, #4]
 8006126:	f000 f929 	bl	800637c <memchr>
 800612a:	b108      	cbz	r0, 8006130 <_printf_i+0x1f4>
 800612c:	1b80      	subs	r0, r0, r6
 800612e:	6060      	str	r0, [r4, #4]
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	2300      	movs	r3, #0
 8006136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800613a:	e7a8      	b.n	800608e <_printf_i+0x152>
 800613c:	4632      	mov	r2, r6
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	47d0      	blx	sl
 8006146:	3001      	adds	r0, #1
 8006148:	d0ab      	beq.n	80060a2 <_printf_i+0x166>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	079b      	lsls	r3, r3, #30
 800614e:	d413      	bmi.n	8006178 <_printf_i+0x23c>
 8006150:	68e0      	ldr	r0, [r4, #12]
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	4298      	cmp	r0, r3
 8006156:	bfb8      	it	lt
 8006158:	4618      	movlt	r0, r3
 800615a:	e7a4      	b.n	80060a6 <_printf_i+0x16a>
 800615c:	2301      	movs	r3, #1
 800615e:	4632      	mov	r2, r6
 8006160:	4649      	mov	r1, r9
 8006162:	4640      	mov	r0, r8
 8006164:	47d0      	blx	sl
 8006166:	3001      	adds	r0, #1
 8006168:	d09b      	beq.n	80060a2 <_printf_i+0x166>
 800616a:	3501      	adds	r5, #1
 800616c:	68e3      	ldr	r3, [r4, #12]
 800616e:	9903      	ldr	r1, [sp, #12]
 8006170:	1a5b      	subs	r3, r3, r1
 8006172:	42ab      	cmp	r3, r5
 8006174:	dcf2      	bgt.n	800615c <_printf_i+0x220>
 8006176:	e7eb      	b.n	8006150 <_printf_i+0x214>
 8006178:	2500      	movs	r5, #0
 800617a:	f104 0619 	add.w	r6, r4, #25
 800617e:	e7f5      	b.n	800616c <_printf_i+0x230>
 8006180:	0800660d 	.word	0x0800660d
 8006184:	0800661e 	.word	0x0800661e

08006188 <_putc_r>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	460d      	mov	r5, r1
 800618c:	4614      	mov	r4, r2
 800618e:	4606      	mov	r6, r0
 8006190:	b118      	cbz	r0, 800619a <_putc_r+0x12>
 8006192:	6983      	ldr	r3, [r0, #24]
 8006194:	b90b      	cbnz	r3, 800619a <_putc_r+0x12>
 8006196:	f7ff fb45 	bl	8005824 <__sinit>
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <_putc_r+0x84>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d124      	bne.n	80061ea <_putc_r+0x62>
 80061a0:	6874      	ldr	r4, [r6, #4]
 80061a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a4:	07d8      	lsls	r0, r3, #31
 80061a6:	d405      	bmi.n	80061b4 <_putc_r+0x2c>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	0599      	lsls	r1, r3, #22
 80061ac:	d402      	bmi.n	80061b4 <_putc_r+0x2c>
 80061ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b0:	f7ff fbe8 	bl	8005984 <__retarget_lock_acquire_recursive>
 80061b4:	68a3      	ldr	r3, [r4, #8]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	da05      	bge.n	80061ca <_putc_r+0x42>
 80061be:	69a2      	ldr	r2, [r4, #24]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	db1c      	blt.n	80061fe <_putc_r+0x76>
 80061c4:	b2eb      	uxtb	r3, r5
 80061c6:	2b0a      	cmp	r3, #10
 80061c8:	d019      	beq.n	80061fe <_putc_r+0x76>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	701d      	strb	r5, [r3, #0]
 80061d2:	b2ed      	uxtb	r5, r5
 80061d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d6:	07da      	lsls	r2, r3, #31
 80061d8:	d405      	bmi.n	80061e6 <_putc_r+0x5e>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	059b      	lsls	r3, r3, #22
 80061de:	d402      	bmi.n	80061e6 <_putc_r+0x5e>
 80061e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e2:	f7ff fbd0 	bl	8005986 <__retarget_lock_release_recursive>
 80061e6:	4628      	mov	r0, r5
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <_putc_r+0x88>)
 80061ec:	429c      	cmp	r4, r3
 80061ee:	d101      	bne.n	80061f4 <_putc_r+0x6c>
 80061f0:	68b4      	ldr	r4, [r6, #8]
 80061f2:	e7d6      	b.n	80061a2 <_putc_r+0x1a>
 80061f4:	4b07      	ldr	r3, [pc, #28]	; (8006214 <_putc_r+0x8c>)
 80061f6:	429c      	cmp	r4, r3
 80061f8:	bf08      	it	eq
 80061fa:	68f4      	ldreq	r4, [r6, #12]
 80061fc:	e7d1      	b.n	80061a2 <_putc_r+0x1a>
 80061fe:	4629      	mov	r1, r5
 8006200:	4622      	mov	r2, r4
 8006202:	4630      	mov	r0, r6
 8006204:	f7ff f916 	bl	8005434 <__swbuf_r>
 8006208:	4605      	mov	r5, r0
 800620a:	e7e3      	b.n	80061d4 <_putc_r+0x4c>
 800620c:	080065bc 	.word	0x080065bc
 8006210:	080065dc 	.word	0x080065dc
 8006214:	0800659c 	.word	0x0800659c

08006218 <_sbrk_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	2300      	movs	r3, #0
 800621c:	4d05      	ldr	r5, [pc, #20]	; (8006234 <_sbrk_r+0x1c>)
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	602b      	str	r3, [r5, #0]
 8006224:	f7fa fb38 	bl	8000898 <_sbrk>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_sbrk_r+0x1a>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_sbrk_r+0x1a>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	20000928 	.word	0x20000928

08006238 <__sread>:
 8006238:	b510      	push	{r4, lr}
 800623a:	460c      	mov	r4, r1
 800623c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006240:	f000 f8b6 	bl	80063b0 <_read_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	bfab      	itete	ge
 8006248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800624a:	89a3      	ldrhlt	r3, [r4, #12]
 800624c:	181b      	addge	r3, r3, r0
 800624e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006252:	bfac      	ite	ge
 8006254:	6563      	strge	r3, [r4, #84]	; 0x54
 8006256:	81a3      	strhlt	r3, [r4, #12]
 8006258:	bd10      	pop	{r4, pc}

0800625a <__swrite>:
 800625a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625e:	461f      	mov	r7, r3
 8006260:	898b      	ldrh	r3, [r1, #12]
 8006262:	4605      	mov	r5, r0
 8006264:	05db      	lsls	r3, r3, #23
 8006266:	460c      	mov	r4, r1
 8006268:	4616      	mov	r6, r2
 800626a:	d505      	bpl.n	8006278 <__swrite+0x1e>
 800626c:	2302      	movs	r3, #2
 800626e:	2200      	movs	r2, #0
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	f000 f870 	bl	8006358 <_lseek_r>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	4632      	mov	r2, r6
 800627c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	4628      	mov	r0, r5
 8006284:	463b      	mov	r3, r7
 8006286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800628a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800628e:	f000 b817 	b.w	80062c0 <_write_r>

08006292 <__sseek>:
 8006292:	b510      	push	{r4, lr}
 8006294:	460c      	mov	r4, r1
 8006296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629a:	f000 f85d 	bl	8006358 <_lseek_r>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	bf15      	itete	ne
 80062a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062ae:	81a3      	strheq	r3, [r4, #12]
 80062b0:	bf18      	it	ne
 80062b2:	81a3      	strhne	r3, [r4, #12]
 80062b4:	bd10      	pop	{r4, pc}

080062b6 <__sclose>:
 80062b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ba:	f000 b81b 	b.w	80062f4 <_close_r>
	...

080062c0 <_write_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	2200      	movs	r2, #0
 80062ca:	4d05      	ldr	r5, [pc, #20]	; (80062e0 <_write_r+0x20>)
 80062cc:	602a      	str	r2, [r5, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f7fa fd52 	bl	8000d78 <_write>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_write_r+0x1e>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_write_r+0x1e>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20000928 	.word	0x20000928

080062e4 <abort>:
 80062e4:	2006      	movs	r0, #6
 80062e6:	b508      	push	{r3, lr}
 80062e8:	f000 f89c 	bl	8006424 <raise>
 80062ec:	2001      	movs	r0, #1
 80062ee:	f7fa fa7c 	bl	80007ea <_exit>
	...

080062f4 <_close_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	2300      	movs	r3, #0
 80062f8:	4d05      	ldr	r5, [pc, #20]	; (8006310 <_close_r+0x1c>)
 80062fa:	4604      	mov	r4, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	602b      	str	r3, [r5, #0]
 8006300:	f7fa fa9a 	bl	8000838 <_close>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_close_r+0x1a>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_close_r+0x1a>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	20000928 	.word	0x20000928

08006314 <_fstat_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	2300      	movs	r3, #0
 8006318:	4d06      	ldr	r5, [pc, #24]	; (8006334 <_fstat_r+0x20>)
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	4611      	mov	r1, r2
 8006320:	602b      	str	r3, [r5, #0]
 8006322:	f7fa fa94 	bl	800084e <_fstat>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d102      	bne.n	8006330 <_fstat_r+0x1c>
 800632a:	682b      	ldr	r3, [r5, #0]
 800632c:	b103      	cbz	r3, 8006330 <_fstat_r+0x1c>
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	bd38      	pop	{r3, r4, r5, pc}
 8006332:	bf00      	nop
 8006334:	20000928 	.word	0x20000928

08006338 <_isatty_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	2300      	movs	r3, #0
 800633c:	4d05      	ldr	r5, [pc, #20]	; (8006354 <_isatty_r+0x1c>)
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fa fa92 	bl	800086c <_isatty>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_isatty_r+0x1a>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_isatty_r+0x1a>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000928 	.word	0x20000928

08006358 <_lseek_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	4611      	mov	r1, r2
 8006360:	2200      	movs	r2, #0
 8006362:	4d05      	ldr	r5, [pc, #20]	; (8006378 <_lseek_r+0x20>)
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f7fa fa8a 	bl	8000880 <_lseek>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_lseek_r+0x1e>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_lseek_r+0x1e>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20000928 	.word	0x20000928

0800637c <memchr>:
 800637c:	4603      	mov	r3, r0
 800637e:	b510      	push	{r4, lr}
 8006380:	b2c9      	uxtb	r1, r1
 8006382:	4402      	add	r2, r0
 8006384:	4293      	cmp	r3, r2
 8006386:	4618      	mov	r0, r3
 8006388:	d101      	bne.n	800638e <memchr+0x12>
 800638a:	2000      	movs	r0, #0
 800638c:	e003      	b.n	8006396 <memchr+0x1a>
 800638e:	7804      	ldrb	r4, [r0, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	428c      	cmp	r4, r1
 8006394:	d1f6      	bne.n	8006384 <memchr+0x8>
 8006396:	bd10      	pop	{r4, pc}

08006398 <__malloc_lock>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__malloc_lock+0x8>)
 800639a:	f7ff baf3 	b.w	8005984 <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	20000920 	.word	0x20000920

080063a4 <__malloc_unlock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_unlock+0x8>)
 80063a6:	f7ff baee 	b.w	8005986 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000920 	.word	0x20000920

080063b0 <_read_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	4611      	mov	r1, r2
 80063b8:	2200      	movs	r2, #0
 80063ba:	4d05      	ldr	r5, [pc, #20]	; (80063d0 <_read_r+0x20>)
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	f7fa fa1d 	bl	80007fe <_read>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_read_r+0x1e>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_read_r+0x1e>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20000928 	.word	0x20000928

080063d4 <_raise_r>:
 80063d4:	291f      	cmp	r1, #31
 80063d6:	b538      	push	{r3, r4, r5, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	d904      	bls.n	80063e8 <_raise_r+0x14>
 80063de:	2316      	movs	r3, #22
 80063e0:	6003      	str	r3, [r0, #0]
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80063ea:	b112      	cbz	r2, 80063f2 <_raise_r+0x1e>
 80063ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063f0:	b94b      	cbnz	r3, 8006406 <_raise_r+0x32>
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 f830 	bl	8006458 <_getpid_r>
 80063f8:	462a      	mov	r2, r5
 80063fa:	4601      	mov	r1, r0
 80063fc:	4620      	mov	r0, r4
 80063fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006402:	f000 b817 	b.w	8006434 <_kill_r>
 8006406:	2b01      	cmp	r3, #1
 8006408:	d00a      	beq.n	8006420 <_raise_r+0x4c>
 800640a:	1c59      	adds	r1, r3, #1
 800640c:	d103      	bne.n	8006416 <_raise_r+0x42>
 800640e:	2316      	movs	r3, #22
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	2001      	movs	r0, #1
 8006414:	e7e7      	b.n	80063e6 <_raise_r+0x12>
 8006416:	2400      	movs	r4, #0
 8006418:	4628      	mov	r0, r5
 800641a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800641e:	4798      	blx	r3
 8006420:	2000      	movs	r0, #0
 8006422:	e7e0      	b.n	80063e6 <_raise_r+0x12>

08006424 <raise>:
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <raise+0xc>)
 8006426:	4601      	mov	r1, r0
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f7ff bfd3 	b.w	80063d4 <_raise_r>
 800642e:	bf00      	nop
 8006430:	2000000c 	.word	0x2000000c

08006434 <_kill_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	2300      	movs	r3, #0
 8006438:	4d06      	ldr	r5, [pc, #24]	; (8006454 <_kill_r+0x20>)
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	4611      	mov	r1, r2
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	f7fa f9c2 	bl	80007ca <_kill>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d102      	bne.n	8006450 <_kill_r+0x1c>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	b103      	cbz	r3, 8006450 <_kill_r+0x1c>
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	bd38      	pop	{r3, r4, r5, pc}
 8006452:	bf00      	nop
 8006454:	20000928 	.word	0x20000928

08006458 <_getpid_r>:
 8006458:	f7fa b9b0 	b.w	80007bc <_getpid>

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
