
ZeroGravity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004488  08004488  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004488  08004488  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004488  08004488  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000014  080044a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  080044a4  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dbe  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027dd  00000000  00000000  00030dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  000335d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00010bf4  00000000  00000000  000340b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f578  00000000  00000000  00044ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0005f3ec  00000000  00000000  0005421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000b3608  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a00  00000000  00000000  000b3660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aa4  00000000  00000000  000b4060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080035e0 	.word	0x080035e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080035e0 	.word	0x080035e0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <MX_GPIO_Init+0xd0>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2d      	ldr	r2, [pc, #180]	; (800021c <MX_GPIO_Init+0xd0>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2b      	ldr	r3, [pc, #172]	; (800021c <MX_GPIO_Init+0xd0>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b28      	ldr	r3, [pc, #160]	; (800021c <MX_GPIO_Init+0xd0>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a27      	ldr	r2, [pc, #156]	; (800021c <MX_GPIO_Init+0xd0>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b25      	ldr	r3, [pc, #148]	; (800021c <MX_GPIO_Init+0xd0>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b22      	ldr	r3, [pc, #136]	; (800021c <MX_GPIO_Init+0xd0>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a21      	ldr	r2, [pc, #132]	; (800021c <MX_GPIO_Init+0xd0>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1f      	ldr	r3, [pc, #124]	; (800021c <MX_GPIO_Init+0xd0>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001a8:	4b1c      	ldr	r3, [pc, #112]	; (800021c <MX_GPIO_Init+0xd0>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1b      	ldr	r2, [pc, #108]	; (800021c <MX_GPIO_Init+0xd0>)
 80001ae:	f043 0310 	orr.w	r3, r3, #16
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b19      	ldr	r3, [pc, #100]	; (800021c <MX_GPIO_Init+0xd0>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0310 	and.w	r3, r3, #16
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80001c6:	4816      	ldr	r0, [pc, #88]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001c8:	f001 fcde 	bl	8001b88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80001cc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80001d0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	480e      	ldr	r0, [pc, #56]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001e6:	f001 fb4b 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80001ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80001ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	480a      	ldr	r0, [pc, #40]	; (8000228 <MX_GPIO_Init+0xdc>)
 8000200:	f001 fb3e 	bl	8001880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000204:	2200      	movs	r2, #0
 8000206:	2100      	movs	r1, #0
 8000208:	2028      	movs	r0, #40	; 0x28
 800020a:	f001 fa52 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020e:	2028      	movs	r0, #40	; 0x28
 8000210:	f001 fa6b 	bl	80016ea <HAL_NVIC_EnableIRQ>

}
 8000214:	bf00      	nop
 8000216:	3720      	adds	r7, #32
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40021000 	.word	0x40021000
 8000220:	40010c00 	.word	0x40010c00
 8000224:	10210000 	.word	0x10210000
 8000228:	40011000 	.word	0x40011000

0800022c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <MX_I2C1_Init+0x50>)
 8000232:	4a13      	ldr	r2, [pc, #76]	; (8000280 <MX_I2C1_Init+0x54>)
 8000234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_I2C1_Init+0x50>)
 8000238:	4a12      	ldr	r2, [pc, #72]	; (8000284 <MX_I2C1_Init+0x58>)
 800023a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <MX_I2C1_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_I2C1_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <MX_I2C1_Init+0x50>)
 800024a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800024e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <MX_I2C1_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <MX_I2C1_Init+0x50>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <MX_I2C1_Init+0x50>)
 800026a:	f001 fcbd 	bl	8001be8 <HAL_I2C_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000274:	f000 f89d 	bl	80003b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	2000047c 	.word	0x2000047c
 8000280:	40005400 	.word	0x40005400
 8000284:	000186a0 	.word	0x000186a0

08000288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000290:	f107 0310 	add.w	r3, r7, #16
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <HAL_I2C_MspInit+0x70>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d123      	bne.n	80002f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <HAL_I2C_MspInit+0x74>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a13      	ldr	r2, [pc, #76]	; (80002fc <HAL_I2C_MspInit+0x74>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <HAL_I2C_MspInit+0x74>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0308 	and.w	r3, r3, #8
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002c0:	23c0      	movs	r3, #192	; 0xc0
 80002c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002c4:	2312      	movs	r3, #18
 80002c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c8:	2303      	movs	r3, #3
 80002ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002cc:	f107 0310 	add.w	r3, r7, #16
 80002d0:	4619      	mov	r1, r3
 80002d2:	480b      	ldr	r0, [pc, #44]	; (8000300 <HAL_I2C_MspInit+0x78>)
 80002d4:	f001 fad4 	bl	8001880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <HAL_I2C_MspInit+0x74>)
 80002da:	69db      	ldr	r3, [r3, #28]
 80002dc:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_I2C_MspInit+0x74>)
 80002de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e2:	61d3      	str	r3, [r2, #28]
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <HAL_I2C_MspInit+0x74>)
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002f0:	bf00      	nop
 80002f2:	3720      	adds	r7, #32
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40005400 	.word	0x40005400
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010c00 	.word	0x40010c00

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000308:	f001 f876 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030c:	f000 f811 	bl	8000332 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000310:	f7ff ff1c 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000314:	f000 fe64 	bl	8000fe0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000318:	f7ff ff88 	bl	800022c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  sh1106_Init();
 800031c:	f000 f866 	bl	80003ec <sh1106_Init>
  Switch_Init();
 8000320:	f000 fafc 	bl	800091c <Switch_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sh1106_test();
 8000324:	f000 fa48 	bl	80007b8 <sh1106_test>
	  //printf("Terminal Test\r\n");
	  Switch_Task();
 8000328:	f000 fb1e 	bl	8000968 <Switch_Task>
	  Bluetooth_Process();
 800032c:	f000 fc70 	bl	8000c10 <Bluetooth_Process>
	  sh1106_test();
 8000330:	e7f8      	b.n	8000324 <main+0x20>

08000332 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b090      	sub	sp, #64	; 0x40
 8000336:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000338:	f107 0318 	add.w	r3, r7, #24
 800033c:	2228      	movs	r2, #40	; 0x28
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f003 f945 	bl	80035d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	2302      	movs	r3, #2
 8000356:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	2310      	movs	r3, #16
 800035e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000364:	2300      	movs	r3, #0
 8000366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f892 	bl	800249c <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800037e:	f000 f818 	bl	80003b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2101      	movs	r1, #1
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fafe 	bl	800299c <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003a6:	f000 f804 	bl	80003b2 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b6:	b672      	cpsid	i
}
 80003b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ba:	e7fe      	b.n	80003ba <Error_Handler+0x8>

080003bc <sh1106_WriteCommand>:

//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
static void sh1106_WriteCommand(uint8_t command) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	 * @param  pData Pointer to data buffer
	 * @param  Size Amount of data to be sent
	 * @param  Timeout Timeout duration
	 * @retval HAL status
	 */
	HAL_I2C_Mem_Write(&SH1106_I2C_PORT, SH1106_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80003c6:	230a      	movs	r3, #10
 80003c8:	9302      	str	r3, [sp, #8]
 80003ca:	2301      	movs	r3, #1
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2301      	movs	r3, #1
 80003d4:	2200      	movs	r2, #0
 80003d6:	2178      	movs	r1, #120	; 0x78
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <sh1106_WriteCommand+0x2c>)
 80003da:	f001 fd49 	bl	8001e70 <HAL_I2C_Mem_Write>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000047c 	.word	0x2000047c

080003ec <sh1106_Init>:

//
//	Het scherm initialiseren voor gebruik
//
uint8_t sh1106_Init(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	// Even wachten zodat het scherm zeker opgestart is
	HAL_Delay(100);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f001 f863 	bl	80014bc <HAL_Delay>
//	sh1106_WriteCommand(0x8D);	//Enable charge pump regulator
//	sh1106_WriteCommand(0x14);
//
//	sh1106_WriteCommand(0xAF);	//Display ON

	sh1106_WriteCommand(0xAE);	/*display off*/
 80003f6:	20ae      	movs	r0, #174	; 0xae
 80003f8:	f7ff ffe0 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0x02);	/*set lower column address*/
 80003fc:	2002      	movs	r0, #2
 80003fe:	f7ff ffdd 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x10);	/*set higher column address*/
 8000402:	2010      	movs	r0, #16
 8000404:	f7ff ffda 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0x40);	/*set display start line*/
 8000408:	2040      	movs	r0, #64	; 0x40
 800040a:	f7ff ffd7 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xB0); /*set page address*/
 800040e:	20b0      	movs	r0, #176	; 0xb0
 8000410:	f7ff ffd4 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0x81); /*contract control*/
 8000414:	2081      	movs	r0, #129	; 0x81
 8000416:	f7ff ffd1 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0xBF); /*128*/
 800041a:	20bf      	movs	r0, #191	; 0xbf
 800041c:	f7ff ffce 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xA1); /*set segment remap*/
 8000420:	20a1      	movs	r0, #161	; 0xa1
 8000422:	f7ff ffcb 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xA6); /*normal / reverse*/
 8000426:	20a6      	movs	r0, #166	; 0xa6
 8000428:	f7ff ffc8 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xA8); /*multiplex ratio*/
 800042c:	20a8      	movs	r0, #168	; 0xa8
 800042e:	f7ff ffc5 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x3F); /*duty = 1/64*/
 8000432:	203f      	movs	r0, #63	; 0x3f
 8000434:	f7ff ffc2 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xad); /*set charge pump enable*/
 8000438:	20ad      	movs	r0, #173	; 0xad
 800043a:	f7ff ffbf 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x8a); /* 0x8a 外供 VCC */
 800043e:	208a      	movs	r0, #138	; 0x8a
 8000440:	f7ff ffbc 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0x32); /*0X30---0X33 set VPP 8V */
 8000444:	2032      	movs	r0, #50	; 0x32
 8000446:	f7ff ffb9 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xC8); /*Com scan direction*/
 800044a:	20c8      	movs	r0, #200	; 0xc8
 800044c:	f7ff ffb6 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xD3); /*set display offset*/
 8000450:	20d3      	movs	r0, #211	; 0xd3
 8000452:	f7ff ffb3 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x00); /* 0x20 */
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ffb0 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xD5); /*set osc division*/
 800045c:	20d5      	movs	r0, #213	; 0xd5
 800045e:	f7ff ffad 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x80);
 8000462:	2080      	movs	r0, #128	; 0x80
 8000464:	f7ff ffaa 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xD9); /*set pre-charge period*/
 8000468:	20d9      	movs	r0, #217	; 0xd9
 800046a:	f7ff ffa7 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x22); /*0x22*/
 800046e:	2022      	movs	r0, #34	; 0x22
 8000470:	f7ff ffa4 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xDA); /*set COM pins*/
 8000474:	20da      	movs	r0, #218	; 0xda
 8000476:	f7ff ffa1 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x12);
 800047a:	2012      	movs	r0, #18
 800047c:	f7ff ff9e 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xdb); /*set vcomh*/
 8000480:	20db      	movs	r0, #219	; 0xdb
 8000482:	f7ff ff9b 	bl	80003bc <sh1106_WriteCommand>
	sh1106_WriteCommand(0x40);
 8000486:	2040      	movs	r0, #64	; 0x40
 8000488:	f7ff ff98 	bl	80003bc <sh1106_WriteCommand>

	sh1106_WriteCommand(0xAF); /*display ON*/
 800048c:	20af      	movs	r0, #175	; 0xaf
 800048e:	f7ff ff95 	bl	80003bc <sh1106_WriteCommand>

#endif
	/* Clearen scherm */
	sh1106_Fill(Black);
 8000492:	2000      	movs	r0, #0
 8000494:	f000 f810 	bl	80004b8 <sh1106_Fill>

	/* Update screen */
	sh1106_UpdateScreen();
 8000498:	f000 f830 	bl	80004fc <sh1106_UpdateScreen>

	/* Set default values */
	SH1106.CurrentX = 0;
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <sh1106_Init+0xc8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <sh1106_Init+0xc8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SH1106.Initialized = 1;
 80004a8:	4b02      	ldr	r3, [pc, #8]	; (80004b4 <sh1106_Init+0xc8>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80004ae:	2301      	movs	r3, #1
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000450 	.word	0x20000450

080004b8 <sh1106_Fill>:

//
//	We zetten de hele buffer op een bepaalde kleur
// 	color 	=> de kleur waarin alles moet
//
void sh1106_Fill(SH1106_COLOR color) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	e00d      	b.n	80004e4 <sh1106_Fill+0x2c>
		SH1106_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d101      	bne.n	80004d2 <sh1106_Fill+0x1a>
 80004ce:	2100      	movs	r1, #0
 80004d0:	e000      	b.n	80004d4 <sh1106_Fill+0x1c>
 80004d2:	21ff      	movs	r1, #255	; 0xff
 80004d4:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <sh1106_Fill+0x40>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4413      	add	r3, r2
 80004da:	460a      	mov	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80004ea:	d3ed      	bcc.n	80004c8 <sh1106_Fill+0x10>
	}
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000030 	.word	0x20000030

080004fc <sh1106_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void sh1106_UpdateScreen(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	e021      	b.n	800054c <sh1106_UpdateScreen+0x50>
		sh1106_WriteCommand(0xB0 + i);
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	3b50      	subs	r3, #80	; 0x50
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff54 	bl	80003bc <sh1106_WriteCommand>
		sh1106_WriteCommand(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ff51 	bl	80003bc <sh1106_WriteCommand>
		sh1106_WriteCommand(0x10);
 800051a:	2010      	movs	r0, #16
 800051c:	f7ff ff4e 	bl	80003bc <sh1106_WriteCommand>

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(&SH1106_I2C_PORT, SH1106_I2C_ADDR, 0x40, 1, &SH1106_Buffer[SH1106_WIDTH * i], SH1106_WIDTH, 100);
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	4613      	mov	r3, r2
 8000524:	015b      	lsls	r3, r3, #5
 8000526:	4413      	add	r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	461a      	mov	r2, r3
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <sh1106_UpdateScreen+0x60>)
 800052e:	4413      	add	r3, r2
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	9202      	str	r2, [sp, #8]
 8000534:	2284      	movs	r2, #132	; 0x84
 8000536:	9201      	str	r2, [sp, #4]
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2301      	movs	r3, #1
 800053c:	2240      	movs	r2, #64	; 0x40
 800053e:	2178      	movs	r1, #120	; 0x78
 8000540:	4807      	ldr	r0, [pc, #28]	; (8000560 <sh1106_UpdateScreen+0x64>)
 8000542:	f001 fc95 	bl	8001e70 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3301      	adds	r3, #1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b07      	cmp	r3, #7
 8000550:	d9da      	bls.n	8000508 <sh1106_UpdateScreen+0xc>
	}
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000030 	.word	0x20000030
 8000560:	2000047c 	.word	0x2000047c

08000564 <sh1106_DrawPixel>:
//	1 pixel op het scherm tekenen
//	X => X coordinaat
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void sh1106_DrawPixel(uint8_t x, uint8_t y, SH1106_COLOR color) {
 8000564:	b490      	push	{r4, r7}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	460b      	mov	r3, r1
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	4613      	mov	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
	if (x >= SH1106_WIDTH || y >= SH1106_HEIGHT) {
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b83      	cmp	r3, #131	; 0x83
 800057a:	d854      	bhi.n	8000626 <sh1106_DrawPixel+0xc2>
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	2b3f      	cmp	r3, #63	; 0x3f
 8000580:	d851      	bhi.n	8000626 <sh1106_DrawPixel+0xc2>
		// We gaan niet buiten het scherm schrijven
		return;
	}

	// Kijken of de pixel geinverteerd moet worden
	if (SH1106.Inverted) {
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <sh1106_DrawPixel+0xcc>)
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <sh1106_DrawPixel+0x34>
		color = (SH1106_COLOR) !color;
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf0c      	ite	eq
 8000590:	2301      	moveq	r3, #1
 8000592:	2300      	movne	r3, #0
 8000594:	b2db      	uxtb	r3, r3
 8000596:	717b      	strb	r3, [r7, #5]
	}

	// We zetten de juiste kleur voor de pixel
	if (color == White) {
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d120      	bne.n	80005e0 <sh1106_DrawPixel+0x7c>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	b2d8      	uxtb	r0, r3
 80005a6:	4601      	mov	r1, r0
 80005a8:	460b      	mov	r3, r1
 80005aa:	015b      	lsls	r3, r3, #5
 80005ac:	440b      	add	r3, r1
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <sh1106_DrawPixel+0xd0>)
 80005b4:	5cd3      	ldrb	r3, [r2, r3]
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25c      	sxtb	r4, r3
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4601      	mov	r1, r0
 80005ce:	460b      	mov	r3, r1
 80005d0:	015b      	lsls	r3, r3, #5
 80005d2:	440b      	add	r3, r1
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	b2e1      	uxtb	r1, r4
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <sh1106_DrawPixel+0xd0>)
 80005dc:	54d1      	strb	r1, [r2, r3]
 80005de:	e023      	b.n	8000628 <sh1106_DrawPixel+0xc4>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80005e0:	79fa      	ldrb	r2, [r7, #7]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	08db      	lsrs	r3, r3, #3
 80005e6:	b2d8      	uxtb	r0, r3
 80005e8:	4601      	mov	r1, r0
 80005ea:	460b      	mov	r3, r1
 80005ec:	015b      	lsls	r3, r3, #5
 80005ee:	440b      	add	r3, r1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <sh1106_DrawPixel+0xd0>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	2101      	movs	r1, #1
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	b25b      	sxtb	r3, r3
 8000608:	43db      	mvns	r3, r3
 800060a:	b25b      	sxtb	r3, r3
 800060c:	4013      	ands	r3, r2
 800060e:	b25c      	sxtb	r4, r3
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	4601      	mov	r1, r0
 8000614:	460b      	mov	r3, r1
 8000616:	015b      	lsls	r3, r3, #5
 8000618:	440b      	add	r3, r1
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	b2e1      	uxtb	r1, r4
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <sh1106_DrawPixel+0xd0>)
 8000622:	54d1      	strb	r1, [r2, r3]
 8000624:	e000      	b.n	8000628 <sh1106_DrawPixel+0xc4>
		return;
 8000626:	bf00      	nop
	}
}
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bc90      	pop	{r4, r7}
 800062e:	4770      	bx	lr
 8000630:	20000450 	.word	0x20000450
 8000634:	20000030 	.word	0x20000030

08000638 <sh1106_WriteChar>:
//	We willen 1 char naar het scherm sturen
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char sh1106_WriteChar(char ch, FontDef Font, SH1106_COLOR color) {
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	4604      	mov	r4, r0
 8000640:	1d38      	adds	r0, r7, #4
 8000642:	e880 0006 	stmia.w	r0, {r1, r2}
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	4613      	mov	r3, r2
 800064e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Kijken of er nog plaats is op deze lijn
	if (SH1106_WIDTH <= (SH1106.CurrentX + Font.FontWidth)
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <sh1106_WriteChar+0xfc>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	793b      	ldrb	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	2b83      	cmp	r3, #131	; 0x83
 800065c:	dc06      	bgt.n	800066c <sh1106_WriteChar+0x34>
			|| SH1106_HEIGHT <= (SH1106.CurrentY + Font.FontHeight)) {
 800065e:	4b35      	ldr	r3, [pc, #212]	; (8000734 <sh1106_WriteChar+0xfc>)
 8000660:	885b      	ldrh	r3, [r3, #2]
 8000662:	461a      	mov	r2, r3
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	4413      	add	r3, r2
 8000668:	2b3f      	cmp	r3, #63	; 0x3f
 800066a:	dd01      	ble.n	8000670 <sh1106_WriteChar+0x38>
		// Er is geen plaats meer
		return 0;
 800066c:	2300      	movs	r3, #0
 800066e:	e05d      	b.n	800072c <sh1106_WriteChar+0xf4>
	}

	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	e04c      	b.n	8000710 <sh1106_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3b20      	subs	r3, #32
 800067c:	7979      	ldrb	r1, [r7, #5]
 800067e:	fb01 f303 	mul.w	r3, r1, r3
 8000682:	4619      	mov	r1, r3
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	440b      	add	r3, r1
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	e034      	b.n	8000700 <sh1106_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <sh1106_WriteChar+0x94>
				sh1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i),
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <sh1106_WriteChar+0xfc>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	b2d8      	uxtb	r0, r3
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <sh1106_WriteChar+0xfc>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4413      	add	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f7ff ff4d 	bl	8000564 <sh1106_DrawPixel>
 80006ca:	e016      	b.n	80006fa <sh1106_WriteChar+0xc2>
						(SH1106_COLOR) color);
			} else {
				sh1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i),
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <sh1106_WriteChar+0xfc>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <sh1106_WriteChar+0xfc>)
 80006dc:	885b      	ldrh	r3, [r3, #2]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4413      	add	r3, r2
 80006e6:	b2d9      	uxtb	r1, r3
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf0c      	ite	eq
 80006ee:	2301      	moveq	r3, #1
 80006f0:	2300      	movne	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	f7ff ff35 	bl	8000564 <sh1106_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	793b      	ldrb	r3, [r7, #4]
 8000702:	461a      	mov	r2, r3
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	4293      	cmp	r3, r2
 8000708:	d3c5      	bcc.n	8000696 <sh1106_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3301      	adds	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	461a      	mov	r2, r3
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	4293      	cmp	r3, r2
 8000718:	d3ad      	bcc.n	8000676 <sh1106_WriteChar+0x3e>
			}
		}
	}

	// De huidige positie is nu verplaatst
	SH1106.CurrentX += Font.FontWidth;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <sh1106_WriteChar+0xfc>)
 800071c:	881a      	ldrh	r2, [r3, #0]
 800071e:	793b      	ldrb	r3, [r7, #4]
 8000720:	b29b      	uxth	r3, r3
 8000722:	4413      	add	r3, r2
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <sh1106_WriteChar+0xfc>)
 8000728:	801a      	strh	r2, [r3, #0]

	// We geven het geschreven char terug voor validatie
	return ch;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3724      	adds	r7, #36	; 0x24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	20000450 	.word	0x20000450

08000738 <sh1106_WriteString>:
//	Functie voor het wegschrijven van een hele string
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char sh1106_WriteString(char *str, FontDef Font, SH1106_COLOR color) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	1d38      	adds	r0, r7, #4
 8000742:	e880 0006 	stmia.w	r0, {r1, r2}
 8000746:	70fb      	strb	r3, [r7, #3]
	// We schrijven alle char tot een nulbyte
	while (*str) {
 8000748:	e012      	b.n	8000770 <sh1106_WriteString+0x38>
		if (sh1106_WriteChar(*str, Font, color) != *str) {
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	7818      	ldrb	r0, [r3, #0]
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	1d3a      	adds	r2, r7, #4
 8000752:	ca06      	ldmia	r2, {r1, r2}
 8000754:	f7ff ff70 	bl	8000638 <sh1106_WriteChar>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d002      	beq.n	800076a <sh1106_WriteString+0x32>
			// Het karakter is niet juist weggeschreven
			return *str;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e008      	b.n	800077c <sh1106_WriteString+0x44>
		}

		// Volgende char
		str++;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1e8      	bne.n	800074a <sh1106_WriteString+0x12>
	}

	// Alles gelukt, we sturen dus 0 terug
	return *str;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	781b      	ldrb	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <sh1106_SetCursor>:

//
//	Zet de cursor op een coordinaat
//
void sh1106_SetCursor(uint8_t x, uint8_t y) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SH1106.CurrentX = x + 1;
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	b29b      	uxth	r3, r3
 8000798:	3301      	adds	r3, #1
 800079a:	b29a      	uxth	r2, r3
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <sh1106_SetCursor+0x30>)
 800079e:	801a      	strh	r2, [r3, #0]
	//SH1106.CurrentX = x;
	SH1106.CurrentY = y;
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <sh1106_SetCursor+0x30>)
 80007a6:	805a      	strh	r2, [r3, #2]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000450 	.word	0x20000450

080007b8 <sh1106_test>:
	sh1106_WriteCommand(0x8D);
	sh1106_WriteCommand(0x10);
	sh1106_WriteCommand(0xAE);
}

void sh1106_test(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	sh1106_SetCursor(0, 0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ffe0 	bl	8000784 <sh1106_SetCursor>
	sh1106_WriteString("ZG REV 0.1 Test", Font_11x18, White);
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <sh1106_test+0x44>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <sh1106_test+0x48>)
 80007cc:	f7ff ffb4 	bl	8000738 <sh1106_WriteString>
	sh1106_UpdateScreen();
 80007d0:	f7ff fe94 	bl	80004fc <sh1106_UpdateScreen>
	HAL_Delay(200);
 80007d4:	20c8      	movs	r0, #200	; 0xc8
 80007d6:	f000 fe71 	bl	80014bc <HAL_Delay>

	sh1106_SetCursor(0, 0);
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff ffd1 	bl	8000784 <sh1106_SetCursor>
	sh1106_WriteString("ZG REV 0.1 Test", Font_11x18, Black);
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <sh1106_test+0x44>)
 80007e4:	2300      	movs	r3, #0
 80007e6:	ca06      	ldmia	r2, {r1, r2}
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <sh1106_test+0x48>)
 80007ea:	f7ff ffa5 	bl	8000738 <sh1106_WriteString>
	sh1106_UpdateScreen();
 80007ee:	f7ff fe85 	bl	80004fc <sh1106_UpdateScreen>
	HAL_Delay(200);
 80007f2:	20c8      	movs	r0, #200	; 0xc8
 80007f4:	f000 fe62 	bl	80014bc <HAL_Delay>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	080035f8 	.word	0x080035f8

08000804 <sh1106_print>:

void sh1106_print(char* message, FontDef font, int color) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	1d38      	adds	r0, r7, #4
 800080e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000812:	603b      	str	r3, [r7, #0]

	sh1106_SetCursor(0, 32);
 8000814:	2120      	movs	r1, #32
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff ffb4 	bl	8000784 <sh1106_SetCursor>
	sh1106_WriteString(message, font, color);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	1d3a      	adds	r2, r7, #4
 8000822:	ca06      	ldmia	r2, {r1, r2}
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f7ff ff87 	bl	8000738 <sh1106_WriteString>
	sh1106_UpdateScreen();
 800082a:	f7ff fe67 	bl	80004fc <sh1106_UpdateScreen>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_MspInit+0x5c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x5c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_MspInit+0x60>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_MspInit+0x60>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000
 8000898:	40010000 	.word	0x40010000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 fdcf 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  UserTimer_Handler();
 80008e6:	f000 fc71 	bl	80011cc <UserTimer_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART1_IRQHandler+0x10>)
 80008f6:	f002 fa69 	bl	8002dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200006d4 	.word	0x200006d4

08000904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000908:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800090c:	f001 f954 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000910:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000914:	f001 f950 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <Switch_Init>:
uint8_t sw_6_packet_flag = 0; // switch 3

extern uint8_t serial1Rx_data;

void Switch_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	LSW2_TRIGGER_SET;
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <Switch_Init+0x40>)
 8000928:	f001 f92e 	bl	8001b88 <HAL_GPIO_WritePin>
	LSW4_TRIGGER_SET;
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <Switch_Init+0x40>)
 8000934:	f001 f928 	bl	8001b88 <HAL_GPIO_WritePin>
	LSW6_TRIGGER_SET;
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <Switch_Init+0x40>)
 8000940:	f001 f922 	bl	8001b88 <HAL_GPIO_WritePin>

	sh1106_print("Init...", Font_11x18, White);
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <Switch_Init+0x44>)
 8000946:	2301      	movs	r3, #1
 8000948:	ca06      	ldmia	r2, {r1, r2}
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <Switch_Init+0x48>)
 800094c:	f7ff ff5a 	bl	8000804 <sh1106_print>

	UserTimer_Start(SW_INIT_100ms, 130);
 8000950:	2182      	movs	r1, #130	; 0x82
 8000952:	2009      	movs	r0, #9
 8000954:	f000 fc88 	bl	8001268 <UserTimer_Start>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40010c00 	.word	0x40010c00
 8000960:	20000000 	.word	0x20000000
 8000964:	08003608 	.word	0x08003608

08000968 <Switch_Task>:

void Switch_Task(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	if ( sw_init_flag ) {
 800096c:	4b96      	ldr	r3, [pc, #600]	; (8000bc8 <Switch_Task+0x260>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 8100 	beq.w	8000b76 <Switch_Task+0x20e>

		if( (UserTimer_Status(SW1_100ms) == TMR_TIMEOUT) && (sw_On_flag == 1) ) {
 8000976:	2006      	movs	r0, #6
 8000978:	f000 fd04 	bl	8001384 <UserTimer_Status>
 800097c:	4603      	mov	r3, r0
 800097e:	2b02      	cmp	r3, #2
 8000980:	d128      	bne.n	80009d4 <Switch_Task+0x6c>
 8000982:	4b92      	ldr	r3, [pc, #584]	; (8000bcc <Switch_Task+0x264>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d124      	bne.n	80009d4 <Switch_Task+0x6c>
			sw_On_flag = 0;
 800098a:	4b90      	ldr	r3, [pc, #576]	; (8000bcc <Switch_Task+0x264>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
			sw_pause = 0;
 8000990:	4b8f      	ldr	r3, [pc, #572]	; (8000bd0 <Switch_Task+0x268>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]

			LSW1_TRIGGER_RESET;
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099c:	488d      	ldr	r0, [pc, #564]	; (8000bd4 <Switch_Task+0x26c>)
 800099e:	f001 f8f3 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW3_TRIGGER_RESET;
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a8:	488a      	ldr	r0, [pc, #552]	; (8000bd4 <Switch_Task+0x26c>)
 80009aa:	f001 f8ed 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW5_TRIGGER_RESET;
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b4:	4887      	ldr	r0, [pc, #540]	; (8000bd4 <Switch_Task+0x26c>)
 80009b6:	f001 f8e7 	bl	8001b88 <HAL_GPIO_WritePin>

			sh1106_print("            ", Font_11x18, White);
 80009ba:	4a87      	ldr	r2, [pc, #540]	; (8000bd8 <Switch_Task+0x270>)
 80009bc:	2301      	movs	r3, #1
 80009be:	ca06      	ldmia	r2, {r1, r2}
 80009c0:	4886      	ldr	r0, [pc, #536]	; (8000bdc <Switch_Task+0x274>)
 80009c2:	f7ff ff1f 	bl	8000804 <sh1106_print>
			sh1106_print("Mode ON OK", Font_11x18, White);
 80009c6:	4a84      	ldr	r2, [pc, #528]	; (8000bd8 <Switch_Task+0x270>)
 80009c8:	2301      	movs	r3, #1
 80009ca:	ca06      	ldmia	r2, {r1, r2}
 80009cc:	4884      	ldr	r0, [pc, #528]	; (8000be0 <Switch_Task+0x278>)
 80009ce:	f7ff ff19 	bl	8000804 <sh1106_print>
 80009d2:	e0f6      	b.n	8000bc2 <Switch_Task+0x25a>
		}

		else if( (UserTimer_Status(SW2_100ms) == TMR_TIMEOUT) && (sw_Off_flag == 1) ) {
 80009d4:	2007      	movs	r0, #7
 80009d6:	f000 fcd5 	bl	8001384 <UserTimer_Status>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d128      	bne.n	8000a32 <Switch_Task+0xca>
 80009e0:	4b80      	ldr	r3, [pc, #512]	; (8000be4 <Switch_Task+0x27c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d124      	bne.n	8000a32 <Switch_Task+0xca>

			sw_Off_flag = 0;
 80009e8:	4b7e      	ldr	r3, [pc, #504]	; (8000be4 <Switch_Task+0x27c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			sw_pause = 0;
 80009ee:	4b78      	ldr	r3, [pc, #480]	; (8000bd0 <Switch_Task+0x268>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

			LSW2_TRIGGER_RESET;
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fa:	4876      	ldr	r0, [pc, #472]	; (8000bd4 <Switch_Task+0x26c>)
 80009fc:	f001 f8c4 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW4_TRIGGER_RESET;
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4873      	ldr	r0, [pc, #460]	; (8000bd4 <Switch_Task+0x26c>)
 8000a08:	f001 f8be 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW6_TRIGGER_RESET;
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a12:	4870      	ldr	r0, [pc, #448]	; (8000bd4 <Switch_Task+0x26c>)
 8000a14:	f001 f8b8 	bl	8001b88 <HAL_GPIO_WritePin>

			sh1106_print("            ", Font_11x18, White);
 8000a18:	4a6f      	ldr	r2, [pc, #444]	; (8000bd8 <Switch_Task+0x270>)
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	ca06      	ldmia	r2, {r1, r2}
 8000a1e:	486f      	ldr	r0, [pc, #444]	; (8000bdc <Switch_Task+0x274>)
 8000a20:	f7ff fef0 	bl	8000804 <sh1106_print>
			sh1106_print("Mode OFF OK", Font_11x18, White);
 8000a24:	4a6c      	ldr	r2, [pc, #432]	; (8000bd8 <Switch_Task+0x270>)
 8000a26:	2301      	movs	r3, #1
 8000a28:	ca06      	ldmia	r2, {r1, r2}
 8000a2a:	486f      	ldr	r0, [pc, #444]	; (8000be8 <Switch_Task+0x280>)
 8000a2c:	f7ff feea 	bl	8000804 <sh1106_print>
 8000a30:	e0c7      	b.n	8000bc2 <Switch_Task+0x25a>
		}
		else if ( (UserTimer_Status(SW_PAUSE_10ms) == TMR_TIMEOUT) && (sw_Pause_flag ==1) ) {
 8000a32:	2004      	movs	r0, #4
 8000a34:	f000 fca6 	bl	8001384 <UserTimer_Status>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	f040 80c1 	bne.w	8000bc2 <Switch_Task+0x25a>
 8000a40:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <Switch_Task+0x284>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	f040 80bc 	bne.w	8000bc2 <Switch_Task+0x25a>

			if ( sw_pause )
 8000a4a:	4b61      	ldr	r3, [pc, #388]	; (8000bd0 <Switch_Task+0x268>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <Switch_Task+0xf2>
				sw_pause = 0;
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <Switch_Task+0x268>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e002      	b.n	8000a60 <Switch_Task+0xf8>
			else
				sw_pause = 1;
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <Switch_Task+0x268>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]

			if (sw_pause == 0) {
 8000a60:	4b5b      	ldr	r3, [pc, #364]	; (8000bd0 <Switch_Task+0x268>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d13f      	bne.n	8000ae8 <Switch_Task+0x180>

				if ( sw_On_flag ) {
 8000a68:	4b58      	ldr	r3, [pc, #352]	; (8000bcc <Switch_Task+0x264>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d015      	beq.n	8000a9c <Switch_Task+0x134>
					UserTimer_Resume(SW1_100ms);
 8000a70:	2006      	movs	r0, #6
 8000a72:	f000 fc67 	bl	8001344 <UserTimer_Resume>

					LSW1_TRIGGER_SET;
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7c:	4855      	ldr	r0, [pc, #340]	; (8000bd4 <Switch_Task+0x26c>)
 8000a7e:	f001 f883 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW3_TRIGGER_SET;
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4852      	ldr	r0, [pc, #328]	; (8000bd4 <Switch_Task+0x26c>)
 8000a8a:	f001 f87d 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW5_TRIGGER_SET;
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a94:	484f      	ldr	r0, [pc, #316]	; (8000bd4 <Switch_Task+0x26c>)
 8000a96:	f001 f877 	bl	8001b88 <HAL_GPIO_WritePin>
 8000a9a:	e018      	b.n	8000ace <Switch_Task+0x166>
				}
				else if ( sw_Off_flag ) {
 8000a9c:	4b51      	ldr	r3, [pc, #324]	; (8000be4 <Switch_Task+0x27c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d014      	beq.n	8000ace <Switch_Task+0x166>
					UserTimer_Resume(SW2_100ms);
 8000aa4:	2007      	movs	r0, #7
 8000aa6:	f000 fc4d 	bl	8001344 <UserTimer_Resume>

					LSW2_TRIGGER_SET;
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab0:	4848      	ldr	r0, [pc, #288]	; (8000bd4 <Switch_Task+0x26c>)
 8000ab2:	f001 f869 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW4_TRIGGER_SET;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abc:	4845      	ldr	r0, [pc, #276]	; (8000bd4 <Switch_Task+0x26c>)
 8000abe:	f001 f863 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW6_TRIGGER_SET;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	4842      	ldr	r0, [pc, #264]	; (8000bd4 <Switch_Task+0x26c>)
 8000aca:	f001 f85d 	bl	8001b88 <HAL_GPIO_WritePin>
				}

				sh1106_print("            ", Font_11x18, White);
 8000ace:	4a42      	ldr	r2, [pc, #264]	; (8000bd8 <Switch_Task+0x270>)
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	ca06      	ldmia	r2, {r1, r2}
 8000ad4:	4841      	ldr	r0, [pc, #260]	; (8000bdc <Switch_Task+0x274>)
 8000ad6:	f7ff fe95 	bl	8000804 <sh1106_print>
				sh1106_print("Pause OFF", Font_11x18, White);
 8000ada:	4a3f      	ldr	r2, [pc, #252]	; (8000bd8 <Switch_Task+0x270>)
 8000adc:	2301      	movs	r3, #1
 8000ade:	ca06      	ldmia	r2, {r1, r2}
 8000ae0:	4843      	ldr	r0, [pc, #268]	; (8000bf0 <Switch_Task+0x288>)
 8000ae2:	f7ff fe8f 	bl	8000804 <sh1106_print>
 8000ae6:	e042      	b.n	8000b6e <Switch_Task+0x206>
			}
			else if ( sw_pause ) {
 8000ae8:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <Switch_Task+0x268>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d03e      	beq.n	8000b6e <Switch_Task+0x206>
				if ( sw_On_flag ) {
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <Switch_Task+0x264>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d015      	beq.n	8000b24 <Switch_Task+0x1bc>
					UserTimer_Pause(SW1_100ms);
 8000af8:	2006      	movs	r0, #6
 8000afa:	f000 fc0d 	bl	8001318 <UserTimer_Pause>

					LSW1_TRIGGER_RESET;
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b04:	4833      	ldr	r0, [pc, #204]	; (8000bd4 <Switch_Task+0x26c>)
 8000b06:	f001 f83f 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW3_TRIGGER_RESET;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b10:	4830      	ldr	r0, [pc, #192]	; (8000bd4 <Switch_Task+0x26c>)
 8000b12:	f001 f839 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW5_TRIGGER_RESET;
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1c:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <Switch_Task+0x26c>)
 8000b1e:	f001 f833 	bl	8001b88 <HAL_GPIO_WritePin>
 8000b22:	e018      	b.n	8000b56 <Switch_Task+0x1ee>


				}
				else if ( sw_Off_flag ) {
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <Switch_Task+0x27c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d014      	beq.n	8000b56 <Switch_Task+0x1ee>
					UserTimer_Pause(SW2_100ms);
 8000b2c:	2007      	movs	r0, #7
 8000b2e:	f000 fbf3 	bl	8001318 <UserTimer_Pause>

					LSW2_TRIGGER_RESET;
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b38:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <Switch_Task+0x26c>)
 8000b3a:	f001 f825 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW4_TRIGGER_RESET;
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	4823      	ldr	r0, [pc, #140]	; (8000bd4 <Switch_Task+0x26c>)
 8000b46:	f001 f81f 	bl	8001b88 <HAL_GPIO_WritePin>
					LSW6_TRIGGER_RESET;
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b50:	4820      	ldr	r0, [pc, #128]	; (8000bd4 <Switch_Task+0x26c>)
 8000b52:	f001 f819 	bl	8001b88 <HAL_GPIO_WritePin>
				}
				else ;

				sh1106_print("            ", Font_11x18, White);
 8000b56:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <Switch_Task+0x270>)
 8000b58:	2301      	movs	r3, #1
 8000b5a:	ca06      	ldmia	r2, {r1, r2}
 8000b5c:	481f      	ldr	r0, [pc, #124]	; (8000bdc <Switch_Task+0x274>)
 8000b5e:	f7ff fe51 	bl	8000804 <sh1106_print>
				sh1106_print("Pause ON", Font_11x18, White);
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <Switch_Task+0x270>)
 8000b64:	2301      	movs	r3, #1
 8000b66:	ca06      	ldmia	r2, {r1, r2}
 8000b68:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <Switch_Task+0x28c>)
 8000b6a:	f7ff fe4b 	bl	8000804 <sh1106_print>
			}
			sw_Pause_flag = 0;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <Switch_Task+0x284>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]

			sh1106_print("Init Finish", Font_11x18, White);
		}
	}
	else ;
}
 8000b74:	e025      	b.n	8000bc2 <Switch_Task+0x25a>
	else if ( sw_init_flag == 0 ){
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <Switch_Task+0x260>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d121      	bne.n	8000bc2 <Switch_Task+0x25a>
		if ( UserTimer_Status(SW_INIT_100ms) == TMR_TIMEOUT ) {
 8000b7e:	2009      	movs	r0, #9
 8000b80:	f000 fc00 	bl	8001384 <UserTimer_Status>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d11b      	bne.n	8000bc2 <Switch_Task+0x25a>
			sw_init_flag = 1;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <Switch_Task+0x260>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
			LSW2_TRIGGER_RESET;
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <Switch_Task+0x26c>)
 8000b98:	f000 fff6 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW4_TRIGGER_RESET;
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <Switch_Task+0x26c>)
 8000ba4:	f000 fff0 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW6_TRIGGER_RESET;
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <Switch_Task+0x26c>)
 8000bb0:	f000 ffea 	bl	8001b88 <HAL_GPIO_WritePin>
			sh1106_print("Init Finish", Font_11x18, White);
 8000bb4:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <Switch_Task+0x270>)
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	ca06      	ldmia	r2, {r1, r2}
 8000bba:	480f      	ldr	r0, [pc, #60]	; (8000bf8 <Switch_Task+0x290>)
 8000bbc:	f7ff fe22 	bl	8000804 <sh1106_print>
}
 8000bc0:	e7ff      	b.n	8000bc2 <Switch_Task+0x25a>
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000457 	.word	0x20000457
 8000bcc:	20000458 	.word	0x20000458
 8000bd0:	20000456 	.word	0x20000456
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	08003610 	.word	0x08003610
 8000be0:	08003620 	.word	0x08003620
 8000be4:	20000459 	.word	0x20000459
 8000be8:	0800362c 	.word	0x0800362c
 8000bec:	2000045a 	.word	0x2000045a
 8000bf0:	08003638 	.word	0x08003638
 8000bf4:	08003644 	.word	0x08003644
 8000bf8:	08003650 	.word	0x08003650

08000bfc <HAL_GPIO_EXTI_Callback>:
int cnt1 = 0;
int cnt2 = 0;
int cnt3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
//
//
//			//UserTimer_Start(SW_PAUSE_10ms, 100);
//		}
	}
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <Bluetooth_Process>:
int bt4_cnt = 0;
int bt5_cnt = 0;
int bt6_cnt = 0;

void Bluetooth_Process(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	if(sw_init_flag) {
 8000c14:	4ba8      	ldr	r3, [pc, #672]	; (8000eb8 <Bluetooth_Process+0x2a8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 81c9 	beq.w	8000fb0 <Bluetooth_Process+0x3a0>
		// Chair gravity
		if( (serial1Rx_data == 0x31) && (sw_On_packet_flag == 1) && (sw_pause == 0) && (sw_Off_flag == 0) ) {
 8000c1e:	4ba7      	ldr	r3, [pc, #668]	; (8000ebc <Bluetooth_Process+0x2ac>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b31      	cmp	r3, #49	; 0x31
 8000c24:	d134      	bne.n	8000c90 <Bluetooth_Process+0x80>
 8000c26:	4ba6      	ldr	r3, [pc, #664]	; (8000ec0 <Bluetooth_Process+0x2b0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d130      	bne.n	8000c90 <Bluetooth_Process+0x80>
 8000c2e:	4ba5      	ldr	r3, [pc, #660]	; (8000ec4 <Bluetooth_Process+0x2b4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d12c      	bne.n	8000c90 <Bluetooth_Process+0x80>
 8000c36:	4ba4      	ldr	r3, [pc, #656]	; (8000ec8 <Bluetooth_Process+0x2b8>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d128      	bne.n	8000c90 <Bluetooth_Process+0x80>
			sw_On_flag = 1;
 8000c3e:	4ba3      	ldr	r3, [pc, #652]	; (8000ecc <Bluetooth_Process+0x2bc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
			sw_On_packet_flag = 0;
 8000c44:	4b9e      	ldr	r3, [pc, #632]	; (8000ec0 <Bluetooth_Process+0x2b0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]

			LSW1_TRIGGER_SET;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c50:	489f      	ldr	r0, [pc, #636]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000c52:	f000 ff99 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW3_TRIGGER_SET;
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	489c      	ldr	r0, [pc, #624]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000c5e:	f000 ff93 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW5_TRIGGER_SET;
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c68:	4899      	ldr	r0, [pc, #612]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000c6a:	f000 ff8d 	bl	8001b88 <HAL_GPIO_WritePin>

			UserTimer_Start(SW1_100ms, 130);
 8000c6e:	2182      	movs	r1, #130	; 0x82
 8000c70:	2006      	movs	r0, #6
 8000c72:	f000 faf9 	bl	8001268 <UserTimer_Start>

			sh1106_print("            ", Font_11x18, White);
 8000c76:	4a97      	ldr	r2, [pc, #604]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000c78:	2301      	movs	r3, #1
 8000c7a:	ca06      	ldmia	r2, {r1, r2}
 8000c7c:	4896      	ldr	r0, [pc, #600]	; (8000ed8 <Bluetooth_Process+0x2c8>)
 8000c7e:	f7ff fdc1 	bl	8000804 <sh1106_print>
			sh1106_print("Mode ON GO", Font_11x18, White);
 8000c82:	4a94      	ldr	r2, [pc, #592]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000c84:	2301      	movs	r3, #1
 8000c86:	ca06      	ldmia	r2, {r1, r2}
 8000c88:	4894      	ldr	r0, [pc, #592]	; (8000edc <Bluetooth_Process+0x2cc>)
 8000c8a:	f7ff fdbb 	bl	8000804 <sh1106_print>
 8000c8e:	e04c      	b.n	8000d2a <Bluetooth_Process+0x11a>
		}

		// Chair restore
		else if( (serial1Rx_data == 0x32) && (sw_Off_packet_flag == 1) && (sw_pause == 0) && (sw_On_flag == 0) ) {
 8000c90:	4b8a      	ldr	r3, [pc, #552]	; (8000ebc <Bluetooth_Process+0x2ac>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b32      	cmp	r3, #50	; 0x32
 8000c96:	d134      	bne.n	8000d02 <Bluetooth_Process+0xf2>
 8000c98:	4b91      	ldr	r3, [pc, #580]	; (8000ee0 <Bluetooth_Process+0x2d0>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d130      	bne.n	8000d02 <Bluetooth_Process+0xf2>
 8000ca0:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <Bluetooth_Process+0x2b4>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d12c      	bne.n	8000d02 <Bluetooth_Process+0xf2>
 8000ca8:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <Bluetooth_Process+0x2bc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d128      	bne.n	8000d02 <Bluetooth_Process+0xf2>
			sw_Off_flag = 1;
 8000cb0:	4b85      	ldr	r3, [pc, #532]	; (8000ec8 <Bluetooth_Process+0x2b8>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
			sw_Off_packet_flag = 0;
 8000cb6:	4b8a      	ldr	r3, [pc, #552]	; (8000ee0 <Bluetooth_Process+0x2d0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]

			LSW2_TRIGGER_SET;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	4883      	ldr	r0, [pc, #524]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000cc4:	f000 ff60 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW4_TRIGGER_SET;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	4880      	ldr	r0, [pc, #512]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000cd0:	f000 ff5a 	bl	8001b88 <HAL_GPIO_WritePin>
			LSW6_TRIGGER_SET;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cda:	487d      	ldr	r0, [pc, #500]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000cdc:	f000 ff54 	bl	8001b88 <HAL_GPIO_WritePin>

			UserTimer_Start(SW2_100ms, 130);
 8000ce0:	2182      	movs	r1, #130	; 0x82
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 fac0 	bl	8001268 <UserTimer_Start>

			sh1106_print("            ", Font_11x18, White);
 8000ce8:	4a7a      	ldr	r2, [pc, #488]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000cea:	2301      	movs	r3, #1
 8000cec:	ca06      	ldmia	r2, {r1, r2}
 8000cee:	487a      	ldr	r0, [pc, #488]	; (8000ed8 <Bluetooth_Process+0x2c8>)
 8000cf0:	f7ff fd88 	bl	8000804 <sh1106_print>
			sh1106_print("Mode OFF GO", Font_11x18, White);
 8000cf4:	4a77      	ldr	r2, [pc, #476]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	ca06      	ldmia	r2, {r1, r2}
 8000cfa:	487a      	ldr	r0, [pc, #488]	; (8000ee4 <Bluetooth_Process+0x2d4>)
 8000cfc:	f7ff fd82 	bl	8000804 <sh1106_print>
 8000d00:	e013      	b.n	8000d2a <Bluetooth_Process+0x11a>
				UserTimer_Start(SW_PAUSE_10ms, 50);
				sw_Pause_flag = 1;
				cnt3 = 0;
			}
#else
		else if ( (sw_Pause_packet_flag == 1) && !(UserTimer_Status(SW_PAUSE_10ms) == TMR_RUN) ) {
 8000d02:	4b79      	ldr	r3, [pc, #484]	; (8000ee8 <Bluetooth_Process+0x2d8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10f      	bne.n	8000d2a <Bluetooth_Process+0x11a>
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f000 fb3a 	bl	8001384 <UserTimer_Status>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d009      	beq.n	8000d2a <Bluetooth_Process+0x11a>
			sw_Pause_packet_flag = 0;
 8000d16:	4b74      	ldr	r3, [pc, #464]	; (8000ee8 <Bluetooth_Process+0x2d8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
			sw_Pause_flag = 1;
 8000d1c:	4b73      	ldr	r3, [pc, #460]	; (8000eec <Bluetooth_Process+0x2dc>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
			UserTimer_Start(SW_PAUSE_10ms, 50);
 8000d22:	2132      	movs	r1, #50	; 0x32
 8000d24:	2004      	movs	r0, #4
 8000d26:	f000 fa9f 	bl	8001268 <UserTimer_Start>
#endif
		}

		if ( sw_1_packet_flag  ) {
 8000d2a:	4b71      	ldr	r3, [pc, #452]	; (8000ef0 <Bluetooth_Process+0x2e0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d026      	beq.n	8000d80 <Bluetooth_Process+0x170>

			sw_1_packet_flag = 0;
 8000d32:	4b6f      	ldr	r3, [pc, #444]	; (8000ef0 <Bluetooth_Process+0x2e0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]

			if( bt1_cnt ) {
 8000d38:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <Bluetooth_Process+0x2e4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00f      	beq.n	8000d60 <Bluetooth_Process+0x150>
				bt1_cnt = 0;
 8000d40:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <Bluetooth_Process+0x2e4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
				LSW1_TRIGGER_RESET;
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4c:	4860      	ldr	r0, [pc, #384]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000d4e:	f000 ff1b 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 1 Off", Font_11x18, White);
 8000d52:	4a60      	ldr	r2, [pc, #384]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000d54:	2301      	movs	r3, #1
 8000d56:	ca06      	ldmia	r2, {r1, r2}
 8000d58:	4867      	ldr	r0, [pc, #412]	; (8000ef8 <Bluetooth_Process+0x2e8>)
 8000d5a:	f7ff fd53 	bl	8000804 <sh1106_print>
				LSW6_TRIGGER_SET;
				sh1106_print("Btn 6 On ", Font_11x18, White);
			}
		}
	}
}
 8000d5e:	e127      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
				bt1_cnt = 1;
 8000d60:	4b64      	ldr	r3, [pc, #400]	; (8000ef4 <Bluetooth_Process+0x2e4>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
				LSW1_TRIGGER_SET;
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	4858      	ldr	r0, [pc, #352]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000d6e:	f000 ff0b 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 1 On ", Font_11x18, White);
 8000d72:	4a58      	ldr	r2, [pc, #352]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000d74:	2301      	movs	r3, #1
 8000d76:	ca06      	ldmia	r2, {r1, r2}
 8000d78:	4860      	ldr	r0, [pc, #384]	; (8000efc <Bluetooth_Process+0x2ec>)
 8000d7a:	f7ff fd43 	bl	8000804 <sh1106_print>
}
 8000d7e:	e117      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
		else if ( sw_2_packet_flag  ) {
 8000d80:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <Bluetooth_Process+0x2f0>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d026      	beq.n	8000dd6 <Bluetooth_Process+0x1c6>
			sw_2_packet_flag = 0;
 8000d88:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <Bluetooth_Process+0x2f0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
			if( bt2_cnt ) {
 8000d8e:	4b5d      	ldr	r3, [pc, #372]	; (8000f04 <Bluetooth_Process+0x2f4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00f      	beq.n	8000db6 <Bluetooth_Process+0x1a6>
				bt2_cnt = 0;
 8000d96:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <Bluetooth_Process+0x2f4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
				LSW2_TRIGGER_RESET;
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da2:	484b      	ldr	r0, [pc, #300]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000da4:	f000 fef0 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 2 Off", Font_11x18, White);
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000daa:	2301      	movs	r3, #1
 8000dac:	ca06      	ldmia	r2, {r1, r2}
 8000dae:	4856      	ldr	r0, [pc, #344]	; (8000f08 <Bluetooth_Process+0x2f8>)
 8000db0:	f7ff fd28 	bl	8000804 <sh1106_print>
}
 8000db4:	e0fc      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
				bt2_cnt = 1;
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <Bluetooth_Process+0x2f4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
				LSW2_TRIGGER_SET;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc2:	4843      	ldr	r0, [pc, #268]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000dc4:	f000 fee0 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 2 On ", Font_11x18, White);
 8000dc8:	4a42      	ldr	r2, [pc, #264]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000dca:	2301      	movs	r3, #1
 8000dcc:	ca06      	ldmia	r2, {r1, r2}
 8000dce:	484f      	ldr	r0, [pc, #316]	; (8000f0c <Bluetooth_Process+0x2fc>)
 8000dd0:	f7ff fd18 	bl	8000804 <sh1106_print>
}
 8000dd4:	e0ec      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
		else if ( sw_3_packet_flag ) {
 8000dd6:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <Bluetooth_Process+0x300>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d026      	beq.n	8000e2c <Bluetooth_Process+0x21c>
			sw_3_packet_flag = 0;
 8000dde:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <Bluetooth_Process+0x300>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
			if( bt3_cnt ) {
 8000de4:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <Bluetooth_Process+0x304>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00f      	beq.n	8000e0c <Bluetooth_Process+0x1fc>
				bt3_cnt = 0;
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <Bluetooth_Process+0x304>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
				LSW3_TRIGGER_RESET;
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	4835      	ldr	r0, [pc, #212]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000dfa:	f000 fec5 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 3 Off", Font_11x18, White);
 8000dfe:	4a35      	ldr	r2, [pc, #212]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000e00:	2301      	movs	r3, #1
 8000e02:	ca06      	ldmia	r2, {r1, r2}
 8000e04:	4844      	ldr	r0, [pc, #272]	; (8000f18 <Bluetooth_Process+0x308>)
 8000e06:	f7ff fcfd 	bl	8000804 <sh1106_print>
}
 8000e0a:	e0d1      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
				bt3_cnt = 1;
 8000e0c:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <Bluetooth_Process+0x304>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
				LSW3_TRIGGER_SET;
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000e1a:	f000 feb5 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 3 On ", Font_11x18, White);
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000e20:	2301      	movs	r3, #1
 8000e22:	ca06      	ldmia	r2, {r1, r2}
 8000e24:	483d      	ldr	r0, [pc, #244]	; (8000f1c <Bluetooth_Process+0x30c>)
 8000e26:	f7ff fced 	bl	8000804 <sh1106_print>
}
 8000e2a:	e0c1      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
		else if ( sw_4_packet_flag ) {
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <Bluetooth_Process+0x310>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d026      	beq.n	8000e82 <Bluetooth_Process+0x272>
			sw_4_packet_flag = 0;
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <Bluetooth_Process+0x310>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
			if( bt4_cnt ) {
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <Bluetooth_Process+0x314>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <Bluetooth_Process+0x252>
				bt4_cnt = 0;
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <Bluetooth_Process+0x314>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
				LSW4_TRIGGER_RESET;
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000e50:	f000 fe9a 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 4 Off", Font_11x18, White);
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000e56:	2301      	movs	r3, #1
 8000e58:	ca06      	ldmia	r2, {r1, r2}
 8000e5a:	4833      	ldr	r0, [pc, #204]	; (8000f28 <Bluetooth_Process+0x318>)
 8000e5c:	f7ff fcd2 	bl	8000804 <sh1106_print>
}
 8000e60:	e0a6      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
				bt4_cnt = 1;
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <Bluetooth_Process+0x314>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
				LSW4_TRIGGER_SET;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000e70:	f000 fe8a 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 4 On ", Font_11x18, White);
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000e76:	2301      	movs	r3, #1
 8000e78:	ca06      	ldmia	r2, {r1, r2}
 8000e7a:	482c      	ldr	r0, [pc, #176]	; (8000f2c <Bluetooth_Process+0x31c>)
 8000e7c:	f7ff fcc2 	bl	8000804 <sh1106_print>
}
 8000e80:	e096      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
		else if ( sw_5_packet_flag ) {
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <Bluetooth_Process+0x320>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d068      	beq.n	8000f5c <Bluetooth_Process+0x34c>
			sw_5_packet_flag = 0;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <Bluetooth_Process+0x320>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
			if( bt5_cnt ) {
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <Bluetooth_Process+0x324>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d051      	beq.n	8000f3c <Bluetooth_Process+0x32c>
				bt5_cnt = 0;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <Bluetooth_Process+0x324>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
				LSW5_TRIGGER_RESET;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <Bluetooth_Process+0x2c0>)
 8000ea6:	f000 fe6f 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 5 Off", Font_11x18, White);
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <Bluetooth_Process+0x2c4>)
 8000eac:	2301      	movs	r3, #1
 8000eae:	ca06      	ldmia	r2, {r1, r2}
 8000eb0:	4821      	ldr	r0, [pc, #132]	; (8000f38 <Bluetooth_Process+0x328>)
 8000eb2:	f7ff fca7 	bl	8000804 <sh1106_print>
}
 8000eb6:	e07b      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
 8000eb8:	20000457 	.word	0x20000457
 8000ebc:	200004d0 	.word	0x200004d0
 8000ec0:	2000045b 	.word	0x2000045b
 8000ec4:	20000456 	.word	0x20000456
 8000ec8:	20000459 	.word	0x20000459
 8000ecc:	20000458 	.word	0x20000458
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	08003610 	.word	0x08003610
 8000edc:	0800365c 	.word	0x0800365c
 8000ee0:	2000045c 	.word	0x2000045c
 8000ee4:	08003668 	.word	0x08003668
 8000ee8:	2000045d 	.word	0x2000045d
 8000eec:	2000045a 	.word	0x2000045a
 8000ef0:	2000045e 	.word	0x2000045e
 8000ef4:	20000464 	.word	0x20000464
 8000ef8:	08003674 	.word	0x08003674
 8000efc:	08003680 	.word	0x08003680
 8000f00:	2000045f 	.word	0x2000045f
 8000f04:	20000468 	.word	0x20000468
 8000f08:	0800368c 	.word	0x0800368c
 8000f0c:	08003698 	.word	0x08003698
 8000f10:	20000460 	.word	0x20000460
 8000f14:	2000046c 	.word	0x2000046c
 8000f18:	080036a4 	.word	0x080036a4
 8000f1c:	080036b0 	.word	0x080036b0
 8000f20:	20000461 	.word	0x20000461
 8000f24:	20000470 	.word	0x20000470
 8000f28:	080036bc 	.word	0x080036bc
 8000f2c:	080036c8 	.word	0x080036c8
 8000f30:	20000462 	.word	0x20000462
 8000f34:	20000474 	.word	0x20000474
 8000f38:	080036d4 	.word	0x080036d4
				bt5_cnt = 1;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <Bluetooth_Process+0x3a4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
				LSW5_TRIGGER_SET;
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f48:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <Bluetooth_Process+0x3a8>)
 8000f4a:	f000 fe1d 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 5 On ", Font_11x18, White);
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <Bluetooth_Process+0x3ac>)
 8000f50:	2301      	movs	r3, #1
 8000f52:	ca06      	ldmia	r2, {r1, r2}
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <Bluetooth_Process+0x3b0>)
 8000f56:	f7ff fc55 	bl	8000804 <sh1106_print>
}
 8000f5a:	e029      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
		else if ( sw_6_packet_flag ) {
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <Bluetooth_Process+0x3b4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d025      	beq.n	8000fb0 <Bluetooth_Process+0x3a0>
			sw_6_packet_flag = 0;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <Bluetooth_Process+0x3b4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			if( bt6_cnt ) {
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <Bluetooth_Process+0x3b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00f      	beq.n	8000f92 <Bluetooth_Process+0x382>
				bt6_cnt = 0;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <Bluetooth_Process+0x3b8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
				LSW6_TRIGGER_RESET;
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <Bluetooth_Process+0x3a8>)
 8000f80:	f000 fe02 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 6 Off", Font_11x18, White);
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <Bluetooth_Process+0x3ac>)
 8000f86:	2301      	movs	r3, #1
 8000f88:	ca06      	ldmia	r2, {r1, r2}
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <Bluetooth_Process+0x3bc>)
 8000f8c:	f7ff fc3a 	bl	8000804 <sh1106_print>
}
 8000f90:	e00e      	b.n	8000fb0 <Bluetooth_Process+0x3a0>
				bt6_cnt = 1;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <Bluetooth_Process+0x3b8>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
				LSW6_TRIGGER_SET;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <Bluetooth_Process+0x3a8>)
 8000fa0:	f000 fdf2 	bl	8001b88 <HAL_GPIO_WritePin>
				sh1106_print("Btn 6 On ", Font_11x18, White);
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <Bluetooth_Process+0x3ac>)
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	ca06      	ldmia	r2, {r1, r2}
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <Bluetooth_Process+0x3c0>)
 8000fac:	f7ff fc2a 	bl	8000804 <sh1106_print>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000474 	.word	0x20000474
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	080036e0 	.word	0x080036e0
 8000fc4:	20000463 	.word	0x20000463
 8000fc8:	20000478 	.word	0x20000478
 8000fcc:	080036ec 	.word	0x080036ec
 8000fd0:	080036f8 	.word	0x080036f8

08000fd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8000fec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_USART1_UART_Init+0x54>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_USART1_UART_Init+0x54>)
 8001018:	f001 fe5a 	bl	8002cd0 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001022:	f7ff f9c6 	bl	80003b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &serial1Rx_data, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	4904      	ldr	r1, [pc, #16]	; (800103c <MX_USART1_UART_Init+0x5c>)
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <MX_USART1_UART_Init+0x54>)
 800102c:	f001 fe9d 	bl	8002d6a <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200006d4 	.word	0x200006d4
 8001038:	40013800 	.word	0x40013800
 800103c:	200004d0 	.word	0x200004d0

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_UART_MspInit+0x9c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d139      	bne.n	80010d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 80010a6:	f000 fbeb 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 80010c0:	f000 fbde 	bl	8001880 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2025      	movs	r0, #37	; 0x25
 80010ca:	f000 faf2 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ce:	2025      	movs	r0, #37	; 0x25
 80010d0:	f000 fb0b 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800

080010e8 <HAL_UART_RxCpltCallback>:
#endif
	return len;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	// One char print
#if 0
	HAL_UART_Transmit(&huart2, &rx_data, 1, 1000);
	HAL_UART_Receive_IT(&huart2, &rx_data	, 1);
#endif
	if(huart->Instance == USART1) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a29      	ldr	r2, [pc, #164]	; (800119c <HAL_UART_RxCpltCallback+0xb4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d14b      	bne.n	8001192 <HAL_UART_RxCpltCallback+0xaa>
		if(serial1Rx_data == 0x34) {
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b34      	cmp	r3, #52	; 0x34
 8001100:	d103      	bne.n	800110a <HAL_UART_RxCpltCallback+0x22>
			sw_1_packet_flag = 1;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_UART_RxCpltCallback+0xbc>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e03e      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x35) {
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b35      	cmp	r3, #53	; 0x35
 8001110:	d103      	bne.n	800111a <HAL_UART_RxCpltCallback+0x32>
			sw_2_packet_flag = 1;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_UART_RxCpltCallback+0xc0>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e036      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x36) {
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b36      	cmp	r3, #54	; 0x36
 8001120:	d103      	bne.n	800112a <HAL_UART_RxCpltCallback+0x42>
			sw_3_packet_flag = 1;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_UART_RxCpltCallback+0xc4>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e02e      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x37) {
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b37      	cmp	r3, #55	; 0x37
 8001130:	d103      	bne.n	800113a <HAL_UART_RxCpltCallback+0x52>
			sw_4_packet_flag = 1;
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_UART_RxCpltCallback+0xc8>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e026      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x38) {
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b38      	cmp	r3, #56	; 0x38
 8001140:	d103      	bne.n	800114a <HAL_UART_RxCpltCallback+0x62>
			sw_5_packet_flag = 1;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_UART_RxCpltCallback+0xcc>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e01e      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x39) {
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b39      	cmp	r3, #57	; 0x39
 8001150:	d103      	bne.n	800115a <HAL_UART_RxCpltCallback+0x72>
			sw_6_packet_flag = 1;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_UART_RxCpltCallback+0xd0>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e016      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x31) {
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b31      	cmp	r3, #49	; 0x31
 8001160:	d103      	bne.n	800116a <HAL_UART_RxCpltCallback+0x82>
			sw_On_packet_flag = 1;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_UART_RxCpltCallback+0xd4>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e00e      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x32) {
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b32      	cmp	r3, #50	; 0x32
 8001170:	d103      	bne.n	800117a <HAL_UART_RxCpltCallback+0x92>
			sw_Off_packet_flag = 1;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_UART_RxCpltCallback+0xd8>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e006      	b.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
		}
		else if (serial1Rx_data == 0x33) {
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b33      	cmp	r3, #51	; 0x33
 8001180:	d102      	bne.n	8001188 <HAL_UART_RxCpltCallback+0xa0>
			sw_Pause_packet_flag = 1;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_UART_RxCpltCallback+0xdc>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, &serial1Rx_data, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	4905      	ldr	r1, [pc, #20]	; (80011a0 <HAL_UART_RxCpltCallback+0xb8>)
 800118c:	480e      	ldr	r0, [pc, #56]	; (80011c8 <HAL_UART_RxCpltCallback+0xe0>)
 800118e:	f001 fdec 	bl	8002d6a <HAL_UART_Receive_IT>
//  // For Debugging
//  else if(huart->Instance == USART2) {
//	  HAL_UART_Transmit(&huart1, serial2Rx_buffer, 1, 1000);
//	  HAL_UART_Receive_IT(&huart2, serial2Rx_buffer, 1);
//  }
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40013800 	.word	0x40013800
 80011a0:	200004d0 	.word	0x200004d0
 80011a4:	2000045e 	.word	0x2000045e
 80011a8:	2000045f 	.word	0x2000045f
 80011ac:	20000460 	.word	0x20000460
 80011b0:	20000461 	.word	0x20000461
 80011b4:	20000462 	.word	0x20000462
 80011b8:	20000463 	.word	0x20000463
 80011bc:	2000045b 	.word	0x2000045b
 80011c0:	2000045c 	.word	0x2000045c
 80011c4:	2000045d 	.word	0x2000045d
 80011c8:	200006d4 	.word	0x200006d4

080011cc <UserTimer_Handler>:
} USER_TIMER_EX;

USER_TIMER_EX user_timer_list[MAX_TMR];

void UserTimer_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
	int i;

	for (i=0; i<MAX_TMR; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	e03c      	b.n	8001252 <UserTimer_Handler+0x86>
		if(user_timer_list[i].status == TMR_RUN) {
 80011d8:	4922      	ldr	r1, [pc, #136]	; (8001264 <UserTimer_Handler+0x98>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d12f      	bne.n	800124c <UserTimer_Handler+0x80>
			user_timer_list[i].count++;
 80011ec:	491d      	ldr	r1, [pc, #116]	; (8001264 <UserTimer_Handler+0x98>)
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	3304      	adds	r3, #4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	4818      	ldr	r0, [pc, #96]	; (8001264 <UserTimer_Handler+0x98>)
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4403      	add	r3, r0
 800120e:	3304      	adds	r3, #4
 8001210:	6019      	str	r1, [r3, #0]

			if(user_timer_list[i].value <= user_timer_list[i].count) {
 8001212:	4914      	ldr	r1, [pc, #80]	; (8001264 <UserTimer_Handler+0x98>)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	480f      	ldr	r0, [pc, #60]	; (8001264 <UserTimer_Handler+0x98>)
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	3304      	adds	r3, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4299      	cmp	r1, r3
 8001238:	d808      	bhi.n	800124c <UserTimer_Handler+0x80>
				user_timer_list[i].status = TMR_TIMEOUT;
 800123a:	490a      	ldr	r1, [pc, #40]	; (8001264 <UserTimer_Handler+0x98>)
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	2202      	movs	r2, #2
 800124a:	701a      	strb	r2, [r3, #0]
	for (i=0; i<MAX_TMR; i++) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0a      	cmp	r3, #10
 8001256:	ddbf      	ble.n	80011d8 <UserTimer_Handler+0xc>
			}
		}
	}
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000718 	.word	0x20000718

08001268 <UserTimer_Start>:

void UserTimer_Start(USER_TIMER_ID timer_type, uint16_t time_out)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
	user_timer_list[timer_type].status = TMR_RUN;
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	4926      	ldr	r1, [pc, #152]	; (8001314 <UserTimer_Start+0xac>)
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
	user_timer_list[timer_type].count = 0;
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	4921      	ldr	r1, [pc, #132]	; (8001314 <UserTimer_Start+0xac>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	3304      	adds	r3, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

	if( ( START_10ms < timer_type ) && (timer_type<END_10ms) ) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d912      	bls.n	80012ca <UserTimer_Start+0x62>
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d80f      	bhi.n	80012ca <UserTimer_Start+0x62>
		user_timer_list[timer_type].value = (uint32_t) time_out * 10;
 80012aa:	88b9      	ldrh	r1, [r7, #4]
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	460b      	mov	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	4916      	ldr	r1, [pc, #88]	; (8001314 <UserTimer_Start+0xac>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6018      	str	r0, [r3, #0]
 80012c8:	e01e      	b.n	8001308 <UserTimer_Start+0xa0>
	}
	else if ( (START_100ms < timer_type ) && (timer_type < END_100ms) ) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d910      	bls.n	80012f2 <UserTimer_Start+0x8a>
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d80d      	bhi.n	80012f2 <UserTimer_Start+0x8a>
		user_timer_list[timer_type].value = (uint32_t) time_out * 100;
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	2164      	movs	r1, #100	; 0x64
 80012dc:	fb01 f103 	mul.w	r1, r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <UserTimer_Start+0xac>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4403      	add	r3, r0
 80012ec:	3308      	adds	r3, #8
 80012ee:	6019      	str	r1, [r3, #0]
 80012f0:	e00a      	b.n	8001308 <UserTimer_Start+0xa0>
	}
	else {
		user_timer_list[timer_type].value = (uint32_t) time_out;
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	88b9      	ldrh	r1, [r7, #4]
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <UserTimer_Start+0xac>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4403      	add	r3, r0
 8001302:	3308      	adds	r3, #8
 8001304:	6019      	str	r1, [r3, #0]
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000718 	.word	0x20000718

08001318 <UserTimer_Pause>:
	user_timer_list[timer_type].status = TMR_STOP;
	user_timer_list[timer_type].count = 0;
}

void UserTimer_Pause(USER_TIMER_ID timer_type)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	user_timer_list[timer_type].status = TMR_PAUSE;
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <UserTimer_Pause+0x28>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	2203      	movs	r2, #3
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000718 	.word	0x20000718

08001344 <UserTimer_Resume>:

void UserTimer_Resume(USER_TIMER_ID timer_type)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	if(user_timer_list[timer_type].status == TMR_PAUSE) {
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	490b      	ldr	r1, [pc, #44]	; (8001380 <UserTimer_Resume+0x3c>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d108      	bne.n	8001374 <UserTimer_Resume+0x30>
		user_timer_list[timer_type].status = TMR_RUN;
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4906      	ldr	r1, [pc, #24]	; (8001380 <UserTimer_Resume+0x3c>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
	}
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000718 	.word	0x20000718

08001384 <UserTimer_Status>:

uint8_t UserTimer_Status(USER_TIMER_ID timer_type)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	return user_timer_list[timer_type].status;
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	4905      	ldr	r1, [pc, #20]	; (80013a8 <UserTimer_Status+0x24>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	781b      	ldrb	r3, [r3, #0]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000718 	.word	0x20000718

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	; (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d2:	f7ff fdff 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f002 f8d7 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7fe ff93 	bl	8000304 <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013e8:	08004490 	.word	0x08004490
  ldr r2, =_sbss
 80013ec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013f0:	200007a0 	.word	0x200007a0

080013f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x28>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f947 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fa10 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f95f 	bl	8001706 <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f927 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000008 	.word	0x20000008
 800147c:	20000010 	.word	0x20000010
 8001480:	2000000c 	.word	0x2000000c

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x20>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000010 	.word	0x20000010
 80014a4:	2000079c 	.word	0x2000079c

080014a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_GetTick+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	2000079c 	.word	0x2000079c

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff fff0 	bl	80014a8 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffe0 	bl	80014a8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000010 	.word	0x20000010

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <__NVIC_EnableIRQ+0x34>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff90 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff2d 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff42 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff35 	bl	8001568 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001730:	2b02      	cmp	r3, #2
 8001732:	d008      	beq.n	8001746 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e020      	b.n	8001788 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020e 	bic.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d005      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e051      	b.n	800185a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 020e 	bic.w	r2, r2, #14
 80017c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <HAL_DMA_Abort_IT+0xd0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d029      	beq.n	8001834 <HAL_DMA_Abort_IT+0xa0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <HAL_DMA_Abort_IT+0xd4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d022      	beq.n	8001830 <HAL_DMA_Abort_IT+0x9c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_DMA_Abort_IT+0xd8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d01a      	beq.n	800182a <HAL_DMA_Abort_IT+0x96>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_DMA_Abort_IT+0xdc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d012      	beq.n	8001824 <HAL_DMA_Abort_IT+0x90>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_DMA_Abort_IT+0xe0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00a      	beq.n	800181e <HAL_DMA_Abort_IT+0x8a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_DMA_Abort_IT+0xe4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d102      	bne.n	8001818 <HAL_DMA_Abort_IT+0x84>
 8001812:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001816:	e00e      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800181c:	e00b      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 800181e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001822:	e008      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	e005      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	e002      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001830:	2310      	movs	r3, #16
 8001832:	e000      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001834:	2301      	movs	r3, #1
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_DMA_Abort_IT+0xe8>)
 8001838:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    } 
  }
  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020008 	.word	0x40020008
 8001868:	4002001c 	.word	0x4002001c
 800186c:	40020030 	.word	0x40020030
 8001870:	40020044 	.word	0x40020044
 8001874:	40020058 	.word	0x40020058
 8001878:	4002006c 	.word	0x4002006c
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	; (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	; (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	; (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	492c      	ldr	r1, [pc, #176]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4918      	ldr	r1, [pc, #96]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	; 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f810 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e12b      	b.n	8001e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fb3a 	bl	8000288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c4c:	f000 fffa 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4a81      	ldr	r2, [pc, #516]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d807      	bhi.n	8001c6c <HAL_I2C_Init+0x84>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a80      	ldr	r2, [pc, #512]	; (8001e60 <HAL_I2C_Init+0x278>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	bf94      	ite	ls
 8001c64:	2301      	movls	r3, #1
 8001c66:	2300      	movhi	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e006      	b.n	8001c7a <HAL_I2C_Init+0x92>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a7d      	ldr	r2, [pc, #500]	; (8001e64 <HAL_I2C_Init+0x27c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf94      	ite	ls
 8001c74:	2301      	movls	r3, #1
 8001c76:	2300      	movhi	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0e7      	b.n	8001e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a78      	ldr	r2, [pc, #480]	; (8001e68 <HAL_I2C_Init+0x280>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a6a      	ldr	r2, [pc, #424]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d802      	bhi.n	8001cbc <HAL_I2C_Init+0xd4>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	e009      	b.n	8001cd0 <HAL_I2C_Init+0xe8>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_I2C_Init+0x284>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	495c      	ldr	r1, [pc, #368]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001cec:	428b      	cmp	r3, r1
 8001cee:	d819      	bhi.n	8001d24 <HAL_I2C_Init+0x13c>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e59      	subs	r1, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d04:	400b      	ands	r3, r1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HAL_I2C_Init+0x138>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e59      	subs	r1, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	e051      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e04f      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d111      	bne.n	8001d50 <HAL_I2C_Init+0x168>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	440b      	add	r3, r1
 8001d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e012      	b.n	8001d76 <HAL_I2C_Init+0x18e>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	0099      	lsls	r1, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Init+0x196>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e022      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <HAL_I2C_Init+0x1bc>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e58      	subs	r0, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	e00f      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6809      	ldr	r1, [r1, #0]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6911      	ldr	r1, [r2, #16]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	000186a0 	.word	0x000186a0
 8001e60:	001e847f 	.word	0x001e847f
 8001e64:	003d08ff 	.word	0x003d08ff
 8001e68:	431bde83 	.word	0x431bde83
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	817b      	strh	r3, [r7, #10]
 8001e82:	460b      	mov	r3, r1
 8001e84:	813b      	strh	r3, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e8a:	f7ff fb0d 	bl	80014a8 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	f040 80d9 	bne.w	8002050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2319      	movs	r3, #25
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	496d      	ldr	r1, [pc, #436]	; (800205c <HAL_I2C_Mem_Write+0x1ec>)
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f971 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0cc      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Mem_Write+0x56>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0c5      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d007      	beq.n	8001eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_I2C_Mem_Write+0x1f0>)
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f2e:	88f8      	ldrh	r0, [r7, #6]
 8001f30:	893a      	ldrh	r2, [r7, #8]
 8001f32:	8979      	ldrh	r1, [r7, #10]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f890 	bl	8002064 <I2C_RequestMemoryWrite>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d052      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e081      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f9f2 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d107      	bne.n	8001f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_I2C_Mem_Write+0x180>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d017      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1aa      	bne.n	8001f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f9de 	bl	80023be <I2C_WaitOnBTFFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e016      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	00100002 	.word	0x00100002
 8002060:	ffff0000 	.word	0xffff0000

08002064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4603      	mov	r3, r0
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	460b      	mov	r3, r1
 8002078:	813b      	strh	r3, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	2200      	movs	r2, #0
 8002096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f878 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b4:	d103      	bne.n	80020be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e05f      	b.n	8002182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020c2:	897b      	ldrh	r3, [r7, #10]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	6a3a      	ldr	r2, [r7, #32]
 80020d6:	492d      	ldr	r1, [pc, #180]	; (800218c <I2C_RequestMemoryWrite+0x128>)
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f8b0 	bl	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e04c      	b.n	8002182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	6a39      	ldr	r1, [r7, #32]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f91a 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00d      	beq.n	800212a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b04      	cmp	r3, #4
 8002114:	d107      	bne.n	8002126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e02b      	b.n	8002182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e021      	b.n	8002180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800213c:	893b      	ldrh	r3, [r7, #8]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f8f4 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b04      	cmp	r3, #4
 8002160:	d107      	bne.n	8002172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e005      	b.n	8002182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002176:	893b      	ldrh	r3, [r7, #8]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	00010002 	.word	0x00010002

08002190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a0:	e025      	b.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d021      	beq.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7ff f97d 	bl	80014a8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e023      	b.n	8002236 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10d      	bne.n	8002214 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4013      	ands	r3, r2
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	e00c      	b.n	800222e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	429a      	cmp	r2, r3
 8002232:	d0b6      	beq.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224c:	e051      	b.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225c:	d123      	bne.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002276:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e046      	b.n	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d021      	beq.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7ff f8fb 	bl	80014a8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e020      	b.n	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10c      	bne.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	e00b      	b.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	43da      	mvns	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4013      	ands	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d18d      	bne.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002348:	e02d      	b.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f878 	bl	8002440 <I2C_IsAcknowledgeFailed>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02d      	b.n	80023b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d021      	beq.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002362:	f7ff f8a1 	bl	80014a8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d116      	bne.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d1ca      	bne.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ca:	e02d      	b.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f837 	bl	8002440 <I2C_IsAcknowledgeFailed>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e02d      	b.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d021      	beq.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e4:	f7ff f860 	bl	80014a8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e007      	b.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d1ca      	bne.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002456:	d11b      	bne.n	8002490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e26c      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	4b92      	ldr	r3, [pc, #584]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c8:	4b8f      	ldr	r3, [pc, #572]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
 80024d4:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x12c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e246      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x76>
 8002504:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7f      	ldr	r2, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a77      	ldr	r2, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xbc>
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6a      	ldr	r2, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a67      	ldr	r2, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe ff96 	bl	80014a8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe ff92 	bl	80014a8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1fa      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe4>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe ff82 	bl	80014a8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe ff7e 	bl	80014a8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1e6      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10c>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1ba      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4939      	ldr	r1, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe ff37 	bl	80014a8 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7fe ff33 	bl	80014a8 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e19b      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4927      	ldr	r1, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe ff16 	bl	80014a8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7fe ff12 	bl	80014a8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e17a      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03a      	beq.n	8002720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fef6 	bl	80014a8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe fef2 	bl	80014a8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e15a      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 fad8 	bl	8002c94 <RCC_Delay>
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7fe fedc 	bl	80014a8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f2:	e00f      	b.n	8002714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fed8 	bl	80014a8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d908      	bls.n	8002714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e140      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	42420000 	.word	0x42420000
 8002710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b9e      	ldr	r3, [pc, #632]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e9      	bne.n	80026f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a6 	beq.w	800287a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b97      	ldr	r3, [pc, #604]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b94      	ldr	r3, [pc, #592]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a93      	ldr	r2, [pc, #588]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]
 800274a:	4b91      	ldr	r3, [pc, #580]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b8e      	ldr	r3, [pc, #568]	; (8002994 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a8a      	ldr	r2, [pc, #552]	; (8002994 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe fe99 	bl	80014a8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7fe fe95 	bl	80014a8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0fd      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b81      	ldr	r3, [pc, #516]	; (8002994 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 80027a0:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a7a      	ldr	r2, [pc, #488]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	e02d      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027b6:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a75      	ldr	r2, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	4b73      	ldr	r3, [pc, #460]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a72      	ldr	r2, [pc, #456]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x356>
 80027d8:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a6c      	ldr	r2, [pc, #432]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a69      	ldr	r2, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027f2:	4b67      	ldr	r3, [pc, #412]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a66      	ldr	r2, [pc, #408]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe fe49 	bl	80014a8 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fe45 	bl	80014a8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0ab      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b57      	ldr	r3, [pc, #348]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x37e>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe fe33 	bl	80014a8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fe2f 	bl	80014a8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e095      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a47      	ldr	r2, [pc, #284]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8081 	beq.w	8002986 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b42      	ldr	r3, [pc, #264]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d061      	beq.n	8002954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d146      	bne.n	8002926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_OscConfig+0x4fc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe fe03 	bl	80014a8 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fdff 	bl	80014a8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e067      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d108      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	492d      	ldr	r1, [pc, #180]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a19      	ldr	r1, [r3, #32]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	430b      	orrs	r3, r1
 80028f2:	4927      	ldr	r1, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_OscConfig+0x4fc>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fdd3 	bl	80014a8 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fdcf 	bl	80014a8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e037      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
 8002924:	e02f      	b.n	8002986 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_RCC_OscConfig+0x4fc>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fdbc 	bl	80014a8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fdb8 	bl	80014a8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e020      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x498>
 8002952:	e018      	b.n	8002986 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e013      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
 8002998:	42420060 	.word	0x42420060

0800299c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d0      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b67      	ldr	r3, [pc, #412]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4965      	ldr	r1, [pc, #404]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d040      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e073      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06b      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4936      	ldr	r1, [pc, #216]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fd0c 	bl	80014a8 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fd08 	bl	80014a8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e053      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d210      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4922      	ldr	r1, [pc, #136]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1cc>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1d0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fc6a 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08004470 	.word	0x08004470
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	2000000c 	.word	0x2000000c

08002b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	b490      	push	{r4, r7}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b78:	1d3c      	adds	r4, r7, #4
 8002b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b80:	f240 2301 	movw	r3, #513	; 0x201
 8002b84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bae:	e02d      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb2:	623b      	str	r3, [r7, #32]
      break;
 8002bb4:	e02d      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	0c9b      	lsrs	r3, r3, #18
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c5b      	lsrs	r3, r3, #17
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002be2:	4413      	add	r3, r2
 8002be4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bee:	fb02 f203 	mul.w	r2, r2, r3
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	e004      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	623b      	str	r3, [r7, #32]
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0e:	623b      	str	r3, [r7, #32]
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc90      	pop	{r4, r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	08003704 	.word	0x08003704
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200
 8002c2c:	003d0900 	.word	0x003d0900

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000008 	.word	0x20000008

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c48:	f7ff fff2 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08004480 	.word	0x08004480

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c70:	f7ff ffde 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	0adb      	lsrs	r3, r3, #11
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08004480 	.word	0x08004480

08002c94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <RCC_Delay+0x34>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <RCC_Delay+0x38>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a5b      	lsrs	r3, r3, #9
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cb0:	bf00      	nop
  }
  while (Delay --);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	60fa      	str	r2, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f9      	bne.n	8002cb0 <RCC_Delay+0x1c>
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	10624dd3 	.word	0x10624dd3

08002cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e03f      	b.n	8002d62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe f9a2 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fba9 	bl	800346c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d11d      	bne.n	8002dc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Receive_IT+0x26>
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e016      	b.n	8002dc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Receive_IT+0x38>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e00f      	b.n	8002dc2 <HAL_UART_Receive_IT+0x58>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f9cf 	bl	800315a <UART_Start_Receive_IT>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	e000      	b.n	8002dc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_UART_IRQHandler+0x52>
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa7f 	bl	800331a <UART_Receive_IT>
      return;
 8002e1c:	e17b      	b.n	8003116 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80b1 	beq.w	8002f88 <HAL_UART_IRQHandler+0x1bc>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_UART_IRQHandler+0x70>
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_UART_IRQHandler+0x90>
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_UART_IRQHandler+0xb0>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0202 	orr.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_UART_IRQHandler+0xd0>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00f      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xfa>
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_UART_IRQHandler+0xee>
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0208 	orr.w	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 811e 	beq.w	800310c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_UART_IRQHandler+0x11e>
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fa18 	bl	800331a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_UART_IRQHandler+0x146>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d031      	beq.n	8002f76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f95a 	bl	80031cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d023      	beq.n	8002f6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	4a76      	ldr	r2, [pc, #472]	; (800311c <HAL_UART_IRQHandler+0x350>)
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fc22 	bl	8001794 <HAL_DMA_Abort_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f60:	4610      	mov	r0, r2
 8002f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e00e      	b.n	8002f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8e3 	bl	8003132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	e00a      	b.n	8002f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8df 	bl	8003132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	e006      	b.n	8002f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8db 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f82:	e0c3      	b.n	800310c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	bf00      	nop
    return;
 8002f86:	e0c1      	b.n	800310c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 80a1 	bne.w	80030d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 809b 	beq.w	80030d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8095 	beq.w	80030d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d04e      	beq.n	800306c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002fd8:	8a3b      	ldrh	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8098 	beq.w	8003110 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fe4:	8a3a      	ldrh	r2, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f080 8092 	bcs.w	8003110 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8a3a      	ldrh	r2, [r7, #16]
 8002ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d02b      	beq.n	8003054 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800300a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0210 	bic.w	r2, r2, #16
 8003048:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fb65 	bl	800171e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305c:	b29b      	uxth	r3, r3
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	b29b      	uxth	r3, r3
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f86d 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800306a:	e051      	b.n	8003110 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003074:	b29b      	uxth	r3, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d047      	beq.n	8003114 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003084:	8a7b      	ldrh	r3, [r7, #18]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d044      	beq.n	8003114 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003098:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0210 	bic.w	r2, r2, #16
 80030c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030c8:	8a7b      	ldrh	r3, [r7, #18]
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f839 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030d2:	e01f      	b.n	8003114 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_UART_IRQHandler+0x324>
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8af 	bl	800324c <UART_Transmit_IT>
    return;
 80030ee:	e012      	b.n	8003116 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_UART_IRQHandler+0x34a>
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f8f0 	bl	80032ea <UART_EndTransmit_IT>
    return;
 800310a:	e004      	b.n	8003116 <HAL_UART_IRQHandler+0x34a>
    return;
 800310c:	bf00      	nop
 800310e:	e002      	b.n	8003116 <HAL_UART_IRQHandler+0x34a>
      return;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <HAL_UART_IRQHandler+0x34a>
      return;
 8003114:	bf00      	nop
  }
}
 8003116:	3728      	adds	r7, #40	; 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08003225 	.word	0x08003225

08003120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	4613      	mov	r3, r2
 8003166:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2222      	movs	r2, #34	; 0x22
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0210 	bic.w	r2, r2, #16
 800320a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff ff77 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b21      	cmp	r3, #33	; 0x21
 800325e:	d13e      	bne.n	80032de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d114      	bne.n	8003294 <UART_Transmit_IT+0x48>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d110      	bne.n	8003294 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003286:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	621a      	str	r2, [r3, #32]
 8003292:	e008      	b.n	80032a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	1c59      	adds	r1, r3, #1
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6211      	str	r1, [r2, #32]
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4619      	mov	r1, r3
 80032b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003300:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff08 	bl	8003120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	; 0x22
 800332c:	f040 8099 	bne.w	8003462 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d117      	bne.n	800336a <UART_Receive_IT+0x50>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003358:	b29a      	uxth	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	1c9a      	adds	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	e026      	b.n	80033b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d007      	beq.n	800338e <UART_Receive_IT+0x74>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <UART_Receive_IT+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e008      	b.n	80033ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d148      	bne.n	800345e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0220 	bic.w	r2, r2, #32
 80033da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	2b01      	cmp	r3, #1
 800340a:	d123      	bne.n	8003454 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0210 	bic.w	r2, r2, #16
 8003420:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d10a      	bne.n	8003446 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fe79 	bl	8003144 <HAL_UARTEx_RxEventCallback>
 8003452:	e002      	b.n	800345a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fd fe47 	bl	80010e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e002      	b.n	8003464 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034a6:	f023 030c 	bic.w	r3, r3, #12
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <UART_SetConfig+0x114>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d103      	bne.n	80034dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff fbca 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	e002      	b.n	80034e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7ff fbb2 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80034e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	009a      	lsls	r2, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <UART_SetConfig+0x118>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	0119      	lsls	r1, r3, #4
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fbb2 f2f3 	udiv	r2, r2, r3
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <UART_SetConfig+0x118>)
 800351a:	fba3 0302 	umull	r0, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2064      	movs	r0, #100	; 0x64
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	3332      	adds	r3, #50	; 0x32
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <UART_SetConfig+0x118>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003538:	4419      	add	r1, r3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009a      	lsls	r2, r3, #2
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <UART_SetConfig+0x118>)
 8003552:	fba3 0302 	umull	r0, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2064      	movs	r0, #100	; 0x64
 800355a:	fb00 f303 	mul.w	r3, r0, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	3332      	adds	r3, #50	; 0x32
 8003564:	4a07      	ldr	r2, [pc, #28]	; (8003584 <UART_SetConfig+0x118>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	440a      	add	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40013800 	.word	0x40013800
 8003584:	51eb851f 	.word	0x51eb851f

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	2600      	movs	r6, #0
 800358c:	4d0c      	ldr	r5, [pc, #48]	; (80035c0 <__libc_init_array+0x38>)
 800358e:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	42a6      	cmp	r6, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	f000 f822 	bl	80035e0 <_init>
 800359c:	2600      	movs	r6, #0
 800359e:	4d0a      	ldr	r5, [pc, #40]	; (80035c8 <__libc_init_array+0x40>)
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <__libc_init_array+0x44>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	42a6      	cmp	r6, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b0:	4798      	blx	r3
 80035b2:	3601      	adds	r6, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ba:	4798      	blx	r3
 80035bc:	3601      	adds	r6, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	08004488 	.word	0x08004488
 80035c4:	08004488 	.word	0x08004488
 80035c8:	08004488 	.word	0x08004488
 80035cc:	0800448c 	.word	0x0800448c

080035d0 <memset>:
 80035d0:	4603      	mov	r3, r0
 80035d2:	4402      	add	r2, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d100      	bne.n	80035da <memset+0xa>
 80035d8:	4770      	bx	lr
 80035da:	f803 1b01 	strb.w	r1, [r3], #1
 80035de:	e7f9      	b.n	80035d4 <memset+0x4>

080035e0 <_init>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr

080035ec <_fini>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr
