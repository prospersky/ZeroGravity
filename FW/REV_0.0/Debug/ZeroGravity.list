
ZeroGravity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f0c  08002f0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f0c  08002f0c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f0c  08002f0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000070  08002f84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08002f84  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed65  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002367  00000000  00000000  0002edfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00031168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033a6  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d720  00000000  00000000  0003592e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a125  00000000  00000000  0004304e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ad173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000ad1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002e58 	.word	0x08002e58

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002e58 	.word	0x08002e58

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000238:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <MX_GPIO_Init+0xc0>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a29      	ldr	r2, [pc, #164]	; (80002e4 <MX_GPIO_Init+0xc0>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <MX_GPIO_Init+0xc0>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0310 	and.w	r3, r3, #16
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000250:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_GPIO_Init+0xc0>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a23      	ldr	r2, [pc, #140]	; (80002e4 <MX_GPIO_Init+0xc0>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <MX_GPIO_Init+0xc0>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_GPIO_Init+0xc0>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a1d      	ldr	r2, [pc, #116]	; (80002e4 <MX_GPIO_Init+0xc0>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <MX_GPIO_Init+0xc0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_GPIO_Init+0xc0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <MX_GPIO_Init+0xc0>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_GPIO_Init+0xc0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0308 	and.w	r3, r3, #8
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800029e:	4812      	ldr	r0, [pc, #72]	; (80002e8 <MX_GPIO_Init+0xc4>)
 80002a0:	f000 fea2 	bl	8000fe8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 80002a4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80002a8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	4619      	mov	r1, r3
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <MX_GPIO_Init+0xc8>)
 80002ba:	f000 fd01 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80002be:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80002c2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	2302      	movs	r3, #2
 80002ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	4619      	mov	r1, r3
 80002d6:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_GPIO_Init+0xc4>)
 80002d8:	f000 fcf2 	bl	8000cc0 <HAL_GPIO_Init>

}
 80002dc:	bf00      	nop
 80002de:	3720      	adds	r7, #32
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40011000 	.word	0x40011000

080002f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_I2C1_Init+0x50>)
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <MX_I2C1_Init+0x54>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_I2C1_Init+0x50>)
 80002fc:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_I2C1_Init+0x58>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_I2C1_Init+0x50>)
 800030e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <MX_I2C1_Init+0x50>)
 800032e:	f000 fe73 	bl	8001018 <HAL_I2C_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000338:	f000 f89b 	bl	8000472 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200004c0 	.word	0x200004c0
 8000344:	40005400 	.word	0x40005400
 8000348:	000186a0 	.word	0x000186a0

0800034c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <HAL_I2C_MspInit+0x70>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d123      	bne.n	80003b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <HAL_I2C_MspInit+0x74>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <HAL_I2C_MspInit+0x74>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <HAL_I2C_MspInit+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000384:	23c0      	movs	r3, #192	; 0xc0
 8000386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000388:	2312      	movs	r3, #18
 800038a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038c:	2303      	movs	r3, #3
 800038e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	480b      	ldr	r0, [pc, #44]	; (80003c4 <HAL_I2C_MspInit+0x78>)
 8000398:	f000 fc92 	bl	8000cc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <HAL_I2C_MspInit+0x74>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <HAL_I2C_MspInit+0x74>)
 80003a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a6:	61d3      	str	r3, [r2, #28]
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HAL_I2C_MspInit+0x74>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40005400 	.word	0x40005400
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003cc:	f000 fb0e 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d0:	f000 f814 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d4:	f7ff ff26 	bl	8000224 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003d8:	f7ff ff8a 	bl	80002f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80003dc:	f000 f9f2 	bl	80007c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003e0:	f000 fa1a 	bl	8000818 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sh1106_Init();
 80003e4:	f000 f862 	bl	80004ac <sh1106_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //sh1106_test();
	  printf("Serial Test\r\n");
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <main+0x30>)
 80003ea:	f002 f8e1 	bl	80025b0 <puts>
	  HAL_Delay(100);
 80003ee:	2064      	movs	r0, #100	; 0x64
 80003f0:	f000 fb5e 	bl	8000ab0 <HAL_Delay>
	  printf("Serial Test\r\n");
 80003f4:	e7f8      	b.n	80003e8 <main+0x20>
 80003f6:	bf00      	nop
 80003f8:	08002e70 	.word	0x08002e70

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	; 0x40
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f002 f85a 	bl	80024c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2310      	movs	r3, #16
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fa4a 	bl	80018cc <HAL_RCC_OscConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800043e:	f000 f818 	bl	8000472 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	230f      	movs	r3, #15
 8000444:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fcb6 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000466:	f000 f804 	bl	8000472 <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	; 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000476:	b672      	cpsid	i
}
 8000478:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047a:	e7fe      	b.n	800047a <Error_Handler+0x8>

0800047c <sh1106_WriteCommand>:

//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
static void sh1106_WriteCommand(uint8_t command) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	 * @param  pData Pointer to data buffer
	 * @param  Size Amount of data to be sent
	 * @param  Timeout Timeout duration
	 * @retval HAL status
	 */
	HAL_I2C_Mem_Write(&SH1106_I2C_PORT, SH1106_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000486:	230a      	movs	r3, #10
 8000488:	9302      	str	r3, [sp, #8]
 800048a:	2301      	movs	r3, #1
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2200      	movs	r2, #0
 8000496:	2178      	movs	r1, #120	; 0x78
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <sh1106_WriteCommand+0x2c>)
 800049a:	f000 ff01 	bl	80012a0 <HAL_I2C_Mem_Write>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200004c0 	.word	0x200004c0

080004ac <sh1106_Init>:

//
//	Het scherm initialiseren voor gebruik
//
uint8_t sh1106_Init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	// Even wachten zodat het scherm zeker opgestart is
	HAL_Delay(100);
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f000 fafd 	bl	8000ab0 <HAL_Delay>
	sh1106_WriteCommand(0x20); //0x20,0.77xVcc
	sh1106_WriteCommand(0x8D); //--set DC-DC enable
	sh1106_WriteCommand(0x14); //
	sh1106_WriteCommand(0xAF); //--turn on sh1106 panel
#else
	sh1106_WriteCommand(0xA8);	//Set Mux Ratio
 80004b6:	20a8      	movs	r0, #168	; 0xa8
 80004b8:	f7ff ffe0 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x3F);	//64MUX
 80004bc:	203f      	movs	r0, #63	; 0x3f
 80004be:	f7ff ffdd 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0xD3);	//Set Display Offset
 80004c2:	20d3      	movs	r0, #211	; 0xd3
 80004c4:	f7ff ffda 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x00);	//COM0
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ffd7 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0x40);	//Set Display Start Line
 80004ce:	2040      	movs	r0, #64	; 0x40
 80004d0:	f7ff ffd4 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0xA1);	//Set Segment re-map, Default 0xA0
 80004d4:	20a1      	movs	r0, #161	; 0xa1
 80004d6:	f7ff ffd1 	bl	800047c <sh1106_WriteCommand>
	//column address 127 is mapped to SEG0 (좌우 반전)

	sh1106_WriteCommand(0xC8);	//Set COM Output Scan Direction, default 0xC0
 80004da:	20c8      	movs	r0, #200	; 0xc8
 80004dc:	f7ff ffce 	bl	800047c <sh1106_WriteCommand>
	//remapped mode. Scan from COM[N-1] to COM0 (상하 반전)

	sh1106_WriteCommand(0xDA);	//Set COM Pins hardware configuration
 80004e0:	20da      	movs	r0, #218	; 0xda
 80004e2:	f7ff ffcb 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x12);
 80004e6:	2012      	movs	r0, #18
 80004e8:	f7ff ffc8 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0x20);	//Set Memory Addressing Mode
 80004ec:	2020      	movs	r0, #32
 80004ee:	f7ff ffc5 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x02);	//Page Addressing Mode
 80004f2:	2002      	movs	r0, #2
 80004f4:	f7ff ffc2 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0x81);	//Set Contrast Control
 80004f8:	2081      	movs	r0, #129	; 0x81
 80004fa:	f7ff ffbf 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x7F);	//1~256
 80004fe:	207f      	movs	r0, #127	; 0x7f
 8000500:	f7ff ffbc 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0xA4);	//Disable Entire Display On
 8000504:	20a4      	movs	r0, #164	; 0xa4
 8000506:	f7ff ffb9 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0xA6);	//Set Normal Display
 800050a:	20a6      	movs	r0, #166	; 0xa6
 800050c:	f7ff ffb6 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0xD5);	//Set Osc Frequency
 8000510:	20d5      	movs	r0, #213	; 0xd5
 8000512:	f7ff ffb3 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x80);
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	f7ff ffb0 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0x8D);	//Enable charge pump regulator
 800051c:	208d      	movs	r0, #141	; 0x8d
 800051e:	f7ff ffad 	bl	800047c <sh1106_WriteCommand>
	sh1106_WriteCommand(0x14);
 8000522:	2014      	movs	r0, #20
 8000524:	f7ff ffaa 	bl	800047c <sh1106_WriteCommand>

	sh1106_WriteCommand(0xAF);	//Display ON
 8000528:	20af      	movs	r0, #175	; 0xaf
 800052a:	f7ff ffa7 	bl	800047c <sh1106_WriteCommand>
#endif
	/* Clearen scherm */
	sh1106_Fill(Black);
 800052e:	2000      	movs	r0, #0
 8000530:	f000 f810 	bl	8000554 <sh1106_Fill>

	/* Update screen */
	sh1106_UpdateScreen();
 8000534:	f000 f830 	bl	8000598 <sh1106_UpdateScreen>

	/* Set default values */
	SH1106.CurrentX = 0;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <sh1106_Init+0xa4>)
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <sh1106_Init+0xa4>)
 8000540:	2200      	movs	r2, #0
 8000542:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SH1106.Initialized = 1;
 8000544:	4b02      	ldr	r3, [pc, #8]	; (8000550 <sh1106_Init+0xa4>)
 8000546:	2201      	movs	r2, #1
 8000548:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200004ac 	.word	0x200004ac

08000554 <sh1106_Fill>:

//
//	We zetten de hele buffer op een bepaalde kleur
// 	color 	=> de kleur waarin alles moet
//
void sh1106_Fill(SH1106_COLOR color) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e00d      	b.n	8000580 <sh1106_Fill+0x2c>
		SH1106_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <sh1106_Fill+0x1a>
 800056a:	2100      	movs	r1, #0
 800056c:	e000      	b.n	8000570 <sh1106_Fill+0x1c>
 800056e:	21ff      	movs	r1, #255	; 0xff
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <sh1106_Fill+0x40>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	460a      	mov	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8000586:	d3ed      	bcc.n	8000564 <sh1106_Fill+0x10>
	}
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	2000008c 	.word	0x2000008c

08000598 <sh1106_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void sh1106_UpdateScreen(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	e021      	b.n	80005e8 <sh1106_UpdateScreen+0x50>
		sh1106_WriteCommand(0xB0 + i);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	3b50      	subs	r3, #80	; 0x50
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff66 	bl	800047c <sh1106_WriteCommand>
		sh1106_WriteCommand(0x00);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff ff63 	bl	800047c <sh1106_WriteCommand>
		sh1106_WriteCommand(0x10);
 80005b6:	2010      	movs	r0, #16
 80005b8:	f7ff ff60 	bl	800047c <sh1106_WriteCommand>

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(&SH1106_I2C_PORT, SH1106_I2C_ADDR, 0x40, 1, &SH1106_Buffer[SH1106_WIDTH * i], SH1106_WIDTH, 100);
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	015b      	lsls	r3, r3, #5
 80005c2:	4413      	add	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <sh1106_UpdateScreen+0x60>)
 80005ca:	4413      	add	r3, r2
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	9202      	str	r2, [sp, #8]
 80005d0:	2284      	movs	r2, #132	; 0x84
 80005d2:	9201      	str	r2, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	2240      	movs	r2, #64	; 0x40
 80005da:	2178      	movs	r1, #120	; 0x78
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <sh1106_UpdateScreen+0x64>)
 80005de:	f000 fe5f 	bl	80012a0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	3301      	adds	r3, #1
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	d9da      	bls.n	80005a4 <sh1106_UpdateScreen+0xc>
	}
}
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	200004c0 	.word	0x200004c0

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f9e5 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e00a      	b.n	80006da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006c4:	f3af 8000 	nop.w
 80006c8:	4601      	mov	r1, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	60ba      	str	r2, [r7, #8]
 80006d0:	b2ca      	uxtb	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbf0      	blt.n	80006c4 <_read+0x12>
	}

return len;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_close>:
	}
	return len;
}

int _close(int file)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	return -1;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000712:	605a      	str	r2, [r3, #4]
	return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <_isatty>:

int _isatty(int file)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
	return 0;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f001 fe78 	bl	8002470 <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20008000 	.word	0x20008000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	200004b4 	.word	0x200004b4
 80007b4:	200005b0 	.word	0x200005b0

080007b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART1_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007fc:	f001 fc80 	bl	8002100 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f7ff fe34 	bl	8000472 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000514 	.word	0x20000514
 8000814:	40013800 	.word	0x40013800

08000818 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART2_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000850:	f001 fc56 	bl	8002100 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f7ff fe0a 	bl	8000472 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000558 	.word	0x20000558
 8000868:	40004400 	.word	0x40004400

0800086c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a37      	ldr	r2, [pc, #220]	; (8000964 <HAL_UART_MspInit+0xf8>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d132      	bne.n	80008f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <HAL_UART_MspInit+0xfc>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a35      	ldr	r2, [pc, #212]	; (8000968 <HAL_UART_MspInit+0xfc>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <HAL_UART_MspInit+0xfc>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <HAL_UART_MspInit+0xfc>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <HAL_UART_MspInit+0xfc>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <HAL_UART_MspInit+0xfc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4826      	ldr	r0, [pc, #152]	; (800096c <HAL_UART_MspInit+0x100>)
 80008d2:	f000 f9f5 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4820      	ldr	r0, [pc, #128]	; (800096c <HAL_UART_MspInit+0x100>)
 80008ec:	f000 f9e8 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008f0:	e034      	b.n	800095c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <HAL_UART_MspInit+0x104>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d12f      	bne.n	800095c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_UART_MspInit+0xfc>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_UART_MspInit+0xfc>)
 8000902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000906:	61d3      	str	r3, [r2, #28]
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0xfc>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0xfc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_UART_MspInit+0xfc>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0xfc>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800092c:	2304      	movs	r3, #4
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_UART_MspInit+0x100>)
 8000940:	f000 f9be 	bl	8000cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000944:	2308      	movs	r3, #8
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x100>)
 8000958:	f000 f9b2 	bl	8000cc0 <HAL_GPIO_Init>
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40013800 	.word	0x40013800
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800
 8000970:	40004400 	.word	0x40004400

08000974 <_write>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		__io_putchar(*ptr++);
	}
#else
	HAL_UART_Transmit(&huart2, ptr, len, 500);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b29a      	uxth	r2, r3
 8000984:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <_write+0x28>)
 800098c:	f001 fc05 	bl	800219a <HAL_UART_Transmit>
#endif
	return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000558 	.word	0x20000558

080009a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff fef7 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f001 fd57 	bl	800247c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fcfb 	bl	80003c8 <main>
  bx lr
 80009d2:	4770      	bx	lr
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009dc:	08002f14 	.word	0x08002f14
  ldr r2, =_sbss
 80009e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e4:	200005b0 	.word	0x200005b0

080009e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x28>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f92b 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff fdfa 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f935 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f90b 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000059c 	.word	0x2000059c

08000a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	2000059c 	.word	0x2000059c

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff fff0 	bl	8000a9c <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Delay+0x44>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffe0 	bl	8000a9c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff90 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff49 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff5e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff90 	bl	8000bb0 <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5f 	bl	8000b5c <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffb0 	bl	8000c14 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e179      	b.n	8000fc8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8168 	bne.w	8000fc2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4aa0      	ldr	r2, [pc, #640]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d05e      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000cfc:	4a9e      	ldr	r2, [pc, #632]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d875      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d02:	4a9e      	ldr	r2, [pc, #632]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d058      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d08:	4a9c      	ldr	r2, [pc, #624]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d86f      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d0e:	4a9c      	ldr	r2, [pc, #624]	; (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d052      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d14:	4a9a      	ldr	r2, [pc, #616]	; (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d869      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d1a:	4a9a      	ldr	r2, [pc, #616]	; (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d04c      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d20:	4a98      	ldr	r2, [pc, #608]	; (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d863      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d26:	4a98      	ldr	r2, [pc, #608]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d2c:	4a96      	ldr	r2, [pc, #600]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d85d      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d82a      	bhi.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d859      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <HAL_GPIO_Init+0x80>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000def 	.word	0x08000def
 8000d54:	08000def 	.word	0x08000def
 8000d58:	08000def 	.word	0x08000def
 8000d5c:	08000def 	.word	0x08000def
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000def 	.word	0x08000def
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	4a7f      	ldr	r2, [pc, #508]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e029      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e024      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01f      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e01a      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e013      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e009      	b.n	8000df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          break;
 8000dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d801      	bhi.n	8000dfa <HAL_GPIO_Init+0x13a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_Init+0x13e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d802      	bhi.n	8000e0c <HAL_GPIO_Init+0x14c>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x152>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	210f      	movs	r1, #15
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	6a39      	ldr	r1, [r7, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80c1 	beq.w	8000fc2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a52      	ldr	r2, [pc, #328]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e58:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_GPIO_Init+0x2d4>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2d8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d01f      	beq.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x200>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a44      	ldr	r2, [pc, #272]	; (8000fa0 <HAL_GPIO_Init+0x2e0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1fc>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a43      	ldr	r2, [pc, #268]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a41      	ldr	r2, [pc, #260]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1f0>
 8000eac:	2305      	movs	r3, #5
 8000eae:	e00a      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed6:	492f      	ldr	r1, [pc, #188]	; (8000f94 <HAL_GPIO_Init+0x2d4>)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	492e      	ldr	r1, [pc, #184]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	492a      	ldr	r1, [pc, #168]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	4924      	ldr	r1, [pc, #144]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	4920      	ldr	r1, [pc, #128]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	491a      	ldr	r1, [pc, #104]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	608b      	str	r3, [r1, #8]
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4916      	ldr	r1, [pc, #88]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d025      	beq.n	8000fb4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	4910      	ldr	r1, [pc, #64]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60cb      	str	r3, [r1, #12]
 8000f74:	e025      	b.n	8000fc2 <HAL_GPIO_Init+0x302>
 8000f76:	bf00      	nop
 8000f78:	10320000 	.word	0x10320000
 8000f7c:	10310000 	.word	0x10310000
 8000f80:	10220000 	.word	0x10220000
 8000f84:	10210000 	.word	0x10210000
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	10110000 	.word	0x10110000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	40011400 	.word	0x40011400
 8000fa8:	40011800 	.word	0x40011800
 8000fac:	40011c00 	.word	0x40011c00
 8000fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f47f ae7e 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	372c      	adds	r7, #44	; 0x2c
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e12b      	b.n	8001282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff f984 	bl	800034c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800106a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800107a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800107c:	f000 fffa 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4a81      	ldr	r2, [pc, #516]	; (800128c <HAL_I2C_Init+0x274>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d807      	bhi.n	800109c <HAL_I2C_Init+0x84>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a80      	ldr	r2, [pc, #512]	; (8001290 <HAL_I2C_Init+0x278>)
 8001090:	4293      	cmp	r3, r2
 8001092:	bf94      	ite	ls
 8001094:	2301      	movls	r3, #1
 8001096:	2300      	movhi	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	e006      	b.n	80010aa <HAL_I2C_Init+0x92>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a7d      	ldr	r2, [pc, #500]	; (8001294 <HAL_I2C_Init+0x27c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	bf94      	ite	ls
 80010a4:	2301      	movls	r3, #1
 80010a6:	2300      	movhi	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0e7      	b.n	8001282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4a78      	ldr	r2, [pc, #480]	; (8001298 <HAL_I2C_Init+0x280>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0c9b      	lsrs	r3, r3, #18
 80010bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a6a      	ldr	r2, [pc, #424]	; (800128c <HAL_I2C_Init+0x274>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d802      	bhi.n	80010ec <HAL_I2C_Init+0xd4>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3301      	adds	r3, #1
 80010ea:	e009      	b.n	8001100 <HAL_I2C_Init+0xe8>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <HAL_I2C_Init+0x284>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	099b      	lsrs	r3, r3, #6
 80010fe:	3301      	adds	r3, #1
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	430b      	orrs	r3, r1
 8001106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	495c      	ldr	r1, [pc, #368]	; (800128c <HAL_I2C_Init+0x274>)
 800111c:	428b      	cmp	r3, r1
 800111e:	d819      	bhi.n	8001154 <HAL_I2C_Init+0x13c>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1e59      	subs	r1, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fbb1 f3f3 	udiv	r3, r1, r3
 800112e:	1c59      	adds	r1, r3, #1
 8001130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001134:	400b      	ands	r3, r1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <HAL_I2C_Init+0x138>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1e59      	subs	r1, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fbb1 f3f3 	udiv	r3, r1, r3
 8001148:	3301      	adds	r3, #1
 800114a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114e:	e051      	b.n	80011f4 <HAL_I2C_Init+0x1dc>
 8001150:	2304      	movs	r3, #4
 8001152:	e04f      	b.n	80011f4 <HAL_I2C_Init+0x1dc>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d111      	bne.n	8001180 <HAL_I2C_Init+0x168>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1e58      	subs	r0, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6859      	ldr	r1, [r3, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	440b      	add	r3, r1
 800116a:	fbb0 f3f3 	udiv	r3, r0, r3
 800116e:	3301      	adds	r3, #1
 8001170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf0c      	ite	eq
 8001178:	2301      	moveq	r3, #1
 800117a:	2300      	movne	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	e012      	b.n	80011a6 <HAL_I2C_Init+0x18e>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1e58      	subs	r0, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	0099      	lsls	r1, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	fbb0 f3f3 	udiv	r3, r0, r3
 8001196:	3301      	adds	r3, #1
 8001198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_Init+0x196>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e022      	b.n	80011f4 <HAL_I2C_Init+0x1dc>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10e      	bne.n	80011d4 <HAL_I2C_Init+0x1bc>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1e58      	subs	r0, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	440b      	add	r3, r1
 80011c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d2:	e00f      	b.n	80011f4 <HAL_I2C_Init+0x1dc>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1e58      	subs	r0, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	0099      	lsls	r1, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69da      	ldr	r2, [r3, #28]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6911      	ldr	r1, [r2, #16]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68d2      	ldr	r2, [r2, #12]
 800122e:	4311      	orrs	r1, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	430b      	orrs	r3, r1
 8001236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2220      	movs	r2, #32
 800126e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	000186a0 	.word	0x000186a0
 8001290:	001e847f 	.word	0x001e847f
 8001294:	003d08ff 	.word	0x003d08ff
 8001298:	431bde83 	.word	0x431bde83
 800129c:	10624dd3 	.word	0x10624dd3

080012a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	817b      	strh	r3, [r7, #10]
 80012b2:	460b      	mov	r3, r1
 80012b4:	813b      	strh	r3, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012ba:	f7ff fbef 	bl	8000a9c <HAL_GetTick>
 80012be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b20      	cmp	r3, #32
 80012ca:	f040 80d9 	bne.w	8001480 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2319      	movs	r3, #25
 80012d4:	2201      	movs	r2, #1
 80012d6:	496d      	ldr	r1, [pc, #436]	; (800148c <HAL_I2C_Mem_Write+0x1ec>)
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f971 	bl	80015c0 <I2C_WaitOnFlagUntilTimeout>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012e4:	2302      	movs	r3, #2
 80012e6:	e0cc      	b.n	8001482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_I2C_Mem_Write+0x56>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e0c5      	b.n	8001482 <HAL_I2C_Mem_Write+0x1e2>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d007      	beq.n	800131c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800132a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2221      	movs	r2, #33	; 0x21
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a3a      	ldr	r2, [r7, #32]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800134c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <HAL_I2C_Mem_Write+0x1f0>)
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800135e:	88f8      	ldrh	r0, [r7, #6]
 8001360:	893a      	ldrh	r2, [r7, #8]
 8001362:	8979      	ldrh	r1, [r7, #10]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4603      	mov	r3, r0
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f890 	bl	8001494 <I2C_RequestMemoryWrite>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d052      	beq.n	8001420 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e081      	b.n	8001482 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f9f2 	bl	800176c <I2C_WaitOnTXEFlagUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00d      	beq.n	80013aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b04      	cmp	r3, #4
 8001394:	d107      	bne.n	80013a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e06b      	b.n	8001482 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d11b      	bne.n	8001420 <HAL_I2C_Mem_Write+0x180>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d017      	beq.n	8001420 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140a:	3b01      	subs	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001416:	b29b      	uxth	r3, r3
 8001418:	3b01      	subs	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1aa      	bne.n	800137e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f9de 	bl	80017ee <I2C_WaitOnBTFFlagUntilTimeout>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00d      	beq.n	8001454 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2b04      	cmp	r3, #4
 800143e:	d107      	bne.n	8001450 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800144e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e016      	b.n	8001482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001480:	2302      	movs	r3, #2
  }
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	00100002 	.word	0x00100002
 8001490:	ffff0000 	.word	0xffff0000

08001494 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	817b      	strh	r3, [r7, #10]
 80014a6:	460b      	mov	r3, r1
 80014a8:	813b      	strh	r3, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f878 	bl	80015c0 <I2C_WaitOnFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00d      	beq.n	80014f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e4:	d103      	bne.n	80014ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e05f      	b.n	80015b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	492d      	ldr	r1, [pc, #180]	; (80015bc <I2C_RequestMemoryWrite+0x128>)
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f8b0 	bl	800166e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e04c      	b.n	80015b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001530:	6a39      	ldr	r1, [r7, #32]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f91a 	bl	800176c <I2C_WaitOnTXEFlagUntilTimeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00d      	beq.n	800155a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2b04      	cmp	r3, #4
 8001544:	d107      	bne.n	8001556 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e02b      	b.n	80015b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	e021      	b.n	80015b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2da      	uxtb	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	6a39      	ldr	r1, [r7, #32]
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f8f4 	bl	800176c <I2C_WaitOnTXEFlagUntilTimeout>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00d      	beq.n	80015a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	2b04      	cmp	r3, #4
 8001590:	d107      	bne.n	80015a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e005      	b.n	80015b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015a6:	893b      	ldrh	r3, [r7, #8]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	00010002 	.word	0x00010002

080015c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d0:	e025      	b.n	800161e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d021      	beq.n	800161e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015da:	f7ff fa5f 	bl	8000a9c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d302      	bcc.n	80015f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d116      	bne.n	800161e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2220      	movs	r2, #32
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f043 0220 	orr.w	r2, r3, #32
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e023      	b.n	8001666 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10d      	bne.n	8001644 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4013      	ands	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	e00c      	b.n	800165e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4013      	ands	r3, r2
 8001650:	b29b      	uxth	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	429a      	cmp	r2, r3
 8001662:	d0b6      	beq.n	80015d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800167c:	e051      	b.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168c:	d123      	bne.n	80016d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f043 0204 	orr.w	r2, r3, #4
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e046      	b.n	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d021      	beq.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016de:	f7ff f9dd 	bl	8000a9c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d302      	bcc.n	80016f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d116      	bne.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f043 0220 	orr.w	r2, r3, #32
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e020      	b.n	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d10c      	bne.n	8001746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4013      	ands	r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	e00b      	b.n	800175e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	43da      	mvns	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d18d      	bne.n	800167e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001778:	e02d      	b.n	80017d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f878 	bl	8001870 <I2C_IsAcknowledgeFailed>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e02d      	b.n	80017e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d021      	beq.n	80017d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001792:	f7ff f983 	bl	8000a9c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d302      	bcc.n	80017a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d116      	bne.n	80017d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f043 0220 	orr.w	r2, r3, #32
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e007      	b.n	80017e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e0:	2b80      	cmp	r3, #128	; 0x80
 80017e2:	d1ca      	bne.n	800177a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017fa:	e02d      	b.n	8001858 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 f837 	bl	8001870 <I2C_IsAcknowledgeFailed>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e02d      	b.n	8001868 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001812:	d021      	beq.n	8001858 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001814:	f7ff f942 	bl	8000a9c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	429a      	cmp	r2, r3
 8001822:	d302      	bcc.n	800182a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e007      	b.n	8001868 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b04      	cmp	r3, #4
 8001864:	d1ca      	bne.n	80017fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d11b      	bne.n	80018c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001890:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f043 0204 	orr.w	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e26c      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ec:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d00c      	beq.n	8001912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
 8001904:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d10b      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x12c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d168      	bne.n	80019f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e246      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x76>
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a7f      	ldr	r2, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7a      	ldr	r2, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0xbc>
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a71      	ldr	r2, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6a      	ldr	r2, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f878 	bl	8000a9c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f874 	bl	8000a9c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1fa      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe4>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff f864 	bl	8000a9c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff f860 	bl	8000a9c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e1e6      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x10c>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a12:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d11c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x18c>
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d116      	bne.n	8001a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x176>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e1ba      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4939      	ldr	r1, [pc, #228]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	e03a      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff f819 	bl	8000a9c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff f815 	bl	8000a9c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e19b      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4927      	ldr	r1, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7fe fff8 	bl	8000a9c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7fe fff4 	bl	8000a9c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e17a      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d019      	beq.n	8001b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7fe ffd8 	bl	8000a9c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af0:	f7fe ffd4 	bl	8000a9c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e15a      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 fad8 	bl	80020c4 <RCC_Delay>
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7fe ffbe 	bl	8000a9c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7fe ffba 	bl	8000a9c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d908      	bls.n	8001b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e140      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	42420000 	.word	0x42420000
 8001b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b9e      	ldr	r3, [pc, #632]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e9      	bne.n	8001b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a6 	beq.w	8001caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b97      	ldr	r3, [pc, #604]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10d      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b94      	ldr	r3, [pc, #592]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a93      	ldr	r2, [pc, #588]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b91      	ldr	r3, [pc, #580]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a8a      	ldr	r2, [pc, #552]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba2:	f7fe ff7b 	bl	8000a9c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001baa:	f7fe ff77 	bl	8000a9c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0fd      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a7a      	ldr	r2, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e02d      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x334>
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	e01c      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x356>
 8001c08:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a6c      	ldr	r2, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d015      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7fe ff2b 	bl	8000a9c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe ff27 	bl	8000a9c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0ab      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ee      	beq.n	8001c4a <HAL_RCC_OscConfig+0x37e>
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe ff15 	bl	8000a9c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7fe ff11 	bl	8000a9c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e095      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a47      	ldr	r2, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8081 	beq.w	8001db6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d061      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d146      	bne.n	8001d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_OscConfig+0x4fc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7fe fee5 	bl	8000a9c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fee1 	bl	8000a9c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e067      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	492d      	ldr	r1, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a19      	ldr	r1, [r3, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	430b      	orrs	r3, r1
 8001d22:	4927      	ldr	r1, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x4fc>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe feb5 	bl	8000a9c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7fe feb1 	bl	8000a9c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e037      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x46a>
 8001d54:	e02f      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_RCC_OscConfig+0x4fc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fe9e 	bl	8000a9c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe fe9a 	bl	8000a9c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e020      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x498>
 8001d82:	e018      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42420060 	.word	0x42420060

08001dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0d0      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4965      	ldr	r1, [pc, #404]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d040      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d115      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e073      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06b      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fdee 	bl	8000a9c <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe fdea 	bl	8000a9c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e053      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d210      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4922      	ldr	r1, [pc, #136]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f821 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1cc>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1d0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fd4c 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08002e90 	.word	0x08002e90
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b490      	push	{r4, r7}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fa8:	1d3c      	adds	r4, r7, #4
 8001faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fb0:	f240 2301 	movw	r3, #513	; 0x201
 8001fb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x46>
 8001fde:	e02d      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe2:	623b      	str	r3, [r7, #32]
      break;
 8001fe4:	e02d      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	0c9b      	lsrs	r3, r3, #18
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ff8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c5b      	lsrs	r3, r3, #17
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002012:	4413      	add	r3, r2
 8002014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002018:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201e:	fb02 f203 	mul.w	r2, r2, r3
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e004      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	623b      	str	r3, [r7, #32]
      break;
 800203a:	e002      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203e:	623b      	str	r3, [r7, #32]
      break;
 8002040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002042:	6a3b      	ldr	r3, [r7, #32]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bc90      	pop	{r4, r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	08002e80 	.word	0x08002e80
 8002054:	40021000 	.word	0x40021000
 8002058:	007a1200 	.word	0x007a1200
 800205c:	003d0900 	.word	0x003d0900

08002060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_RCC_GetHCLKFreq+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002078:	f7ff fff2 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08002ea0 	.word	0x08002ea0

0800209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a0:	f7ff ffde 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0adb      	lsrs	r3, r3, #11
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08002ea0 	.word	0x08002ea0

080020c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <RCC_Delay+0x34>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <RCC_Delay+0x38>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0a5b      	lsrs	r3, r3, #9
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e0:	bf00      	nop
  }
  while (Delay --);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	60fa      	str	r2, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <RCC_Delay+0x1c>
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000000 	.word	0x20000000
 80020fc:	10624dd3 	.word	0x10624dd3

08002100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e03f      	b.n	8002192 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fba0 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2224      	movs	r2, #36	; 0x24
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f905 	bl	8002354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b08a      	sub	sp, #40	; 0x28
 800219e:	af02      	add	r7, sp, #8
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d17c      	bne.n	80022b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_UART_Transmit+0x2c>
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e075      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_UART_Transmit+0x3e>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e06e      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fc55 	bl	8000a9c <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002208:	d108      	bne.n	800221c <HAL_UART_Transmit+0x82>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e003      	b.n	8002224 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800222c:	e02a      	b.n	8002284 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f840 	bl	80022be <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e036      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3302      	adds	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e007      	b.n	8002276 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1cf      	bne.n	800222e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f810 	bl	80022be <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e006      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ce:	e02c      	b.n	800232a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d028      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <UART_WaitOnFlagUntilTimeout+0x30>
 80022de:	f7fe fbdd 	bl	8000a9c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d21d      	bcs.n	800232a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e00f      	b.n	800234a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	429a      	cmp	r2, r3
 8002346:	d0c3      	beq.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800238e:	f023 030c 	bic.w	r3, r3, #12
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	430b      	orrs	r3, r1
 800239a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <UART_SetConfig+0x114>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d103      	bne.n	80023c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023bc:	f7ff fe6e 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	e002      	b.n	80023ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023c4:	f7ff fe56 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 80023c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <UART_SetConfig+0x118>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	0119      	lsls	r1, r3, #4
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <UART_SetConfig+0x118>)
 8002402:	fba3 0302 	umull	r0, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	fb00 f303 	mul.w	r3, r0, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <UART_SetConfig+0x118>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002420:	4419      	add	r1, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009a      	lsls	r2, r3, #2
 800242c:	441a      	add	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fbb2 f2f3 	udiv	r2, r2, r3
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <UART_SetConfig+0x118>)
 800243a:	fba3 0302 	umull	r0, r3, r3, r2
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2064      	movs	r0, #100	; 0x64
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	3332      	adds	r3, #50	; 0x32
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	440a      	add	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013800 	.word	0x40013800
 800246c:	51eb851f 	.word	0x51eb851f

08002470 <__errno>:
 8002470:	4b01      	ldr	r3, [pc, #4]	; (8002478 <__errno+0x8>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c

0800247c <__libc_init_array>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2600      	movs	r6, #0
 8002480:	4d0c      	ldr	r5, [pc, #48]	; (80024b4 <__libc_init_array+0x38>)
 8002482:	4c0d      	ldr	r4, [pc, #52]	; (80024b8 <__libc_init_array+0x3c>)
 8002484:	1b64      	subs	r4, r4, r5
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	42a6      	cmp	r6, r4
 800248a:	d109      	bne.n	80024a0 <__libc_init_array+0x24>
 800248c:	f000 fce4 	bl	8002e58 <_init>
 8002490:	2600      	movs	r6, #0
 8002492:	4d0a      	ldr	r5, [pc, #40]	; (80024bc <__libc_init_array+0x40>)
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <__libc_init_array+0x44>)
 8002496:	1b64      	subs	r4, r4, r5
 8002498:	10a4      	asrs	r4, r4, #2
 800249a:	42a6      	cmp	r6, r4
 800249c:	d105      	bne.n	80024aa <__libc_init_array+0x2e>
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a4:	4798      	blx	r3
 80024a6:	3601      	adds	r6, #1
 80024a8:	e7ee      	b.n	8002488 <__libc_init_array+0xc>
 80024aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ae:	4798      	blx	r3
 80024b0:	3601      	adds	r6, #1
 80024b2:	e7f2      	b.n	800249a <__libc_init_array+0x1e>
 80024b4:	08002f0c 	.word	0x08002f0c
 80024b8:	08002f0c 	.word	0x08002f0c
 80024bc:	08002f0c 	.word	0x08002f0c
 80024c0:	08002f10 	.word	0x08002f10

080024c4 <memset>:
 80024c4:	4603      	mov	r3, r0
 80024c6:	4402      	add	r2, r0
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d100      	bne.n	80024ce <memset+0xa>
 80024cc:	4770      	bx	lr
 80024ce:	f803 1b01 	strb.w	r1, [r3], #1
 80024d2:	e7f9      	b.n	80024c8 <memset+0x4>

080024d4 <_puts_r>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	460e      	mov	r6, r1
 80024d8:	4605      	mov	r5, r0
 80024da:	b118      	cbz	r0, 80024e4 <_puts_r+0x10>
 80024dc:	6983      	ldr	r3, [r0, #24]
 80024de:	b90b      	cbnz	r3, 80024e4 <_puts_r+0x10>
 80024e0:	f000 fa48 	bl	8002974 <__sinit>
 80024e4:	69ab      	ldr	r3, [r5, #24]
 80024e6:	68ac      	ldr	r4, [r5, #8]
 80024e8:	b913      	cbnz	r3, 80024f0 <_puts_r+0x1c>
 80024ea:	4628      	mov	r0, r5
 80024ec:	f000 fa42 	bl	8002974 <__sinit>
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <_puts_r+0xd0>)
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d120      	bne.n	8002538 <_puts_r+0x64>
 80024f6:	686c      	ldr	r4, [r5, #4]
 80024f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024fa:	07db      	lsls	r3, r3, #31
 80024fc:	d405      	bmi.n	800250a <_puts_r+0x36>
 80024fe:	89a3      	ldrh	r3, [r4, #12]
 8002500:	0598      	lsls	r0, r3, #22
 8002502:	d402      	bmi.n	800250a <_puts_r+0x36>
 8002504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002506:	f000 fad3 	bl	8002ab0 <__retarget_lock_acquire_recursive>
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	0719      	lsls	r1, r3, #28
 800250e:	d51d      	bpl.n	800254c <_puts_r+0x78>
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	b1db      	cbz	r3, 800254c <_puts_r+0x78>
 8002514:	3e01      	subs	r6, #1
 8002516:	68a3      	ldr	r3, [r4, #8]
 8002518:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800251c:	3b01      	subs	r3, #1
 800251e:	60a3      	str	r3, [r4, #8]
 8002520:	bb39      	cbnz	r1, 8002572 <_puts_r+0x9e>
 8002522:	2b00      	cmp	r3, #0
 8002524:	da38      	bge.n	8002598 <_puts_r+0xc4>
 8002526:	4622      	mov	r2, r4
 8002528:	210a      	movs	r1, #10
 800252a:	4628      	mov	r0, r5
 800252c:	f000 f848 	bl	80025c0 <__swbuf_r>
 8002530:	3001      	adds	r0, #1
 8002532:	d011      	beq.n	8002558 <_puts_r+0x84>
 8002534:	250a      	movs	r5, #10
 8002536:	e011      	b.n	800255c <_puts_r+0x88>
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <_puts_r+0xd4>)
 800253a:	429c      	cmp	r4, r3
 800253c:	d101      	bne.n	8002542 <_puts_r+0x6e>
 800253e:	68ac      	ldr	r4, [r5, #8]
 8002540:	e7da      	b.n	80024f8 <_puts_r+0x24>
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <_puts_r+0xd8>)
 8002544:	429c      	cmp	r4, r3
 8002546:	bf08      	it	eq
 8002548:	68ec      	ldreq	r4, [r5, #12]
 800254a:	e7d5      	b.n	80024f8 <_puts_r+0x24>
 800254c:	4621      	mov	r1, r4
 800254e:	4628      	mov	r0, r5
 8002550:	f000 f888 	bl	8002664 <__swsetup_r>
 8002554:	2800      	cmp	r0, #0
 8002556:	d0dd      	beq.n	8002514 <_puts_r+0x40>
 8002558:	f04f 35ff 	mov.w	r5, #4294967295
 800255c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800255e:	07da      	lsls	r2, r3, #31
 8002560:	d405      	bmi.n	800256e <_puts_r+0x9a>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	059b      	lsls	r3, r3, #22
 8002566:	d402      	bmi.n	800256e <_puts_r+0x9a>
 8002568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800256a:	f000 faa2 	bl	8002ab2 <__retarget_lock_release_recursive>
 800256e:	4628      	mov	r0, r5
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	2b00      	cmp	r3, #0
 8002574:	da04      	bge.n	8002580 <_puts_r+0xac>
 8002576:	69a2      	ldr	r2, [r4, #24]
 8002578:	429a      	cmp	r2, r3
 800257a:	dc06      	bgt.n	800258a <_puts_r+0xb6>
 800257c:	290a      	cmp	r1, #10
 800257e:	d004      	beq.n	800258a <_puts_r+0xb6>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	6022      	str	r2, [r4, #0]
 8002586:	7019      	strb	r1, [r3, #0]
 8002588:	e7c5      	b.n	8002516 <_puts_r+0x42>
 800258a:	4622      	mov	r2, r4
 800258c:	4628      	mov	r0, r5
 800258e:	f000 f817 	bl	80025c0 <__swbuf_r>
 8002592:	3001      	adds	r0, #1
 8002594:	d1bf      	bne.n	8002516 <_puts_r+0x42>
 8002596:	e7df      	b.n	8002558 <_puts_r+0x84>
 8002598:	250a      	movs	r5, #10
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	6022      	str	r2, [r4, #0]
 80025a0:	701d      	strb	r5, [r3, #0]
 80025a2:	e7db      	b.n	800255c <_puts_r+0x88>
 80025a4:	08002ecc 	.word	0x08002ecc
 80025a8:	08002eec 	.word	0x08002eec
 80025ac:	08002eac 	.word	0x08002eac

080025b0 <puts>:
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <puts+0xc>)
 80025b2:	4601      	mov	r1, r0
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f7ff bf8d 	b.w	80024d4 <_puts_r>
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <__swbuf_r>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	460e      	mov	r6, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	4605      	mov	r5, r0
 80025c8:	b118      	cbz	r0, 80025d2 <__swbuf_r+0x12>
 80025ca:	6983      	ldr	r3, [r0, #24]
 80025cc:	b90b      	cbnz	r3, 80025d2 <__swbuf_r+0x12>
 80025ce:	f000 f9d1 	bl	8002974 <__sinit>
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <__swbuf_r+0x98>)
 80025d4:	429c      	cmp	r4, r3
 80025d6:	d12b      	bne.n	8002630 <__swbuf_r+0x70>
 80025d8:	686c      	ldr	r4, [r5, #4]
 80025da:	69a3      	ldr	r3, [r4, #24]
 80025dc:	60a3      	str	r3, [r4, #8]
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	071a      	lsls	r2, r3, #28
 80025e2:	d52f      	bpl.n	8002644 <__swbuf_r+0x84>
 80025e4:	6923      	ldr	r3, [r4, #16]
 80025e6:	b36b      	cbz	r3, 8002644 <__swbuf_r+0x84>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	6820      	ldr	r0, [r4, #0]
 80025ec:	b2f6      	uxtb	r6, r6
 80025ee:	1ac0      	subs	r0, r0, r3
 80025f0:	6963      	ldr	r3, [r4, #20]
 80025f2:	4637      	mov	r7, r6
 80025f4:	4283      	cmp	r3, r0
 80025f6:	dc04      	bgt.n	8002602 <__swbuf_r+0x42>
 80025f8:	4621      	mov	r1, r4
 80025fa:	4628      	mov	r0, r5
 80025fc:	f000 f926 	bl	800284c <_fflush_r>
 8002600:	bb30      	cbnz	r0, 8002650 <__swbuf_r+0x90>
 8002602:	68a3      	ldr	r3, [r4, #8]
 8002604:	3001      	adds	r0, #1
 8002606:	3b01      	subs	r3, #1
 8002608:	60a3      	str	r3, [r4, #8]
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	6022      	str	r2, [r4, #0]
 8002610:	701e      	strb	r6, [r3, #0]
 8002612:	6963      	ldr	r3, [r4, #20]
 8002614:	4283      	cmp	r3, r0
 8002616:	d004      	beq.n	8002622 <__swbuf_r+0x62>
 8002618:	89a3      	ldrh	r3, [r4, #12]
 800261a:	07db      	lsls	r3, r3, #31
 800261c:	d506      	bpl.n	800262c <__swbuf_r+0x6c>
 800261e:	2e0a      	cmp	r6, #10
 8002620:	d104      	bne.n	800262c <__swbuf_r+0x6c>
 8002622:	4621      	mov	r1, r4
 8002624:	4628      	mov	r0, r5
 8002626:	f000 f911 	bl	800284c <_fflush_r>
 800262a:	b988      	cbnz	r0, 8002650 <__swbuf_r+0x90>
 800262c:	4638      	mov	r0, r7
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <__swbuf_r+0x9c>)
 8002632:	429c      	cmp	r4, r3
 8002634:	d101      	bne.n	800263a <__swbuf_r+0x7a>
 8002636:	68ac      	ldr	r4, [r5, #8]
 8002638:	e7cf      	b.n	80025da <__swbuf_r+0x1a>
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <__swbuf_r+0xa0>)
 800263c:	429c      	cmp	r4, r3
 800263e:	bf08      	it	eq
 8002640:	68ec      	ldreq	r4, [r5, #12]
 8002642:	e7ca      	b.n	80025da <__swbuf_r+0x1a>
 8002644:	4621      	mov	r1, r4
 8002646:	4628      	mov	r0, r5
 8002648:	f000 f80c 	bl	8002664 <__swsetup_r>
 800264c:	2800      	cmp	r0, #0
 800264e:	d0cb      	beq.n	80025e8 <__swbuf_r+0x28>
 8002650:	f04f 37ff 	mov.w	r7, #4294967295
 8002654:	e7ea      	b.n	800262c <__swbuf_r+0x6c>
 8002656:	bf00      	nop
 8002658:	08002ecc 	.word	0x08002ecc
 800265c:	08002eec 	.word	0x08002eec
 8002660:	08002eac 	.word	0x08002eac

08002664 <__swsetup_r>:
 8002664:	4b32      	ldr	r3, [pc, #200]	; (8002730 <__swsetup_r+0xcc>)
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	681d      	ldr	r5, [r3, #0]
 800266a:	4606      	mov	r6, r0
 800266c:	460c      	mov	r4, r1
 800266e:	b125      	cbz	r5, 800267a <__swsetup_r+0x16>
 8002670:	69ab      	ldr	r3, [r5, #24]
 8002672:	b913      	cbnz	r3, 800267a <__swsetup_r+0x16>
 8002674:	4628      	mov	r0, r5
 8002676:	f000 f97d 	bl	8002974 <__sinit>
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <__swsetup_r+0xd0>)
 800267c:	429c      	cmp	r4, r3
 800267e:	d10f      	bne.n	80026a0 <__swsetup_r+0x3c>
 8002680:	686c      	ldr	r4, [r5, #4]
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002688:	0719      	lsls	r1, r3, #28
 800268a:	d42c      	bmi.n	80026e6 <__swsetup_r+0x82>
 800268c:	06dd      	lsls	r5, r3, #27
 800268e:	d411      	bmi.n	80026b4 <__swsetup_r+0x50>
 8002690:	2309      	movs	r3, #9
 8002692:	6033      	str	r3, [r6, #0]
 8002694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	81a3      	strh	r3, [r4, #12]
 800269e:	e03e      	b.n	800271e <__swsetup_r+0xba>
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <__swsetup_r+0xd4>)
 80026a2:	429c      	cmp	r4, r3
 80026a4:	d101      	bne.n	80026aa <__swsetup_r+0x46>
 80026a6:	68ac      	ldr	r4, [r5, #8]
 80026a8:	e7eb      	b.n	8002682 <__swsetup_r+0x1e>
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <__swsetup_r+0xd8>)
 80026ac:	429c      	cmp	r4, r3
 80026ae:	bf08      	it	eq
 80026b0:	68ec      	ldreq	r4, [r5, #12]
 80026b2:	e7e6      	b.n	8002682 <__swsetup_r+0x1e>
 80026b4:	0758      	lsls	r0, r3, #29
 80026b6:	d512      	bpl.n	80026de <__swsetup_r+0x7a>
 80026b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026ba:	b141      	cbz	r1, 80026ce <__swsetup_r+0x6a>
 80026bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026c0:	4299      	cmp	r1, r3
 80026c2:	d002      	beq.n	80026ca <__swsetup_r+0x66>
 80026c4:	4630      	mov	r0, r6
 80026c6:	f000 fa59 	bl	8002b7c <_free_r>
 80026ca:	2300      	movs	r3, #0
 80026cc:	6363      	str	r3, [r4, #52]	; 0x34
 80026ce:	89a3      	ldrh	r3, [r4, #12]
 80026d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026d4:	81a3      	strh	r3, [r4, #12]
 80026d6:	2300      	movs	r3, #0
 80026d8:	6063      	str	r3, [r4, #4]
 80026da:	6923      	ldr	r3, [r4, #16]
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	89a3      	ldrh	r3, [r4, #12]
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	81a3      	strh	r3, [r4, #12]
 80026e6:	6923      	ldr	r3, [r4, #16]
 80026e8:	b94b      	cbnz	r3, 80026fe <__swsetup_r+0x9a>
 80026ea:	89a3      	ldrh	r3, [r4, #12]
 80026ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f4:	d003      	beq.n	80026fe <__swsetup_r+0x9a>
 80026f6:	4621      	mov	r1, r4
 80026f8:	4630      	mov	r0, r6
 80026fa:	f000 f9ff 	bl	8002afc <__smakebuf_r>
 80026fe:	89a0      	ldrh	r0, [r4, #12]
 8002700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002704:	f010 0301 	ands.w	r3, r0, #1
 8002708:	d00a      	beq.n	8002720 <__swsetup_r+0xbc>
 800270a:	2300      	movs	r3, #0
 800270c:	60a3      	str	r3, [r4, #8]
 800270e:	6963      	ldr	r3, [r4, #20]
 8002710:	425b      	negs	r3, r3
 8002712:	61a3      	str	r3, [r4, #24]
 8002714:	6923      	ldr	r3, [r4, #16]
 8002716:	b943      	cbnz	r3, 800272a <__swsetup_r+0xc6>
 8002718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800271c:	d1ba      	bne.n	8002694 <__swsetup_r+0x30>
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	0781      	lsls	r1, r0, #30
 8002722:	bf58      	it	pl
 8002724:	6963      	ldrpl	r3, [r4, #20]
 8002726:	60a3      	str	r3, [r4, #8]
 8002728:	e7f4      	b.n	8002714 <__swsetup_r+0xb0>
 800272a:	2000      	movs	r0, #0
 800272c:	e7f7      	b.n	800271e <__swsetup_r+0xba>
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c
 8002734:	08002ecc 	.word	0x08002ecc
 8002738:	08002eec 	.word	0x08002eec
 800273c:	08002eac 	.word	0x08002eac

08002740 <__sflush_r>:
 8002740:	898a      	ldrh	r2, [r1, #12]
 8002742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002746:	4605      	mov	r5, r0
 8002748:	0710      	lsls	r0, r2, #28
 800274a:	460c      	mov	r4, r1
 800274c:	d458      	bmi.n	8002800 <__sflush_r+0xc0>
 800274e:	684b      	ldr	r3, [r1, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	dc05      	bgt.n	8002760 <__sflush_r+0x20>
 8002754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	dc02      	bgt.n	8002760 <__sflush_r+0x20>
 800275a:	2000      	movs	r0, #0
 800275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002762:	2e00      	cmp	r6, #0
 8002764:	d0f9      	beq.n	800275a <__sflush_r+0x1a>
 8002766:	2300      	movs	r3, #0
 8002768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800276c:	682f      	ldr	r7, [r5, #0]
 800276e:	602b      	str	r3, [r5, #0]
 8002770:	d032      	beq.n	80027d8 <__sflush_r+0x98>
 8002772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	075a      	lsls	r2, r3, #29
 8002778:	d505      	bpl.n	8002786 <__sflush_r+0x46>
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	1ac0      	subs	r0, r0, r3
 800277e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002780:	b10b      	cbz	r3, 8002786 <__sflush_r+0x46>
 8002782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002784:	1ac0      	subs	r0, r0, r3
 8002786:	2300      	movs	r3, #0
 8002788:	4602      	mov	r2, r0
 800278a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800278c:	4628      	mov	r0, r5
 800278e:	6a21      	ldr	r1, [r4, #32]
 8002790:	47b0      	blx	r6
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	d106      	bne.n	80027a6 <__sflush_r+0x66>
 8002798:	6829      	ldr	r1, [r5, #0]
 800279a:	291d      	cmp	r1, #29
 800279c:	d82c      	bhi.n	80027f8 <__sflush_r+0xb8>
 800279e:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <__sflush_r+0x108>)
 80027a0:	40ca      	lsrs	r2, r1
 80027a2:	07d6      	lsls	r6, r2, #31
 80027a4:	d528      	bpl.n	80027f8 <__sflush_r+0xb8>
 80027a6:	2200      	movs	r2, #0
 80027a8:	6062      	str	r2, [r4, #4]
 80027aa:	6922      	ldr	r2, [r4, #16]
 80027ac:	04d9      	lsls	r1, r3, #19
 80027ae:	6022      	str	r2, [r4, #0]
 80027b0:	d504      	bpl.n	80027bc <__sflush_r+0x7c>
 80027b2:	1c42      	adds	r2, r0, #1
 80027b4:	d101      	bne.n	80027ba <__sflush_r+0x7a>
 80027b6:	682b      	ldr	r3, [r5, #0]
 80027b8:	b903      	cbnz	r3, 80027bc <__sflush_r+0x7c>
 80027ba:	6560      	str	r0, [r4, #84]	; 0x54
 80027bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027be:	602f      	str	r7, [r5, #0]
 80027c0:	2900      	cmp	r1, #0
 80027c2:	d0ca      	beq.n	800275a <__sflush_r+0x1a>
 80027c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027c8:	4299      	cmp	r1, r3
 80027ca:	d002      	beq.n	80027d2 <__sflush_r+0x92>
 80027cc:	4628      	mov	r0, r5
 80027ce:	f000 f9d5 	bl	8002b7c <_free_r>
 80027d2:	2000      	movs	r0, #0
 80027d4:	6360      	str	r0, [r4, #52]	; 0x34
 80027d6:	e7c1      	b.n	800275c <__sflush_r+0x1c>
 80027d8:	6a21      	ldr	r1, [r4, #32]
 80027da:	2301      	movs	r3, #1
 80027dc:	4628      	mov	r0, r5
 80027de:	47b0      	blx	r6
 80027e0:	1c41      	adds	r1, r0, #1
 80027e2:	d1c7      	bne.n	8002774 <__sflush_r+0x34>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0c4      	beq.n	8002774 <__sflush_r+0x34>
 80027ea:	2b1d      	cmp	r3, #29
 80027ec:	d001      	beq.n	80027f2 <__sflush_r+0xb2>
 80027ee:	2b16      	cmp	r3, #22
 80027f0:	d101      	bne.n	80027f6 <__sflush_r+0xb6>
 80027f2:	602f      	str	r7, [r5, #0]
 80027f4:	e7b1      	b.n	800275a <__sflush_r+0x1a>
 80027f6:	89a3      	ldrh	r3, [r4, #12]
 80027f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027fc:	81a3      	strh	r3, [r4, #12]
 80027fe:	e7ad      	b.n	800275c <__sflush_r+0x1c>
 8002800:	690f      	ldr	r7, [r1, #16]
 8002802:	2f00      	cmp	r7, #0
 8002804:	d0a9      	beq.n	800275a <__sflush_r+0x1a>
 8002806:	0793      	lsls	r3, r2, #30
 8002808:	bf18      	it	ne
 800280a:	2300      	movne	r3, #0
 800280c:	680e      	ldr	r6, [r1, #0]
 800280e:	bf08      	it	eq
 8002810:	694b      	ldreq	r3, [r1, #20]
 8002812:	eba6 0807 	sub.w	r8, r6, r7
 8002816:	600f      	str	r7, [r1, #0]
 8002818:	608b      	str	r3, [r1, #8]
 800281a:	f1b8 0f00 	cmp.w	r8, #0
 800281e:	dd9c      	ble.n	800275a <__sflush_r+0x1a>
 8002820:	4643      	mov	r3, r8
 8002822:	463a      	mov	r2, r7
 8002824:	4628      	mov	r0, r5
 8002826:	6a21      	ldr	r1, [r4, #32]
 8002828:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800282a:	47b0      	blx	r6
 800282c:	2800      	cmp	r0, #0
 800282e:	dc06      	bgt.n	800283e <__sflush_r+0xfe>
 8002830:	89a3      	ldrh	r3, [r4, #12]
 8002832:	f04f 30ff 	mov.w	r0, #4294967295
 8002836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283a:	81a3      	strh	r3, [r4, #12]
 800283c:	e78e      	b.n	800275c <__sflush_r+0x1c>
 800283e:	4407      	add	r7, r0
 8002840:	eba8 0800 	sub.w	r8, r8, r0
 8002844:	e7e9      	b.n	800281a <__sflush_r+0xda>
 8002846:	bf00      	nop
 8002848:	20400001 	.word	0x20400001

0800284c <_fflush_r>:
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	690b      	ldr	r3, [r1, #16]
 8002850:	4605      	mov	r5, r0
 8002852:	460c      	mov	r4, r1
 8002854:	b913      	cbnz	r3, 800285c <_fflush_r+0x10>
 8002856:	2500      	movs	r5, #0
 8002858:	4628      	mov	r0, r5
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	b118      	cbz	r0, 8002866 <_fflush_r+0x1a>
 800285e:	6983      	ldr	r3, [r0, #24]
 8002860:	b90b      	cbnz	r3, 8002866 <_fflush_r+0x1a>
 8002862:	f000 f887 	bl	8002974 <__sinit>
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <_fflush_r+0x6c>)
 8002868:	429c      	cmp	r4, r3
 800286a:	d11b      	bne.n	80028a4 <_fflush_r+0x58>
 800286c:	686c      	ldr	r4, [r5, #4]
 800286e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ef      	beq.n	8002856 <_fflush_r+0xa>
 8002876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002878:	07d0      	lsls	r0, r2, #31
 800287a:	d404      	bmi.n	8002886 <_fflush_r+0x3a>
 800287c:	0599      	lsls	r1, r3, #22
 800287e:	d402      	bmi.n	8002886 <_fflush_r+0x3a>
 8002880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002882:	f000 f915 	bl	8002ab0 <__retarget_lock_acquire_recursive>
 8002886:	4628      	mov	r0, r5
 8002888:	4621      	mov	r1, r4
 800288a:	f7ff ff59 	bl	8002740 <__sflush_r>
 800288e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002890:	4605      	mov	r5, r0
 8002892:	07da      	lsls	r2, r3, #31
 8002894:	d4e0      	bmi.n	8002858 <_fflush_r+0xc>
 8002896:	89a3      	ldrh	r3, [r4, #12]
 8002898:	059b      	lsls	r3, r3, #22
 800289a:	d4dd      	bmi.n	8002858 <_fflush_r+0xc>
 800289c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800289e:	f000 f908 	bl	8002ab2 <__retarget_lock_release_recursive>
 80028a2:	e7d9      	b.n	8002858 <_fflush_r+0xc>
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <_fflush_r+0x70>)
 80028a6:	429c      	cmp	r4, r3
 80028a8:	d101      	bne.n	80028ae <_fflush_r+0x62>
 80028aa:	68ac      	ldr	r4, [r5, #8]
 80028ac:	e7df      	b.n	800286e <_fflush_r+0x22>
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <_fflush_r+0x74>)
 80028b0:	429c      	cmp	r4, r3
 80028b2:	bf08      	it	eq
 80028b4:	68ec      	ldreq	r4, [r5, #12]
 80028b6:	e7da      	b.n	800286e <_fflush_r+0x22>
 80028b8:	08002ecc 	.word	0x08002ecc
 80028bc:	08002eec 	.word	0x08002eec
 80028c0:	08002eac 	.word	0x08002eac

080028c4 <std>:
 80028c4:	2300      	movs	r3, #0
 80028c6:	b510      	push	{r4, lr}
 80028c8:	4604      	mov	r4, r0
 80028ca:	e9c0 3300 	strd	r3, r3, [r0]
 80028ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028d2:	6083      	str	r3, [r0, #8]
 80028d4:	8181      	strh	r1, [r0, #12]
 80028d6:	6643      	str	r3, [r0, #100]	; 0x64
 80028d8:	81c2      	strh	r2, [r0, #14]
 80028da:	6183      	str	r3, [r0, #24]
 80028dc:	4619      	mov	r1, r3
 80028de:	2208      	movs	r2, #8
 80028e0:	305c      	adds	r0, #92	; 0x5c
 80028e2:	f7ff fdef 	bl	80024c4 <memset>
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <std+0x38>)
 80028e8:	6224      	str	r4, [r4, #32]
 80028ea:	6263      	str	r3, [r4, #36]	; 0x24
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <std+0x3c>)
 80028ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <std+0x40>)
 80028f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <std+0x44>)
 80028f6:	6323      	str	r3, [r4, #48]	; 0x30
 80028f8:	bd10      	pop	{r4, pc}
 80028fa:	bf00      	nop
 80028fc:	08002ce9 	.word	0x08002ce9
 8002900:	08002d0b 	.word	0x08002d0b
 8002904:	08002d43 	.word	0x08002d43
 8002908:	08002d67 	.word	0x08002d67

0800290c <_cleanup_r>:
 800290c:	4901      	ldr	r1, [pc, #4]	; (8002914 <_cleanup_r+0x8>)
 800290e:	f000 b8af 	b.w	8002a70 <_fwalk_reent>
 8002912:	bf00      	nop
 8002914:	0800284d 	.word	0x0800284d

08002918 <__sfmoreglue>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2568      	movs	r5, #104	; 0x68
 800291c:	1e4a      	subs	r2, r1, #1
 800291e:	4355      	muls	r5, r2
 8002920:	460e      	mov	r6, r1
 8002922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002926:	f000 f975 	bl	8002c14 <_malloc_r>
 800292a:	4604      	mov	r4, r0
 800292c:	b140      	cbz	r0, 8002940 <__sfmoreglue+0x28>
 800292e:	2100      	movs	r1, #0
 8002930:	e9c0 1600 	strd	r1, r6, [r0]
 8002934:	300c      	adds	r0, #12
 8002936:	60a0      	str	r0, [r4, #8]
 8002938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800293c:	f7ff fdc2 	bl	80024c4 <memset>
 8002940:	4620      	mov	r0, r4
 8002942:	bd70      	pop	{r4, r5, r6, pc}

08002944 <__sfp_lock_acquire>:
 8002944:	4801      	ldr	r0, [pc, #4]	; (800294c <__sfp_lock_acquire+0x8>)
 8002946:	f000 b8b3 	b.w	8002ab0 <__retarget_lock_acquire_recursive>
 800294a:	bf00      	nop
 800294c:	200005a8 	.word	0x200005a8

08002950 <__sfp_lock_release>:
 8002950:	4801      	ldr	r0, [pc, #4]	; (8002958 <__sfp_lock_release+0x8>)
 8002952:	f000 b8ae 	b.w	8002ab2 <__retarget_lock_release_recursive>
 8002956:	bf00      	nop
 8002958:	200005a8 	.word	0x200005a8

0800295c <__sinit_lock_acquire>:
 800295c:	4801      	ldr	r0, [pc, #4]	; (8002964 <__sinit_lock_acquire+0x8>)
 800295e:	f000 b8a7 	b.w	8002ab0 <__retarget_lock_acquire_recursive>
 8002962:	bf00      	nop
 8002964:	200005a3 	.word	0x200005a3

08002968 <__sinit_lock_release>:
 8002968:	4801      	ldr	r0, [pc, #4]	; (8002970 <__sinit_lock_release+0x8>)
 800296a:	f000 b8a2 	b.w	8002ab2 <__retarget_lock_release_recursive>
 800296e:	bf00      	nop
 8002970:	200005a3 	.word	0x200005a3

08002974 <__sinit>:
 8002974:	b510      	push	{r4, lr}
 8002976:	4604      	mov	r4, r0
 8002978:	f7ff fff0 	bl	800295c <__sinit_lock_acquire>
 800297c:	69a3      	ldr	r3, [r4, #24]
 800297e:	b11b      	cbz	r3, 8002988 <__sinit+0x14>
 8002980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002984:	f7ff bff0 	b.w	8002968 <__sinit_lock_release>
 8002988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800298c:	6523      	str	r3, [r4, #80]	; 0x50
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <__sinit+0x68>)
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <__sinit+0x6c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	62a2      	str	r2, [r4, #40]	; 0x28
 8002996:	42a3      	cmp	r3, r4
 8002998:	bf08      	it	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	4620      	mov	r0, r4
 800299e:	bf08      	it	eq
 80029a0:	61a3      	streq	r3, [r4, #24]
 80029a2:	f000 f81f 	bl	80029e4 <__sfp>
 80029a6:	6060      	str	r0, [r4, #4]
 80029a8:	4620      	mov	r0, r4
 80029aa:	f000 f81b 	bl	80029e4 <__sfp>
 80029ae:	60a0      	str	r0, [r4, #8]
 80029b0:	4620      	mov	r0, r4
 80029b2:	f000 f817 	bl	80029e4 <__sfp>
 80029b6:	2200      	movs	r2, #0
 80029b8:	2104      	movs	r1, #4
 80029ba:	60e0      	str	r0, [r4, #12]
 80029bc:	6860      	ldr	r0, [r4, #4]
 80029be:	f7ff ff81 	bl	80028c4 <std>
 80029c2:	2201      	movs	r2, #1
 80029c4:	2109      	movs	r1, #9
 80029c6:	68a0      	ldr	r0, [r4, #8]
 80029c8:	f7ff ff7c 	bl	80028c4 <std>
 80029cc:	2202      	movs	r2, #2
 80029ce:	2112      	movs	r1, #18
 80029d0:	68e0      	ldr	r0, [r4, #12]
 80029d2:	f7ff ff77 	bl	80028c4 <std>
 80029d6:	2301      	movs	r3, #1
 80029d8:	61a3      	str	r3, [r4, #24]
 80029da:	e7d1      	b.n	8002980 <__sinit+0xc>
 80029dc:	08002ea8 	.word	0x08002ea8
 80029e0:	0800290d 	.word	0x0800290d

080029e4 <__sfp>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	4607      	mov	r7, r0
 80029e8:	f7ff ffac 	bl	8002944 <__sfp_lock_acquire>
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <__sfp+0x84>)
 80029ee:	681e      	ldr	r6, [r3, #0]
 80029f0:	69b3      	ldr	r3, [r6, #24]
 80029f2:	b913      	cbnz	r3, 80029fa <__sfp+0x16>
 80029f4:	4630      	mov	r0, r6
 80029f6:	f7ff ffbd 	bl	8002974 <__sinit>
 80029fa:	3648      	adds	r6, #72	; 0x48
 80029fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	d503      	bpl.n	8002a0c <__sfp+0x28>
 8002a04:	6833      	ldr	r3, [r6, #0]
 8002a06:	b30b      	cbz	r3, 8002a4c <__sfp+0x68>
 8002a08:	6836      	ldr	r6, [r6, #0]
 8002a0a:	e7f7      	b.n	80029fc <__sfp+0x18>
 8002a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a10:	b9d5      	cbnz	r5, 8002a48 <__sfp+0x64>
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <__sfp+0x88>)
 8002a14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a18:	60e3      	str	r3, [r4, #12]
 8002a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8002a1c:	f000 f847 	bl	8002aae <__retarget_lock_init_recursive>
 8002a20:	f7ff ff96 	bl	8002950 <__sfp_lock_release>
 8002a24:	2208      	movs	r2, #8
 8002a26:	4629      	mov	r1, r5
 8002a28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a30:	6025      	str	r5, [r4, #0]
 8002a32:	61a5      	str	r5, [r4, #24]
 8002a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a38:	f7ff fd44 	bl	80024c4 <memset>
 8002a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a44:	4620      	mov	r0, r4
 8002a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a48:	3468      	adds	r4, #104	; 0x68
 8002a4a:	e7d9      	b.n	8002a00 <__sfp+0x1c>
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	4638      	mov	r0, r7
 8002a50:	f7ff ff62 	bl	8002918 <__sfmoreglue>
 8002a54:	4604      	mov	r4, r0
 8002a56:	6030      	str	r0, [r6, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d1d5      	bne.n	8002a08 <__sfp+0x24>
 8002a5c:	f7ff ff78 	bl	8002950 <__sfp_lock_release>
 8002a60:	230c      	movs	r3, #12
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	e7ee      	b.n	8002a44 <__sfp+0x60>
 8002a66:	bf00      	nop
 8002a68:	08002ea8 	.word	0x08002ea8
 8002a6c:	ffff0001 	.word	0xffff0001

08002a70 <_fwalk_reent>:
 8002a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a74:	4606      	mov	r6, r0
 8002a76:	4688      	mov	r8, r1
 8002a78:	2700      	movs	r7, #0
 8002a7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a82:	f1b9 0901 	subs.w	r9, r9, #1
 8002a86:	d505      	bpl.n	8002a94 <_fwalk_reent+0x24>
 8002a88:	6824      	ldr	r4, [r4, #0]
 8002a8a:	2c00      	cmp	r4, #0
 8002a8c:	d1f7      	bne.n	8002a7e <_fwalk_reent+0xe>
 8002a8e:	4638      	mov	r0, r7
 8002a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a94:	89ab      	ldrh	r3, [r5, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d907      	bls.n	8002aaa <_fwalk_reent+0x3a>
 8002a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	d003      	beq.n	8002aaa <_fwalk_reent+0x3a>
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	47c0      	blx	r8
 8002aa8:	4307      	orrs	r7, r0
 8002aaa:	3568      	adds	r5, #104	; 0x68
 8002aac:	e7e9      	b.n	8002a82 <_fwalk_reent+0x12>

08002aae <__retarget_lock_init_recursive>:
 8002aae:	4770      	bx	lr

08002ab0 <__retarget_lock_acquire_recursive>:
 8002ab0:	4770      	bx	lr

08002ab2 <__retarget_lock_release_recursive>:
 8002ab2:	4770      	bx	lr

08002ab4 <__swhatbuf_r>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	460e      	mov	r6, r1
 8002ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002abc:	4614      	mov	r4, r2
 8002abe:	2900      	cmp	r1, #0
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	b096      	sub	sp, #88	; 0x58
 8002ac4:	da07      	bge.n	8002ad6 <__swhatbuf_r+0x22>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	602b      	str	r3, [r5, #0]
 8002aca:	89b3      	ldrh	r3, [r6, #12]
 8002acc:	061a      	lsls	r2, r3, #24
 8002ace:	d410      	bmi.n	8002af2 <__swhatbuf_r+0x3e>
 8002ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad4:	e00e      	b.n	8002af4 <__swhatbuf_r+0x40>
 8002ad6:	466a      	mov	r2, sp
 8002ad8:	f000 f96c 	bl	8002db4 <_fstat_r>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	dbf2      	blt.n	8002ac6 <__swhatbuf_r+0x12>
 8002ae0:	9a01      	ldr	r2, [sp, #4]
 8002ae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002aea:	425a      	negs	r2, r3
 8002aec:	415a      	adcs	r2, r3
 8002aee:	602a      	str	r2, [r5, #0]
 8002af0:	e7ee      	b.n	8002ad0 <__swhatbuf_r+0x1c>
 8002af2:	2340      	movs	r3, #64	; 0x40
 8002af4:	2000      	movs	r0, #0
 8002af6:	6023      	str	r3, [r4, #0]
 8002af8:	b016      	add	sp, #88	; 0x58
 8002afa:	bd70      	pop	{r4, r5, r6, pc}

08002afc <__smakebuf_r>:
 8002afc:	898b      	ldrh	r3, [r1, #12]
 8002afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b00:	079d      	lsls	r5, r3, #30
 8002b02:	4606      	mov	r6, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	d507      	bpl.n	8002b18 <__smakebuf_r+0x1c>
 8002b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	6123      	str	r3, [r4, #16]
 8002b10:	2301      	movs	r3, #1
 8002b12:	6163      	str	r3, [r4, #20]
 8002b14:	b002      	add	sp, #8
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	466a      	mov	r2, sp
 8002b1a:	ab01      	add	r3, sp, #4
 8002b1c:	f7ff ffca 	bl	8002ab4 <__swhatbuf_r>
 8002b20:	9900      	ldr	r1, [sp, #0]
 8002b22:	4605      	mov	r5, r0
 8002b24:	4630      	mov	r0, r6
 8002b26:	f000 f875 	bl	8002c14 <_malloc_r>
 8002b2a:	b948      	cbnz	r0, 8002b40 <__smakebuf_r+0x44>
 8002b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b30:	059a      	lsls	r2, r3, #22
 8002b32:	d4ef      	bmi.n	8002b14 <__smakebuf_r+0x18>
 8002b34:	f023 0303 	bic.w	r3, r3, #3
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	81a3      	strh	r3, [r4, #12]
 8002b3e:	e7e3      	b.n	8002b08 <__smakebuf_r+0xc>
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <__smakebuf_r+0x7c>)
 8002b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	6020      	str	r0, [r4, #0]
 8002b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4c:	81a3      	strh	r3, [r4, #12]
 8002b4e:	9b00      	ldr	r3, [sp, #0]
 8002b50:	6120      	str	r0, [r4, #16]
 8002b52:	6163      	str	r3, [r4, #20]
 8002b54:	9b01      	ldr	r3, [sp, #4]
 8002b56:	b15b      	cbz	r3, 8002b70 <__smakebuf_r+0x74>
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b5e:	f000 f93b 	bl	8002dd8 <_isatty_r>
 8002b62:	b128      	cbz	r0, 8002b70 <__smakebuf_r+0x74>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	81a3      	strh	r3, [r4, #12]
 8002b70:	89a0      	ldrh	r0, [r4, #12]
 8002b72:	4305      	orrs	r5, r0
 8002b74:	81a5      	strh	r5, [r4, #12]
 8002b76:	e7cd      	b.n	8002b14 <__smakebuf_r+0x18>
 8002b78:	0800290d 	.word	0x0800290d

08002b7c <_free_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4605      	mov	r5, r0
 8002b80:	2900      	cmp	r1, #0
 8002b82:	d043      	beq.n	8002c0c <_free_r+0x90>
 8002b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b88:	1f0c      	subs	r4, r1, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bfb8      	it	lt
 8002b8e:	18e4      	addlt	r4, r4, r3
 8002b90:	f000 f944 	bl	8002e1c <__malloc_lock>
 8002b94:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <_free_r+0x94>)
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	4610      	mov	r0, r2
 8002b9a:	b933      	cbnz	r3, 8002baa <_free_r+0x2e>
 8002b9c:	6063      	str	r3, [r4, #4]
 8002b9e:	6014      	str	r4, [r2, #0]
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba6:	f000 b93f 	b.w	8002e28 <__malloc_unlock>
 8002baa:	42a3      	cmp	r3, r4
 8002bac:	d90a      	bls.n	8002bc4 <_free_r+0x48>
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	1862      	adds	r2, r4, r1
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	bf01      	itttt	eq
 8002bb6:	681a      	ldreq	r2, [r3, #0]
 8002bb8:	685b      	ldreq	r3, [r3, #4]
 8002bba:	1852      	addeq	r2, r2, r1
 8002bbc:	6022      	streq	r2, [r4, #0]
 8002bbe:	6063      	str	r3, [r4, #4]
 8002bc0:	6004      	str	r4, [r0, #0]
 8002bc2:	e7ed      	b.n	8002ba0 <_free_r+0x24>
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	b10b      	cbz	r3, 8002bce <_free_r+0x52>
 8002bca:	42a3      	cmp	r3, r4
 8002bcc:	d9fa      	bls.n	8002bc4 <_free_r+0x48>
 8002bce:	6811      	ldr	r1, [r2, #0]
 8002bd0:	1850      	adds	r0, r2, r1
 8002bd2:	42a0      	cmp	r0, r4
 8002bd4:	d10b      	bne.n	8002bee <_free_r+0x72>
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	4401      	add	r1, r0
 8002bda:	1850      	adds	r0, r2, r1
 8002bdc:	4283      	cmp	r3, r0
 8002bde:	6011      	str	r1, [r2, #0]
 8002be0:	d1de      	bne.n	8002ba0 <_free_r+0x24>
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4401      	add	r1, r0
 8002be8:	6011      	str	r1, [r2, #0]
 8002bea:	6053      	str	r3, [r2, #4]
 8002bec:	e7d8      	b.n	8002ba0 <_free_r+0x24>
 8002bee:	d902      	bls.n	8002bf6 <_free_r+0x7a>
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	602b      	str	r3, [r5, #0]
 8002bf4:	e7d4      	b.n	8002ba0 <_free_r+0x24>
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	1821      	adds	r1, r4, r0
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	bf01      	itttt	eq
 8002bfe:	6819      	ldreq	r1, [r3, #0]
 8002c00:	685b      	ldreq	r3, [r3, #4]
 8002c02:	1809      	addeq	r1, r1, r0
 8002c04:	6021      	streq	r1, [r4, #0]
 8002c06:	6063      	str	r3, [r4, #4]
 8002c08:	6054      	str	r4, [r2, #4]
 8002c0a:	e7c9      	b.n	8002ba0 <_free_r+0x24>
 8002c0c:	bd38      	pop	{r3, r4, r5, pc}
 8002c0e:	bf00      	nop
 8002c10:	200004b8 	.word	0x200004b8

08002c14 <_malloc_r>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	1ccd      	adds	r5, r1, #3
 8002c18:	f025 0503 	bic.w	r5, r5, #3
 8002c1c:	3508      	adds	r5, #8
 8002c1e:	2d0c      	cmp	r5, #12
 8002c20:	bf38      	it	cc
 8002c22:	250c      	movcc	r5, #12
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	4606      	mov	r6, r0
 8002c28:	db01      	blt.n	8002c2e <_malloc_r+0x1a>
 8002c2a:	42a9      	cmp	r1, r5
 8002c2c:	d903      	bls.n	8002c36 <_malloc_r+0x22>
 8002c2e:	230c      	movs	r3, #12
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	2000      	movs	r0, #0
 8002c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c36:	f000 f8f1 	bl	8002e1c <__malloc_lock>
 8002c3a:	4921      	ldr	r1, [pc, #132]	; (8002cc0 <_malloc_r+0xac>)
 8002c3c:	680a      	ldr	r2, [r1, #0]
 8002c3e:	4614      	mov	r4, r2
 8002c40:	b99c      	cbnz	r4, 8002c6a <_malloc_r+0x56>
 8002c42:	4f20      	ldr	r7, [pc, #128]	; (8002cc4 <_malloc_r+0xb0>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b923      	cbnz	r3, 8002c52 <_malloc_r+0x3e>
 8002c48:	4621      	mov	r1, r4
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f000 f83c 	bl	8002cc8 <_sbrk_r>
 8002c50:	6038      	str	r0, [r7, #0]
 8002c52:	4629      	mov	r1, r5
 8002c54:	4630      	mov	r0, r6
 8002c56:	f000 f837 	bl	8002cc8 <_sbrk_r>
 8002c5a:	1c43      	adds	r3, r0, #1
 8002c5c:	d123      	bne.n	8002ca6 <_malloc_r+0x92>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	4630      	mov	r0, r6
 8002c62:	6033      	str	r3, [r6, #0]
 8002c64:	f000 f8e0 	bl	8002e28 <__malloc_unlock>
 8002c68:	e7e3      	b.n	8002c32 <_malloc_r+0x1e>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	1b5b      	subs	r3, r3, r5
 8002c6e:	d417      	bmi.n	8002ca0 <_malloc_r+0x8c>
 8002c70:	2b0b      	cmp	r3, #11
 8002c72:	d903      	bls.n	8002c7c <_malloc_r+0x68>
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	441c      	add	r4, r3
 8002c78:	6025      	str	r5, [r4, #0]
 8002c7a:	e004      	b.n	8002c86 <_malloc_r+0x72>
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	42a2      	cmp	r2, r4
 8002c80:	bf0c      	ite	eq
 8002c82:	600b      	streq	r3, [r1, #0]
 8002c84:	6053      	strne	r3, [r2, #4]
 8002c86:	4630      	mov	r0, r6
 8002c88:	f000 f8ce 	bl	8002e28 <__malloc_unlock>
 8002c8c:	f104 000b 	add.w	r0, r4, #11
 8002c90:	1d23      	adds	r3, r4, #4
 8002c92:	f020 0007 	bic.w	r0, r0, #7
 8002c96:	1ac2      	subs	r2, r0, r3
 8002c98:	d0cc      	beq.n	8002c34 <_malloc_r+0x20>
 8002c9a:	1a1b      	subs	r3, r3, r0
 8002c9c:	50a3      	str	r3, [r4, r2]
 8002c9e:	e7c9      	b.n	8002c34 <_malloc_r+0x20>
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	6864      	ldr	r4, [r4, #4]
 8002ca4:	e7cc      	b.n	8002c40 <_malloc_r+0x2c>
 8002ca6:	1cc4      	adds	r4, r0, #3
 8002ca8:	f024 0403 	bic.w	r4, r4, #3
 8002cac:	42a0      	cmp	r0, r4
 8002cae:	d0e3      	beq.n	8002c78 <_malloc_r+0x64>
 8002cb0:	1a21      	subs	r1, r4, r0
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	f000 f808 	bl	8002cc8 <_sbrk_r>
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d1dd      	bne.n	8002c78 <_malloc_r+0x64>
 8002cbc:	e7cf      	b.n	8002c5e <_malloc_r+0x4a>
 8002cbe:	bf00      	nop
 8002cc0:	200004b8 	.word	0x200004b8
 8002cc4:	200004bc 	.word	0x200004bc

08002cc8 <_sbrk_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4d05      	ldr	r5, [pc, #20]	; (8002ce4 <_sbrk_r+0x1c>)
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	f7fd fd3a 	bl	800074c <_sbrk>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_sbrk_r+0x1a>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_sbrk_r+0x1a>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	200005ac 	.word	0x200005ac

08002ce8 <__sread>:
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	460c      	mov	r4, r1
 8002cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf0:	f000 f8a0 	bl	8002e34 <_read_r>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	bfab      	itete	ge
 8002cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8002cfc:	181b      	addge	r3, r3, r0
 8002cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d02:	bfac      	ite	ge
 8002d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d06:	81a3      	strhlt	r3, [r4, #12]
 8002d08:	bd10      	pop	{r4, pc}

08002d0a <__swrite>:
 8002d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0e:	461f      	mov	r7, r3
 8002d10:	898b      	ldrh	r3, [r1, #12]
 8002d12:	4605      	mov	r5, r0
 8002d14:	05db      	lsls	r3, r3, #23
 8002d16:	460c      	mov	r4, r1
 8002d18:	4616      	mov	r6, r2
 8002d1a:	d505      	bpl.n	8002d28 <__swrite+0x1e>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d24:	f000 f868 	bl	8002df8 <_lseek_r>
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	4628      	mov	r0, r5
 8002d34:	463b      	mov	r3, r7
 8002d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3e:	f000 b817 	b.w	8002d70 <_write_r>

08002d42 <__sseek>:
 8002d42:	b510      	push	{r4, lr}
 8002d44:	460c      	mov	r4, r1
 8002d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d4a:	f000 f855 	bl	8002df8 <_lseek_r>
 8002d4e:	1c43      	adds	r3, r0, #1
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	bf15      	itete	ne
 8002d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d5e:	81a3      	strheq	r3, [r4, #12]
 8002d60:	bf18      	it	ne
 8002d62:	81a3      	strhne	r3, [r4, #12]
 8002d64:	bd10      	pop	{r4, pc}

08002d66 <__sclose>:
 8002d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6a:	f000 b813 	b.w	8002d94 <_close_r>
	...

08002d70 <_write_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4604      	mov	r4, r0
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4d05      	ldr	r5, [pc, #20]	; (8002d90 <_write_r+0x20>)
 8002d7c:	602a      	str	r2, [r5, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f7fd fdf8 	bl	8000974 <_write>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d102      	bne.n	8002d8e <_write_r+0x1e>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b103      	cbz	r3, 8002d8e <_write_r+0x1e>
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	bd38      	pop	{r3, r4, r5, pc}
 8002d90:	200005ac 	.word	0x200005ac

08002d94 <_close_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	2300      	movs	r3, #0
 8002d98:	4d05      	ldr	r5, [pc, #20]	; (8002db0 <_close_r+0x1c>)
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fd fca4 	bl	80006ec <_close>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_close_r+0x1a>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_close_r+0x1a>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	200005ac 	.word	0x200005ac

08002db4 <_fstat_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	2300      	movs	r3, #0
 8002db8:	4d06      	ldr	r5, [pc, #24]	; (8002dd4 <_fstat_r+0x20>)
 8002dba:	4604      	mov	r4, r0
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	602b      	str	r3, [r5, #0]
 8002dc2:	f7fd fc9e 	bl	8000702 <_fstat>
 8002dc6:	1c43      	adds	r3, r0, #1
 8002dc8:	d102      	bne.n	8002dd0 <_fstat_r+0x1c>
 8002dca:	682b      	ldr	r3, [r5, #0]
 8002dcc:	b103      	cbz	r3, 8002dd0 <_fstat_r+0x1c>
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	bd38      	pop	{r3, r4, r5, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200005ac 	.word	0x200005ac

08002dd8 <_isatty_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	2300      	movs	r3, #0
 8002ddc:	4d05      	ldr	r5, [pc, #20]	; (8002df4 <_isatty_r+0x1c>)
 8002dde:	4604      	mov	r4, r0
 8002de0:	4608      	mov	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fd fc9c 	bl	8000720 <_isatty>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d102      	bne.n	8002df2 <_isatty_r+0x1a>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	b103      	cbz	r3, 8002df2 <_isatty_r+0x1a>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	200005ac 	.word	0x200005ac

08002df8 <_lseek_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	4d05      	ldr	r5, [pc, #20]	; (8002e18 <_lseek_r+0x20>)
 8002e04:	602a      	str	r2, [r5, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f7fd fc94 	bl	8000734 <_lseek>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d102      	bne.n	8002e16 <_lseek_r+0x1e>
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	b103      	cbz	r3, 8002e16 <_lseek_r+0x1e>
 8002e14:	6023      	str	r3, [r4, #0]
 8002e16:	bd38      	pop	{r3, r4, r5, pc}
 8002e18:	200005ac 	.word	0x200005ac

08002e1c <__malloc_lock>:
 8002e1c:	4801      	ldr	r0, [pc, #4]	; (8002e24 <__malloc_lock+0x8>)
 8002e1e:	f7ff be47 	b.w	8002ab0 <__retarget_lock_acquire_recursive>
 8002e22:	bf00      	nop
 8002e24:	200005a4 	.word	0x200005a4

08002e28 <__malloc_unlock>:
 8002e28:	4801      	ldr	r0, [pc, #4]	; (8002e30 <__malloc_unlock+0x8>)
 8002e2a:	f7ff be42 	b.w	8002ab2 <__retarget_lock_release_recursive>
 8002e2e:	bf00      	nop
 8002e30:	200005a4 	.word	0x200005a4

08002e34 <_read_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4d05      	ldr	r5, [pc, #20]	; (8002e54 <_read_r+0x20>)
 8002e40:	602a      	str	r2, [r5, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7fd fc35 	bl	80006b2 <_read>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d102      	bne.n	8002e52 <_read_r+0x1e>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	b103      	cbz	r3, 8002e52 <_read_r+0x1e>
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
 8002e54:	200005ac 	.word	0x200005ac

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr
